import "./chunk-UXIASGQL.js";

// node_modules/@faker-js/faker/dist/esm/chunk-LSZKOVGW.mjs
var r = [{ name: "Aegean Airlines", iataCode: "A3" }, { name: "Aeroflot", iataCode: "SU" }, { name: "Aerolineas Argentinas", iataCode: "AR" }, { name: "Aeromexico", iataCode: "AM" }, { name: "Air Algerie", iataCode: "AH" }, { name: "Air Arabia", iataCode: "G9" }, { name: "Air Canada", iataCode: "AC" }, { name: "Air China", iataCode: "CA" }, { name: "Air Europa", iataCode: "UX" }, { name: "Air France-KLM", iataCode: "AF" }, { name: "Air India", iataCode: "AI" }, { name: "Air Mauritius", iataCode: "MK" }, { name: "Air New Zealand", iataCode: "NZ" }, { name: "Air Niugini", iataCode: "PX" }, { name: "Air Tahiti", iataCode: "VT" }, { name: "Air Tahiti Nui", iataCode: "TN" }, { name: "Air Transat", iataCode: "TS" }, { name: "AirAsia X", iataCode: "D7" }, { name: "AirAsia", iataCode: "AK" }, { name: "Aircalin", iataCode: "SB" }, { name: "Alaska Airlines", iataCode: "AS" }, { name: "Alitalia", iataCode: "AZ" }, { name: "All Nippon Airways", iataCode: "NH" }, { name: "Allegiant Air", iataCode: "G4" }, { name: "American Airlines", iataCode: "AA" }, { name: "Asiana Airlines", iataCode: "OZ" }, { name: "Avianca", iataCode: "AV" }, { name: "Azul Linhas Aereas Brasileiras", iataCode: "AD" }, { name: "Azur Air", iataCode: "ZF" }, { name: "Beijing Capital Airlines", iataCode: "JD" }, { name: "Boliviana de Aviacion", iataCode: "OB" }, { name: "British Airways", iataCode: "BA" }, { name: "Cathay Pacific", iataCode: "CX" }, { name: "Cebu Pacific Air", iataCode: "5J" }, { name: "China Airlines", iataCode: "CI" }, { name: "China Eastern Airlines", iataCode: "MU" }, { name: "China Southern Airlines", iataCode: "CZ" }, { name: "Condor", iataCode: "DE" }, { name: "Copa Airlines", iataCode: "CM" }, { name: "Delta Air Lines", iataCode: "DL" }, { name: "Easyfly", iataCode: "VE" }, { name: "EasyJet", iataCode: "U2" }, { name: "EcoJet", iataCode: "8J" }, { name: "Egyptair", iataCode: "MS" }, { name: "El Al", iataCode: "LY" }, { name: "Emirates Airlines", iataCode: "EK" }, { name: "Ethiopian Airlines", iataCode: "ET" }, { name: "Etihad Airways", iataCode: "EY" }, { name: "EVA Air", iataCode: "BR" }, { name: "Fiji Airways", iataCode: "FJ" }, { name: "Finnair", iataCode: "AY" }, { name: "Flybondi", iataCode: "FO" }, { name: "Flydubai", iataCode: "FZ" }, { name: "FlySafair", iataCode: "FA" }, { name: "Frontier Airlines", iataCode: "F9" }, { name: "Garuda Indonesia", iataCode: "GA" }, { name: "Go First", iataCode: "G8" }, { name: "Gol Linhas Aereas Inteligentes", iataCode: "G3" }, { name: "Hainan Airlines", iataCode: "HU" }, { name: "Hawaiian Airlines", iataCode: "HA" }, { name: "IndiGo Airlines", iataCode: "6E" }, { name: "Japan Airlines", iataCode: "JL" }, { name: "Jeju Air", iataCode: "7C" }, { name: "Jet2", iataCode: "LS" }, { name: "JetBlue Airways", iataCode: "B6" }, { name: "JetSMART", iataCode: "JA" }, { name: "Juneyao Airlines", iataCode: "HO" }, { name: "Kenya Airways", iataCode: "KQ" }, { name: "Korean Air", iataCode: "KE" }, { name: "Kulula.com", iataCode: "MN" }, { name: "LATAM Airlines", iataCode: "LA" }, { name: "Lion Air", iataCode: "JT" }, { name: "LOT Polish Airlines", iataCode: "LO" }, { name: "Lufthansa", iataCode: "LH" }, { name: "Libyan Airlines", iataCode: "LN" }, { name: "Linea Aerea Amaszonas", iataCode: "Z8" }, { name: "Malaysia Airlines", iataCode: "MH" }, { name: "Nordwind Airlines", iataCode: "N4" }, { name: "Norwegian Air Shuttle", iataCode: "DY" }, { name: "Oman Air", iataCode: "WY" }, { name: "Pakistan International Airlines", iataCode: "PK" }, { name: "Pegasus Airlines", iataCode: "PC" }, { name: "Philippine Airlines", iataCode: "PR" }, { name: "Qantas Group", iataCode: "QF" }, { name: "Qatar Airways", iataCode: "QR" }, { name: "Republic Airways", iataCode: "YX" }, { name: "Royal Air Maroc", iataCode: "AT" }, { name: "Ryanair", iataCode: "FR" }, { name: "S7 Airlines", iataCode: "S7" }, { name: "SAS", iataCode: "SK" }, { name: "Satena", iataCode: "9R" }, { name: "Saudia", iataCode: "SV" }, { name: "Shandong Airlines", iataCode: "SC" }, { name: "Sichuan Airlines", iataCode: "3U" }, { name: "Singapore Airlines", iataCode: "SQ" }, { name: "Sky Airline", iataCode: "H2" }, { name: "SkyWest Airlines", iataCode: "OO" }, { name: "South African Airways", iataCode: "SA" }, { name: "Southwest Airlines", iataCode: "WN" }, { name: "SpiceJet", iataCode: "SG" }, { name: "Spirit Airlines", iataCode: "NK" }, { name: "Spring Airlines", iataCode: "9S" }, { name: "SriLankan Airlines", iataCode: "UL" }, { name: "Star Peru", iataCode: "2I" }, { name: "Sun Country Airlines", iataCode: "SY" }, { name: "SunExpress", iataCode: "XQ" }, { name: "TAP Air Portugal", iataCode: "TP" }, { name: "Thai AirAsia", iataCode: "FD" }, { name: "Thai Airways", iataCode: "TG" }, { name: "TUI Airways", iataCode: "BY" }, { name: "Tunisair", iataCode: "TU" }, { name: "Turkish Airlines", iataCode: "TK" }, { name: "Ukraine International", iataCode: "PS" }, { name: "United Airlines", iataCode: "UA" }, { name: "Ural Airlines", iataCode: "U6" }, { name: "VietJet Air", iataCode: "VJ" }, { name: "Vietnam Airlines", iataCode: "VN" }, { name: "Virgin Atlantic Airways", iataCode: "VS" }, { name: "Virgin Australia", iataCode: "VA" }, { name: "VivaAerobus", iataCode: "VB" }, { name: "VOEPASS Linhas Aereas", iataCode: "2Z" }, { name: "Volaris", iataCode: "Y4" }, { name: "WestJet", iataCode: "WS" }, { name: "Wingo", iataCode: "P5" }, { name: "Wizz Air", iataCode: "W6" }];
var i = [{ name: "Aerospatiale/BAC Concorde", iataTypeCode: "SSC" }, { name: "Airbus A300", iataTypeCode: "AB3" }, { name: "Airbus A310", iataTypeCode: "310" }, { name: "Airbus A310-200", iataTypeCode: "312" }, { name: "Airbus A310-300", iataTypeCode: "313" }, { name: "Airbus A318", iataTypeCode: "318" }, { name: "Airbus A319", iataTypeCode: "319" }, { name: "Airbus A319neo", iataTypeCode: "31N" }, { name: "Airbus A320", iataTypeCode: "320" }, { name: "Airbus A320neo", iataTypeCode: "32N" }, { name: "Airbus A321", iataTypeCode: "321" }, { name: "Airbus A321neo", iataTypeCode: "32Q" }, { name: "Airbus A330", iataTypeCode: "330" }, { name: "Airbus A330-200", iataTypeCode: "332" }, { name: "Airbus A330-300", iataTypeCode: "333" }, { name: "Airbus A330-800neo", iataTypeCode: "338" }, { name: "Airbus A330-900neo", iataTypeCode: "339" }, { name: "Airbus A340", iataTypeCode: "340" }, { name: "Airbus A340-200", iataTypeCode: "342" }, { name: "Airbus A340-300", iataTypeCode: "343" }, { name: "Airbus A340-500", iataTypeCode: "345" }, { name: "Airbus A340-600", iataTypeCode: "346" }, { name: "Airbus A350", iataTypeCode: "350" }, { name: "Airbus A350-900", iataTypeCode: "359" }, { name: "Airbus A350-1000", iataTypeCode: "351" }, { name: "Airbus A380", iataTypeCode: "380" }, { name: "Airbus A380-800", iataTypeCode: "388" }, { name: "Antonov An-12", iataTypeCode: "ANF" }, { name: "Antonov An-24", iataTypeCode: "AN4" }, { name: "Antonov An-26", iataTypeCode: "A26" }, { name: "Antonov An-28", iataTypeCode: "A28" }, { name: "Antonov An-30", iataTypeCode: "A30" }, { name: "Antonov An-32", iataTypeCode: "A32" }, { name: "Antonov An-72", iataTypeCode: "AN7" }, { name: "Antonov An-124 Ruslan", iataTypeCode: "A4F" }, { name: "Antonov An-140", iataTypeCode: "A40" }, { name: "Antonov An-148", iataTypeCode: "A81" }, { name: "Antonov An-158", iataTypeCode: "A58" }, { name: "Antonov An-225 Mriya", iataTypeCode: "A5F" }, { name: "Boeing 707", iataTypeCode: "703" }, { name: "Boeing 717", iataTypeCode: "717" }, { name: "Boeing 720B", iataTypeCode: "B72" }, { name: "Boeing 727", iataTypeCode: "727" }, { name: "Boeing 727-100", iataTypeCode: "721" }, { name: "Boeing 727-200", iataTypeCode: "722" }, { name: "Boeing 737 MAX 7", iataTypeCode: "7M7" }, { name: "Boeing 737 MAX 8", iataTypeCode: "7M8" }, { name: "Boeing 737 MAX 9", iataTypeCode: "7M9" }, { name: "Boeing 737 MAX 10", iataTypeCode: "7MJ" }, { name: "Boeing 737", iataTypeCode: "737" }, { name: "Boeing 737-100", iataTypeCode: "731" }, { name: "Boeing 737-200", iataTypeCode: "732" }, { name: "Boeing 737-300", iataTypeCode: "733" }, { name: "Boeing 737-400", iataTypeCode: "734" }, { name: "Boeing 737-500", iataTypeCode: "735" }, { name: "Boeing 737-600", iataTypeCode: "736" }, { name: "Boeing 737-700", iataTypeCode: "73G" }, { name: "Boeing 737-800", iataTypeCode: "738" }, { name: "Boeing 737-900", iataTypeCode: "739" }, { name: "Boeing 747", iataTypeCode: "747" }, { name: "Boeing 747-100", iataTypeCode: "741" }, { name: "Boeing 747-200", iataTypeCode: "742" }, { name: "Boeing 747-300", iataTypeCode: "743" }, { name: "Boeing 747-400", iataTypeCode: "744" }, { name: "Boeing 747-400D", iataTypeCode: "74J" }, { name: "Boeing 747-8", iataTypeCode: "748" }, { name: "Boeing 747SP", iataTypeCode: "74L" }, { name: "Boeing 747SR", iataTypeCode: "74R" }, { name: "Boeing 757", iataTypeCode: "757" }, { name: "Boeing 757-200", iataTypeCode: "752" }, { name: "Boeing 757-300", iataTypeCode: "753" }, { name: "Boeing 767", iataTypeCode: "767" }, { name: "Boeing 767-200", iataTypeCode: "762" }, { name: "Boeing 767-300", iataTypeCode: "763" }, { name: "Boeing 767-400", iataTypeCode: "764" }, { name: "Boeing 777", iataTypeCode: "777" }, { name: "Boeing 777-200", iataTypeCode: "772" }, { name: "Boeing 777-200LR", iataTypeCode: "77L" }, { name: "Boeing 777-300", iataTypeCode: "773" }, { name: "Boeing 777-300ER", iataTypeCode: "77W" }, { name: "Boeing 787", iataTypeCode: "787" }, { name: "Boeing 787-8", iataTypeCode: "788" }, { name: "Boeing 787-9", iataTypeCode: "789" }, { name: "Boeing 787-10", iataTypeCode: "781" }, { name: "Canadair Challenger", iataTypeCode: "CCJ" }, { name: "Canadair CL-44", iataTypeCode: "CL4" }, { name: "Canadair Regional Jet 100", iataTypeCode: "CR1" }, { name: "Canadair Regional Jet 200", iataTypeCode: "CR2" }, { name: "Canadair Regional Jet 700", iataTypeCode: "CR7" }, { name: "Canadair Regional Jet 705", iataTypeCode: "CRA" }, { name: "Canadair Regional Jet 900", iataTypeCode: "CR9" }, { name: "Canadair Regional Jet 1000", iataTypeCode: "CRK" }, { name: "De Havilland Canada DHC-2 Beaver", iataTypeCode: "DHP" }, { name: "De Havilland Canada DHC-2 Turbo-Beaver", iataTypeCode: "DHR" }, { name: "De Havilland Canada DHC-3 Otter", iataTypeCode: "DHL" }, { name: "De Havilland Canada DHC-4 Caribou", iataTypeCode: "DHC" }, { name: "De Havilland Canada DHC-6 Twin Otter", iataTypeCode: "DHT" }, { name: "De Havilland Canada DHC-7 Dash 7", iataTypeCode: "DH7" }, { name: "De Havilland Canada DHC-8-100 Dash 8 / 8Q", iataTypeCode: "DH1" }, { name: "De Havilland Canada DHC-8-200 Dash 8 / 8Q", iataTypeCode: "DH2" }, { name: "De Havilland Canada DHC-8-300 Dash 8 / 8Q", iataTypeCode: "DH3" }, { name: "De Havilland Canada DHC-8-400 Dash 8Q", iataTypeCode: "DH4" }, { name: "De Havilland DH.104 Dove", iataTypeCode: "DHD" }, { name: "De Havilland DH.114 Heron", iataTypeCode: "DHH" }, { name: "Douglas DC-3", iataTypeCode: "D3F" }, { name: "Douglas DC-6", iataTypeCode: "D6F" }, { name: "Douglas DC-8-50", iataTypeCode: "D8T" }, { name: "Douglas DC-8-62", iataTypeCode: "D8L" }, { name: "Douglas DC-8-72", iataTypeCode: "D8Q" }, { name: "Douglas DC-9-10", iataTypeCode: "D91" }, { name: "Douglas DC-9-20", iataTypeCode: "D92" }, { name: "Douglas DC-9-30", iataTypeCode: "D93" }, { name: "Douglas DC-9-40", iataTypeCode: "D94" }, { name: "Douglas DC-9-50", iataTypeCode: "D95" }, { name: "Douglas DC-10", iataTypeCode: "D10" }, { name: "Douglas DC-10-10", iataTypeCode: "D1X" }, { name: "Douglas DC-10-30", iataTypeCode: "D1Y" }, { name: "Embraer 170", iataTypeCode: "E70" }, { name: "Embraer 175", iataTypeCode: "E75" }, { name: "Embraer 190", iataTypeCode: "E90" }, { name: "Embraer 195", iataTypeCode: "E95" }, { name: "Embraer E190-E2", iataTypeCode: "290" }, { name: "Embraer E195-E2", iataTypeCode: "295" }, { name: "Embraer EMB.110 Bandeirante", iataTypeCode: "EMB" }, { name: "Embraer EMB.120 Brasilia", iataTypeCode: "EM2" }, { name: "Embraer Legacy 600", iataTypeCode: "ER3" }, { name: "Embraer Phenom 100", iataTypeCode: "EP1" }, { name: "Embraer Phenom 300", iataTypeCode: "EP3" }, { name: "Embraer RJ135", iataTypeCode: "ER3" }, { name: "Embraer RJ140", iataTypeCode: "ERD" }, { name: "Embraer RJ145 Amazon", iataTypeCode: "ER4" }, { name: "Ilyushin IL18", iataTypeCode: "IL8" }, { name: "Ilyushin IL62", iataTypeCode: "IL6" }, { name: "Ilyushin IL76", iataTypeCode: "IL7" }, { name: "Ilyushin IL86", iataTypeCode: "ILW" }, { name: "Ilyushin IL96-300", iataTypeCode: "I93" }, { name: "Ilyushin IL114", iataTypeCode: "I14" }, { name: "Lockheed L-182 / 282 / 382 (L-100) Hercules", iataTypeCode: "LOH" }, { name: "Lockheed L-188 Electra", iataTypeCode: "LOE" }, { name: "Lockheed L-1011 Tristar", iataTypeCode: "L10" }, { name: "Lockheed L-1049 Super Constellation", iataTypeCode: "L49" }, { name: "McDonnell Douglas MD11", iataTypeCode: "M11" }, { name: "McDonnell Douglas MD80", iataTypeCode: "M80" }, { name: "McDonnell Douglas MD81", iataTypeCode: "M81" }, { name: "McDonnell Douglas MD82", iataTypeCode: "M82" }, { name: "McDonnell Douglas MD83", iataTypeCode: "M83" }, { name: "McDonnell Douglas MD87", iataTypeCode: "M87" }, { name: "McDonnell Douglas MD88", iataTypeCode: "M88" }, { name: "McDonnell Douglas MD90", iataTypeCode: "M90" }, { name: "Sukhoi Superjet 100-95", iataTypeCode: "SU9" }, { name: "Tupolev Tu-134", iataTypeCode: "TU3" }, { name: "Tupolev Tu-154", iataTypeCode: "TU5" }, { name: "Tupolev Tu-204", iataTypeCode: "T20" }, { name: "Yakovlev Yak-40", iataTypeCode: "YK4" }, { name: "Yakovlev Yak-42", iataTypeCode: "YK2" }];
var o = [{ name: "Adelaide International Airport", iataCode: "ADL" }, { name: "Adolfo Suarez Madrid-Barajas Airport", iataCode: "MAD" }, { name: "Aeroparque Jorge Newbery Airport", iataCode: "AEP" }, { name: "Afonso Pena International Airport", iataCode: "CWB" }, { name: "Alfonso Bonilla Aragon International Airport", iataCode: "CLO" }, { name: "Amsterdam Airport Schiphol", iataCode: "AMS" }, { name: "Arturo Merino Benitez International Airport", iataCode: "SCL" }, { name: "Auckland International Airport", iataCode: "AKL" }, { name: "Beijing Capital International Airport", iataCode: "PEK" }, { name: "Belem Val de Cans International Airport", iataCode: "BEL" }, { name: "Belo Horizonte Tancredo Neves International Airport", iataCode: "CNF" }, { name: "Berlin-Tegel Airport", iataCode: "TXL" }, { name: "Bole International Airport", iataCode: "ADD" }, { name: "Brasilia-Presidente Juscelino Kubitschek International Airport", iataCode: "BSB" }, { name: "Brisbane International Airport", iataCode: "BNE" }, { name: "Brussels Airport", iataCode: "BRU" }, { name: "Cairns Airport", iataCode: "CNS" }, { name: "Cairo International Airport", iataCode: "CAI" }, { name: "Canberra Airport", iataCode: "CBR" }, { name: "Capetown International Airport", iataCode: "CPT" }, { name: "Charles de Gaulle International Airport", iataCode: "CDG" }, { name: "Charlotte Douglas International Airport", iataCode: "CLT" }, { name: "Chengdu Shuangliu International Airport", iataCode: "CTU" }, { name: "Chhatrapati Shivaji International Airport", iataCode: "BOM" }, { name: "Chicago O'Hare International Airport", iataCode: "ORD" }, { name: "Chongqing Jiangbei International Airport", iataCode: "CKG" }, { name: "Christchurch International Airport", iataCode: "CHC" }, { name: "Copenhagen Kastrup Airport", iataCode: "CPH" }, { name: "Dallas Fort Worth International Airport", iataCode: "DFW" }, { name: "Daniel K. Inouye International Airport", iataCode: "HNL" }, { name: "Denver International Airport", iataCode: "DEN" }, { name: "Don Mueang International Airport", iataCode: "DMK" }, { name: "Dubai International Airport", iataCode: "DXB" }, { name: "Dublin Airport", iataCode: "DUB" }, { name: "Dusseldorf Airport", iataCode: "DUS" }, { name: "El Dorado International Airport", iataCode: "BOG" }, { name: "Eleftherios Venizelos International Airport", iataCode: "ATH" }, { name: "Faa'a International Airport", iataCode: "PPT" }, { name: "Fort Lauderdale Hollywood International Airport", iataCode: "FLL" }, { name: "Fortaleza Pinto Martins International Airport", iataCode: "FOR" }, { name: "Frankfurt am Main Airport", iataCode: "FRA" }, { name: "George Bush Intercontinental Houston Airport", iataCode: "IAH" }, { name: "Gold Coast Airport", iataCode: "OOL" }, { name: "Guarulhos - Governador Andre Franco Montoro International Airport", iataCode: "GRU" }, { name: "Hartsfield-Jackson Atlanta International Airport", iataCode: "ATL" }, { name: "Helsinki Vantaa Airport", iataCode: "HEL" }, { name: "Hobart International Airport", iataCode: "HBA" }, { name: "Hong Kong International Airport", iataCode: "HKG" }, { name: "Houari Boumediene Airport", iataCode: "ALG" }, { name: "Hurgada International Airport", iataCode: "HRG" }, { name: "Incheon International Airport", iataCode: "ICN" }, { name: "Indira Gandhi International Airport", iataCode: "DEL" }, { name: "Istanbul Airport", iataCode: "IST" }, { name: "Jacksons International Airport", iataCode: "POM" }, { name: "Jeju International Airport", iataCode: "CJU" }, { name: "John F Kennedy International Airport", iataCode: "JFK" }, { name: "Jorge Chavez International Airport", iataCode: "LIM" }, { name: "Jose Maria Cordova International Airport", iataCode: "MDE" }, { name: "Josep Tarradellas Barcelona-El Prat Airport", iataCode: "BCN" }, { name: "Kahului Airport", iataCode: "OGG" }, { name: "King Abdulaziz International Airport", iataCode: "JED" }, { name: "Kuala Lumpur International Airport", iataCode: "KUL" }, { name: "Kunming Changshui International Airport", iataCode: "KMG" }, { name: "La Tontouta International Airport", iataCode: "NOU" }, { name: "Leonardo da Vinci-Fiumicino Airport", iataCode: "FCO" }, { name: "London Heathrow Airport", iataCode: "LHR" }, { name: "Los Angeles International Airport", iataCode: "LAX" }, { name: "McCarran International Airport", iataCode: "LAS" }, { name: "Melbourne International Airport", iataCode: "MEL" }, { name: "Mexico City International Airport", iataCode: "MEX" }, { name: "Miami International Airport", iataCode: "MIA" }, { name: "Ministro Pistarini International Airport", iataCode: "EZE" }, { name: "Minneapolis-St Paul International/Wold-Chamberlain Airport", iataCode: "MSP" }, { name: "Mohammed V International Airport", iataCode: "CMN" }, { name: "Moscow Domodedovo Airport", iataCode: "DME" }, { name: "Munich Airport", iataCode: "MUC" }, { name: "Murtala Muhammed International Airport", iataCode: "LOS" }, { name: "Nadi International Airport", iataCode: "NAN" }, { name: "Nairobi Jomo Kenyatta International Airport", iataCode: "NBO" }, { name: "Narita International Airport", iataCode: "NRT" }, { name: "Newark Liberty International Airport", iataCode: "EWR" }, { name: "Ninoy Aquino International Airport", iataCode: "MNL" }, { name: "Noumea Magenta Airport", iataCode: "GEA" }, { name: "O. R. Tambo International Airport", iataCode: "JNB" }, { name: "Orlando International Airport", iataCode: "MCO" }, { name: "Oslo Lufthavn", iataCode: "OSL" }, { name: "Perth Airport", iataCode: "PER" }, { name: "Phoenix Sky Harbor International Airport", iataCode: "PHX" }, { name: "Recife Guararapes-Gilberto Freyre International Airport", iataCode: "REC" }, { name: "Rio de Janeiro Galeao International Airport", iataCode: "GIG" }, { name: "Salgado Filho International Airport", iataCode: "POA" }, { name: "Salvador Deputado Luis Eduardo Magalhaes International Airport", iataCode: "SSA" }, { name: "San Francisco International Airport", iataCode: "SFO" }, { name: "Santos Dumont Airport", iataCode: "SDU" }, { name: "Sao Paulo-Congonhas Airport", iataCode: "CGH" }, { name: "Seattle Tacoma International Airport", iataCode: "SEA" }, { name: "Shanghai Hongqiao International Airport", iataCode: "SHA" }, { name: "Shanghai Pudong International Airport", iataCode: "PVG" }, { name: "Shenzhen Bao'an International Airport", iataCode: "SZX" }, { name: "Sheremetyevo International Airport", iataCode: "SVO" }, { name: "Singapore Changi Airport", iataCode: "SIN" }, { name: "Soekarno-Hatta International Airport", iataCode: "CGK" }, { name: 'Stockholm-Arlanda Airport"', iataCode: "ARN" }, { name: "Suvarnabhumi Airport", iataCode: "BKK" }, { name: "Sydney Kingsford Smith International Airport", iataCode: "SYD" }, { name: "Taiwan Taoyuan International Airport", iataCode: "TPE" }, { name: "Tan Son Nhat International Airport", iataCode: "SGN" }, { name: "Tokyo Haneda International Airport", iataCode: "HND" }, { name: "Toronto Pearson International Airport", iataCode: "YYZ" }, { name: "Tunis Carthage International Airport", iataCode: "TUN" }, { name: "Vancouver International Airport", iataCode: "YVR" }, { name: "Vienna International Airport", iataCode: "VIE" }, { name: "Viracopos International Airport", iataCode: "VCP" }, { name: "Vnukovo International Airport", iataCode: "VKO" }, { name: "Wellington International Airport", iataCode: "WLG" }, { name: "Xi'an Xianyang International Airport", iataCode: "XIY" }, { name: "Zhukovsky International Airport", iataCode: "ZIA" }, { name: "Zurich Airport", iataCode: "ZRH" }];
var Ha = { airline: r, airplane: i, airport: o };
var n = Ha;
var t = ["Giant panda", "Spectacled bear", "Sun bear", "Sloth bear", "American black bear", "Asian black bear", "Brown bear", "Polar bear"];
var l = ["Red-throated Loon", "Arctic Loon", "Pacific Loon", "Common Loon", "Yellow-billed Loon", "Least Grebe", "Pied-billed Grebe", "Horned Grebe", "Red-necked Grebe", "Eared Grebe", "Western Grebe", "Clark's Grebe", "Yellow-nosed Albatross", "Shy Albatross", "Black-browed Albatross", "Wandering Albatross", "Laysan Albatross", "Black-footed Albatross", "Short-tailed Albatross", "Northern Fulmar", "Herald Petrel", "Murphy's Petrel", "Mottled Petrel", "Black-capped Petrel", "Cook's Petrel", "Stejneger's Petrel", "White-chinned Petrel", "Streaked Shearwater", "Cory's Shearwater", "Pink-footed Shearwater", "Flesh-footed Shearwater", "Greater Shearwater", "Wedge-tailed Shearwater", "Buller's Shearwater", "Sooty Shearwater", "Short-tailed Shearwater", "Manx Shearwater", "Black-vented Shearwater", "Audubon's Shearwater", "Little Shearwater", "Wilson's Storm-Petrel", "White-faced Storm-Petrel", "European Storm-Petrel", "Fork-tailed Storm-Petrel", "Leach's Storm-Petrel", "Ashy Storm-Petrel", "Band-rumped Storm-Petrel", "Wedge-rumped Storm-Petrel", "Black Storm-Petrel", "Least Storm-Petrel", "White-tailed Tropicbird", "Red-billed Tropicbird", "Red-tailed Tropicbird", "Masked Booby", "Blue-footed Booby", "Brown Booby", "Red-footed Booby", "Northern Gannet", "American White Pelican", "Brown Pelican", "Brandt's Cormorant", "Neotropic Cormorant", "Double-crested Cormorant", "Great Cormorant", "Red-faced Cormorant", "Pelagic Cormorant", "Anhinga", "Magnificent Frigatebird", "Great Frigatebird", "Lesser Frigatebird", "American Bittern", "Yellow Bittern", "Least Bittern", "Great Blue Heron", "Great Egret", "Chinese Egret", "Little Egret", "Western Reef-Heron", "Snowy Egret", "Little Blue Heron", "Tricolored Heron", "Reddish Egret", "Cattle Egret", "Green Heron", "Black-crowned Night-Heron", "Yellow-crowned Night-Heron", "White Ibis", "Scarlet Ibis", "Glossy Ibis", "White-faced Ibis", "Roseate Spoonbill", "Jabiru", "Wood Stork", "Black Vulture", "Turkey Vulture", "California Condor", "Greater Flamingo", "Black-bellied Whistling-Duck", "Fulvous Whistling-Duck", "Bean Goose", "Pink-footed Goose", "Greater White-fronted Goose", "Lesser White-fronted Goose", "Emperor Goose", "Snow Goose", "Ross's Goose", "Canada Goose", "Brant", "Barnacle Goose", "Mute Swan", "Trumpeter Swan", "Tundra Swan", "Whooper Swan", "Muscovy Duck", "Wood Duck", "Gadwall", "Falcated Duck", "Eurasian Wigeon", "American Wigeon", "American Black Duck", "Mallard", "Mottled Duck", "Spot-billed Duck", "Blue-winged Teal", "Cinnamon Teal", "Northern Shoveler", "White-cheeked Pintail", "Northern Pintail", "Garganey", "Baikal Teal", "Green-winged Teal", "Canvasback", "Redhead", "Common Pochard", "Ring-necked Duck", "Tufted Duck", "Greater Scaup", "Lesser Scaup", "Steller's Eider", "Spectacled Eider", "King Eider", "Common Eider", "Harlequin Duck", "Labrador Duck", "Surf Scoter", "White-winged Scoter", "Black Scoter", "Oldsquaw", "Bufflehead", "Common Goldeneye", "Barrow's Goldeneye", "Smew", "Hooded Merganser", "Common Merganser", "Red-breasted Merganser", "Masked Duck", "Ruddy Duck", "Osprey", "Hook-billed Kite", "Swallow-tailed Kite", "White-tailed Kite", "Snail Kite", "Mississippi Kite", "Bald Eagle", "White-tailed Eagle", "Steller's Sea-Eagle", "Northern Harrier", "Sharp-shinned Hawk", "Cooper's Hawk", "Northern Goshawk", "Crane Hawk", "Gray Hawk", "Common Black-Hawk", "Harris's Hawk", "Roadside Hawk", "Red-shouldered Hawk", "Broad-winged Hawk", "Short-tailed Hawk", "Swainson's Hawk", "White-tailed Hawk", "Zone-tailed Hawk", "Red-tailed Hawk", "Ferruginous Hawk", "Rough-legged Hawk", "Golden Eagle", "Collared Forest-Falcon", "Crested Caracara", "Eurasian Kestrel", "American Kestrel", "Merlin", "Eurasian Hobby", "Aplomado Falcon", "Gyrfalcon", "Peregrine Falcon", "Prairie Falcon", "Plain Chachalaca", "Chukar", "Himalayan Snowcock", "Gray Partridge", "Ring-necked Pheasant", "Ruffed Grouse", "Sage Grouse", "Spruce Grouse", "Willow Ptarmigan", "Rock Ptarmigan", "White-tailed Ptarmigan", "Blue Grouse", "Sharp-tailed Grouse", "Greater Prairie-chicken", "Lesser Prairie-chicken", "Wild Turkey", "Mountain Quail", "Scaled Quail", "California Quail", "Gambel's Quail", "Northern Bobwhite", "Montezuma Quail", "Yellow Rail", "Black Rail", "Corn Crake", "Clapper Rail", "King Rail", "Virginia Rail", "Sora", "Paint-billed Crake", "Spotted Rail", "Purple Gallinule", "Azure Gallinule", "Common Moorhen", "Eurasian Coot", "American Coot", "Limpkin", "Sandhill Crane", "Common Crane", "Whooping Crane", "Double-striped Thick-knee", "Northern Lapwing", "Black-bellied Plover", "European Golden-Plover", "American Golden-Plover", "Pacific Golden-Plover", "Mongolian Plover", "Collared Plover", "Snowy Plover", "Wilson's Plover", "Common Ringed Plover", "Semipalmated Plover", "Piping Plover", "Little Ringed Plover", "Killdeer", "Mountain Plover", "Eurasian Dotterel", "Eurasian Oystercatcher", "American Oystercatcher", "Black Oystercatcher", "Black-winged Stilt", "Black-necked Stilt", "American Avocet", "Northern Jacana", "Common Greenshank", "Greater Yellowlegs", "Lesser Yellowlegs", "Marsh Sandpiper", "Spotted Redshank", "Wood Sandpiper", "Green Sandpiper", "Solitary Sandpiper", "Willet", "Wandering Tattler", "Gray-tailed Tattler", "Common Sandpiper", "Spotted Sandpiper", "Terek Sandpiper", "Upland Sandpiper", "Little Curlew", "Eskimo Curlew", "Whimbrel", "Bristle-thighed Curlew", "Far Eastern Curlew", "Slender-billed Curlew", "Eurasian Curlew", "Long-billed Curlew", "Black-tailed Godwit", "Hudsonian Godwit", "Bar-tailed Godwit", "Marbled Godwit", "Ruddy Turnstone", "Black Turnstone", "Surfbird", "Great Knot", "Red Knot", "Sanderling", "Semipalmated Sandpiper", "Western Sandpiper", "Red-necked Stint", "Little Stint", "Temminck's Stint", "Long-toed Stint", "Least Sandpiper", "White-rumped Sandpiper", "Baird's Sandpiper", "Pectoral Sandpiper", "Sharp-tailed Sandpiper", "Purple Sandpiper", "Rock Sandpiper", "Dunlin", "Curlew Sandpiper", "Stilt Sandpiper", "Spoonbill Sandpiper", "Broad-billed Sandpiper", "Buff-breasted Sandpiper", "Ruff", "Short-billed Dowitcher", "Long-billed Dowitcher", "Jack Snipe", "Common Snipe", "Pin-tailed Snipe", "Eurasian Woodcock", "American Woodcock", "Wilson's Phalarope", "Red-necked Phalarope", "Red Phalarope", "Oriental Pratincole", "Great Skua", "South Polar Skua", "Pomarine Jaeger", "Parasitic Jaeger", "Long-tailed Jaeger", "Laughing Gull", "Franklin's Gull", "Little Gull", "Black-headed Gull", "Bonaparte's Gull", "Heermann's Gull", "Band-tailed Gull", "Black-tailed Gull", "Mew Gull", "Ring-billed Gull", "California Gull", "Herring Gull", "Yellow-legged Gull", "Thayer's Gull", "Iceland Gull", "Lesser Black-backed Gull", "Slaty-backed Gull", "Yellow-footed Gull", "Western Gull", "Glaucous-winged Gull", "Glaucous Gull", "Great Black-backed Gull", "Sabine's Gull", "Black-legged Kittiwake", "Red-legged Kittiwake", "Ross's Gull", "Ivory Gull", "Gull-billed Tern", "Caspian Tern", "Royal Tern", "Elegant Tern", "Sandwich Tern", "Roseate Tern", "Common Tern", "Arctic Tern", "Forster's Tern", "Least Tern", "Aleutian Tern", "Bridled Tern", "Sooty Tern", "Large-billed Tern", "White-winged Tern", "Whiskered Tern", "Black Tern", "Brown Noddy", "Black Noddy", "Black Skimmer", "Dovekie", "Common Murre", "Thick-billed Murre", "Razorbill", "Great Auk", "Black Guillemot", "Pigeon Guillemot", "Long-billed Murrelet", "Marbled Murrelet", "Kittlitz's Murrelet", "Xantus's Murrelet", "Craveri's Murrelet", "Ancient Murrelet", "Cassin's Auklet", "Parakeet Auklet", "Least Auklet", "Whiskered Auklet", "Crested Auklet", "Rhinoceros Auklet", "Atlantic Puffin", "Horned Puffin", "Tufted Puffin", "Rock Dove", "Scaly-naped Pigeon", "White-crowned Pigeon", "Red-billed Pigeon", "Band-tailed Pigeon", "Oriental Turtle-Dove", "European Turtle-Dove", "Eurasian Collared-Dove", "Spotted Dove", "White-winged Dove", "Zenaida Dove", "Mourning Dove", "Passenger Pigeon", "Inca Dove", "Common Ground-Dove", "Ruddy Ground-Dove", "White-tipped Dove", "Key West Quail-Dove", "Ruddy Quail-Dove", "Budgerigar", "Monk Parakeet", "Carolina Parakeet", "Thick-billed Parrot", "White-winged Parakeet", "Red-crowned Parrot", "Common Cuckoo", "Oriental Cuckoo", "Black-billed Cuckoo", "Yellow-billed Cuckoo", "Mangrove Cuckoo", "Greater Roadrunner", "Smooth-billed Ani", "Groove-billed Ani", "Barn Owl", "Flammulated Owl", "Oriental Scops-Owl", "Western Screech-Owl", "Eastern Screech-Owl", "Whiskered Screech-Owl", "Great Horned Owl", "Snowy Owl", "Northern Hawk Owl", "Northern Pygmy-Owl", "Ferruginous Pygmy-Owl", "Elf Owl", "Burrowing Owl", "Mottled Owl", "Spotted Owl", "Barred Owl", "Great Gray Owl", "Long-eared Owl", "Short-eared Owl", "Boreal Owl", "Northern Saw-whet Owl", "Lesser Nighthawk", "Common Nighthawk", "Antillean Nighthawk", "Common Pauraque", "Common Poorwill", "Chuck-will's-widow", "Buff-collared Nightjar", "Whip-poor-will", "Jungle Nightjar", "Black Swift", "White-collared Swift", "Chimney Swift", "Vaux's Swift", "White-throated Needletail", "Common Swift", "Fork-tailed Swift", "White-throated Swift", "Antillean Palm Swift", "Green Violet-ear", "Green-breasted Mango", "Broad-billed Hummingbird", "White-eared Hummingbird", "Xantus's Hummingbird", "Berylline Hummingbird", "Buff-bellied Hummingbird", "Cinnamon Hummingbird", "Violet-crowned Hummingbird", "Blue-throated Hummingbird", "Magnificent Hummingbird", "Plain-capped Starthroat", "Bahama Woodstar", "Lucifer Hummingbird", "Ruby-throated Hummingbird", "Black-chinned Hummingbird", "Anna's Hummingbird", "Costa's Hummingbird", "Calliope Hummingbird", "Bumblebee Hummingbird", "Broad-tailed Hummingbird", "Rufous Hummingbird", "Allen's Hummingbird", "Elegant Trogon", "Eared Trogon", "Hoopoe", "Ringed Kingfisher", "Belted Kingfisher", "Green Kingfisher", "Eurasian Wryneck", "Lewis's Woodpecker", "Red-headed Woodpecker", "Acorn Woodpecker", "Gila Woodpecker", "Golden-fronted Woodpecker", "Red-bellied Woodpecker", "Williamson's Sapsucker", "Yellow-bellied Sapsucker", "Red-naped Sapsucker", "Red-breasted Sapsucker", "Great Spotted Woodpecker", "Ladder-backed Woodpecker", "Nuttall's Woodpecker", "Downy Woodpecker", "Hairy Woodpecker", "Strickland's Woodpecker", "Red-cockaded Woodpecker", "White-headed Woodpecker", "Three-toed Woodpecker", "Black-backed Woodpecker", "Northern Flicker", "Gilded Flicker", "Pileated Woodpecker", "Ivory-billed Woodpecker", "Northern Beardless-Tyrannulet", "Greenish Elaenia", "Caribbean Elaenia", "Tufted Flycatcher", "Olive-sided Flycatcher", "Greater Pewee", "Western Wood-Pewee", "Eastern Wood-Pewee", "Yellow-bellied Flycatcher", "Acadian Flycatcher", "Alder Flycatcher", "Willow Flycatcher", "Least Flycatcher", "Hammond's Flycatcher", "Dusky Flycatcher", "Gray Flycatcher", "Pacific-slope Flycatcher", "Cordilleran Flycatcher", "Buff-breasted Flycatcher", "Black Phoebe", "Eastern Phoebe", "Say's Phoebe", "Vermilion Flycatcher", "Dusky-capped Flycatcher", "Ash-throated Flycatcher", "Nutting's Flycatcher", "Great Crested Flycatcher", "Brown-crested Flycatcher", "La Sagra's Flycatcher", "Great Kiskadee", "Sulphur-bellied Flycatcher", "Variegated Flycatcher", "Tropical Kingbird", "Couch's Kingbird", "Cassin's Kingbird", "Thick-billed Kingbird", "Western Kingbird", "Eastern Kingbird", "Gray Kingbird", "Loggerhead Kingbird", "Scissor-tailed Flycatcher", "Fork-tailed Flycatcher", "Rose-throated Becard", "Masked Tityra", "Brown Shrike", "Loggerhead Shrike", "Northern Shrike", "White-eyed Vireo", "Thick-billed Vireo", "Bell's Vireo", "Black-capped Vireo", "Gray Vireo", "Yellow-throated Vireo", "Plumbeous Vireo", "Cassin's Vireo", "Blue-headed Vireo", "Hutton's Vireo", "Warbling Vireo", "Philadelphia Vireo", "Red-eyed Vireo", "Yellow-green Vireo", "Black-whiskered Vireo", "Yucatan Vireo", "Gray Jay", "Steller's Jay", "Blue Jay", "Green Jay", "Brown Jay", "Florida Scrub-Jay", "Island Scrub-Jay", "Western Scrub-Jay", "Mexican Jay", "Pinyon Jay", "Clark's Nutcracker", "Black-billed Magpie", "Yellow-billed Magpie", "Eurasian Jackdaw", "American Crow", "Northwestern Crow", "Tamaulipas Crow", "Fish Crow", "Chihuahuan Raven", "Common Raven", "Sky Lark", "Horned Lark", "Purple Martin", "Cuban Martin", "Gray-breasted Martin", "Southern Martin", "Brown-chested Martin", "Tree Swallow", "Violet-green Swallow", "Bahama Swallow", "Northern Rough-winged Swallow", "Bank Swallow", "Cliff Swallow", "Cave Swallow", "Barn Swallow", "Common House-Martin", "Carolina Chickadee", "Black-capped Chickadee", "Mountain Chickadee", "Mexican Chickadee", "Chestnut-backed Chickadee", "Boreal Chickadee", "Gray-headed Chickadee", "Bridled Titmouse", "Oak Titmouse", "Juniper Titmouse", "Tufted Titmouse", "Verdin", "Bushtit", "Red-breasted Nuthatch", "White-breasted Nuthatch", "Pygmy Nuthatch", "Brown-headed Nuthatch", "Brown Creeper", "Cactus Wren", "Rock Wren", "Canyon Wren", "Carolina Wren", "Bewick's Wren", "House Wren", "Winter Wren", "Sedge Wren", "Marsh Wren", "American Dipper", "Red-whiskered Bulbul", "Golden-crowned Kinglet", "Ruby-crowned Kinglet", "Middendorff's Grasshopper-Warbler", "Lanceolated Warbler", "Wood Warbler", "Dusky Warbler", "Arctic Warbler", "Blue-gray Gnatcatcher", "California Gnatcatcher", "Black-tailed Gnatcatcher", "Black-capped Gnatcatcher", "Narcissus Flycatcher", "Mugimaki Flycatcher", "Red-breasted Flycatcher", "Siberian Flycatcher", "Gray-spotted Flycatcher", "Asian Brown Flycatcher", "Siberian Rubythroat", "Bluethroat", "Siberian Blue Robin", "Red-flanked Bluetail", "Northern Wheatear", "Stonechat", "Eastern Bluebird", "Western Bluebird", "Mountain Bluebird", "Townsend's Solitaire", "Veery", "Gray-cheeked Thrush", "Bicknell's Thrush", "Swainson's Thrush", "Hermit Thrush", "Wood Thrush", "Eurasian Blackbird", "Eyebrowed Thrush", "Dusky Thrush", "Fieldfare", "Redwing", "Clay-colored Robin", "White-throated Robin", "Rufous-backed Robin", "American Robin", "Varied Thrush", "Aztec Thrush", "Wrentit", "Gray Catbird", "Black Catbird", "Northern Mockingbird", "Bahama Mockingbird", "Sage Thrasher", "Brown Thrasher", "Long-billed Thrasher", "Bendire's Thrasher", "Curve-billed Thrasher", "California Thrasher", "Crissal Thrasher", "Le Conte's Thrasher", "Blue Mockingbird", "European Starling", "Crested Myna", "Siberian Accentor", "Yellow Wagtail", "Citrine Wagtail", "Gray Wagtail", "White Wagtail", "Black-backed Wagtail", "Tree Pipit", "Olive-backed Pipit", "Pechora Pipit", "Red-throated Pipit", "American Pipit", "Sprague's Pipit", "Bohemian Waxwing", "Cedar Waxwing", "Gray Silky-flycatcher", "Phainopepla", "Olive Warbler", "Bachman's Warbler", "Blue-winged Warbler", "Golden-winged Warbler", "Tennessee Warbler", "Orange-crowned Warbler", "Nashville Warbler", "Virginia's Warbler", "Colima Warbler", "Lucy's Warbler", "Crescent-chested Warbler", "Northern Parula", "Tropical Parula", "Yellow Warbler", "Chestnut-sided Warbler", "Magnolia Warbler", "Cape May Warbler", "Black-throated Blue Warbler", "Yellow-rumped Warbler", "Black-throated Gray Warbler", "Golden-cheeked Warbler", "Black-throated Green Warbler", "Townsend's Warbler", "Hermit Warbler", "Blackburnian Warbler", "Yellow-throated Warbler", "Grace's Warbler", "Pine Warbler", "Kirtland's Warbler", "Prairie Warbler", "Palm Warbler", "Bay-breasted Warbler", "Blackpoll Warbler", "Cerulean Warbler", "Black-and-white Warbler", "American Redstart", "Prothonotary Warbler", "Worm-eating Warbler", "Swainson's Warbler", "Ovenbird", "Northern Waterthrush", "Louisiana Waterthrush", "Kentucky Warbler", "Connecticut Warbler", "Mourning Warbler", "MacGillivray's Warbler", "Common Yellowthroat", "Gray-crowned Yellowthroat", "Hooded Warbler", "Wilson's Warbler", "Canada Warbler", "Red-faced Warbler", "Painted Redstart", "Slate-throated Redstart", "Fan-tailed Warbler", "Golden-crowned Warbler", "Rufous-capped Warbler", "Yellow-breasted Chat", "Bananaquit", "Hepatic Tanager", "Summer Tanager", "Scarlet Tanager", "Western Tanager", "Flame-colored Tanager", "Stripe-headed Tanager", "White-collared Seedeater", "Yellow-faced Grassquit", "Black-faced Grassquit", "Olive Sparrow", "Green-tailed Towhee", "Spotted Towhee", "Eastern Towhee", "Canyon Towhee", "California Towhee", "Abert's Towhee", "Rufous-winged Sparrow", "Cassin's Sparrow", "Bachman's Sparrow", "Botteri's Sparrow", "Rufous-crowned Sparrow", "Five-striped Sparrow", "American Tree Sparrow", "Chipping Sparrow", "Clay-colored Sparrow", "Brewer's Sparrow", "Field Sparrow", "Worthen's Sparrow", "Black-chinned Sparrow", "Vesper Sparrow", "Lark Sparrow", "Black-throated Sparrow", "Sage Sparrow", "Lark Bunting", "Savannah Sparrow", "Grasshopper Sparrow", "Baird's Sparrow", "Henslow's Sparrow", "Le Conte's Sparrow", "Nelson's Sharp-tailed Sparrow", "Saltmarsh Sharp-tailed Sparrow", "Seaside Sparrow", "Fox Sparrow", "Song Sparrow", "Lincoln's Sparrow", "Swamp Sparrow", "White-throated Sparrow", "Harris's Sparrow", "White-crowned Sparrow", "Golden-crowned Sparrow", "Dark-eyed Junco", "Yellow-eyed Junco", "McCown's Longspur", "Lapland Longspur", "Smith's Longspur", "Chestnut-collared Longspur", "Pine Bunting", "Little Bunting", "Rustic Bunting", "Yellow-breasted Bunting", "Gray Bunting", "Pallas's Bunting", "Reed Bunting", "Snow Bunting", "McKay's Bunting", "Crimson-collared Grosbeak", "Northern Cardinal", "Pyrrhuloxia", "Yellow Grosbeak", "Rose-breasted Grosbeak", "Black-headed Grosbeak", "Blue Bunting", "Blue Grosbeak", "Lazuli Bunting", "Indigo Bunting", "Varied Bunting", "Painted Bunting", "Dickcissel", "Bobolink", "Red-winged Blackbird", "Tricolored Blackbird", "Tawny-shouldered Blackbird", "Eastern Meadowlark", "Western Meadowlark", "Yellow-headed Blackbird", "Rusty Blackbird", "Brewer's Blackbird", "Common Grackle", "Boat-tailed Grackle", "Great-tailed Grackle", "Shiny Cowbird", "Bronzed Cowbird", "Brown-headed Cowbird", "Black-vented Oriole", "Orchard Oriole", "Hooded Oriole", "Streak-backed Oriole", "Spot-breasted Oriole", "Altamira Oriole", "Audubon's Oriole", "Baltimore Oriole", "Bullock's Oriole", "Scott's Oriole", "Common Chaffinch", "Brambling", "Gray-crowned Rosy-Finch", "Black Rosy-Finch", "Brown-capped Rosy-Finch", "Pine Grosbeak", "Common Rosefinch", "Purple Finch", "Cassin's Finch", "House Finch", "Red Crossbill", "White-winged Crossbill", "Common Redpoll", "Hoary Redpoll", "Eurasian Siskin", "Pine Siskin", "Lesser Goldfinch", "Lawrence's Goldfinch", "American Goldfinch", "Oriental Greenfinch", "Eurasian Bullfinch", "Evening Grosbeak", "Hawfinch", "House Sparrow", "Eurasian Tree Sparrow"];
var s = ["Abyssinian", "American Bobtail", "American Curl", "American Shorthair", "American Wirehair", "Balinese", "Bengal", "Birman", "Bombay", "British Shorthair", "Burmese", "Chartreux", "Chausie", "Cornish Rex", "Devon Rex", "Donskoy", "Egyptian Mau", "Exotic Shorthair", "Havana", "Highlander", "Himalayan", "Japanese Bobtail", "Korat", "Kurilian Bobtail", "LaPerm", "Maine Coon", "Manx", "Minskin", "Munchkin", "Nebelung", "Norwegian Forest Cat", "Ocicat", "Ojos Azules", "Oriental", "Persian", "Peterbald", "Pixiebob", "Ragdoll", "Russian Blue", "Savannah", "Scottish Fold", "Selkirk Rex", "Serengeti", "Siberian", "Siamese", "Singapura", "Snowshoe", "Sokoke", "Somali", "Sphynx", "Thai", "Tonkinese", "Toyger", "Turkish Angora", "Turkish Van"];
var d = ["Blue Whale", "Fin Whale", "Sei Whale", "Sperm Whale", "Bryde’s whale", "Omura’s whale", "Humpback whale", "Long-Beaked Common Dolphin", "Short-Beaked Common Dolphin", "Bottlenose Dolphin", "Indo-Pacific Bottlenose Dolphin", "Northern Rightwhale Dolphin", "Southern Rightwhale Dolphin", "Tucuxi", "Costero", "Indo-Pacific Hump-backed Dolphin", "Chinese White Dolphin", "Atlantic Humpbacked Dolphin", "Atlantic Spotted Dolphin", "Clymene Dolphin", "Pantropical Spotted Dolphin", "Spinner Dolphin", "Striped Dolphin", "Rough-Toothed Dolphin", "Chilean Dolphin", "Commerson’s Dolphin", "Heaviside’s Dolphin", "Hector’s Dolphin", "Risso’s Dolphin", "Fraser’s Dolphin", "Atlantic White-Sided Dolphin", "Dusky Dolphin", "Hourglass Dolphin", "Pacific White-Sided Dolphin", "Peale’s Dolphin", "White-Beaked Dolphin", "Australian Snubfin Dolphin", "Irrawaddy Dolphin", "Melon-headed Whale", "Killer Whale (Orca)", "Pygmy Killer Whale", "False Killer Whale", "Long-finned Pilot Whale", "Short-finned Pilot Whale", "Guiana Dolphin", "Burrunan Dolphin", "Australian humpback Dolphin", "Amazon River Dolphin", "Chinese River Dolphin", "Ganges River Dolphin", "La Plata Dolphin", "Southern Bottlenose Whale", "Longman's Beaked Whale", "Arnoux's Beaked Whale"];
var c = ["Aberdeen Angus", "Abergele", "Abigar", "Abondance", "Abyssinian Shorthorned Zebu", "Aceh", "Achham", "Adamawa", "Adaptaur", "Afar", "Africangus", "Afrikaner", "Agerolese", "Alambadi", "Alatau", "Albanian", "Albera", "Alderney", "Alentejana", "Aleutian wild cattle", "Aliad Dinka", "Alistana-Sanabresa", "Allmogekor", "Alur", "American", "American Angus", "American Beef Friesian", "American Brown Swiss", "American Milking Devon", "American White Park", "Amerifax", "Amrit Mahal", "Amsterdam Island cattle", "Anatolian Black", "Andalusian Black", "Andalusian Blond", "Andalusian Grey", "Angeln", "Angoni", "Ankina", "Ankole", "Ankole-Watusi", "Aracena", "Arado", "Argentine Criollo", "Argentine Friesian", "Armorican", "Arouquesa", "Arsi", "Asturian Mountain", "Asturian Valley", "Aubrac", "Aulie-Ata", "Aure et Saint-Girons", "Australian Braford", "Australian Brangus", "Australian Charbray", "Australian Friesian Sahiwal", "Australian Lowline", "Australian Milking Zebu", "Australian Shorthorn", "Austrian Simmental", "Austrian Yellow", "Avétonou", "Avileña-Negra Ibérica", "Aweil Dinka", "Ayrshire", "Azaouak", "Azebuado", "Azerbaijan Zebu", "Azores", "Bedit", "Breed", "Bachaur cattle", "Baherie cattle", "Bakosi cattle", "Balancer", "Baoule", "Bargur cattle", "Barrosã", "Barzona", "Bazadaise", "Beef Freisian", "Beefalo", "Beefmaker", "Beefmaster", "Begayt", "Belgian Blue", "Belgian Red", "Belgian Red Pied", "Belgian White-and-Red", "Belmont Red", "Belted Galloway", "Bernese", "Berrenda cattle", "Betizu", "Bianca Modenese", "Blaarkop", "Black Angus", "Black Baldy", "Black Hereford", "Blanca Cacereña", "Blanco Orejinegro BON", "Blonde d'Aquitaine", "Blue Albion", "Blue Grey", "Bohuskulla", "Bonsmara", "Boran", "Boškarin", "Braford", "Brahman", "Brahmousin", "Brangus", "Braunvieh", "Brava", "British White", "British Friesian", "Brown Carpathian", "Brown Caucasian", "Brown Swiss", "Bue Lingo", "Burlina", "Buša cattle", "Butana cattle", "Bushuyev", "Cedit", "Cachena", "Caldelana", "Camargue", "Campbell Island cattle", "Canadian Speckle Park", "Canadienne", "Canaria", "Canchim", "Caracu", "Cárdena Andaluza", "Carinthian Blondvieh", "Carora", "Charbray", "Charolais", "Chateaubriand", "Chiangus", "Chianina", "Chillingham cattle", "Chinese Black Pied", "Cholistani", "Coloursided White Back", "Commercial", "Corriente", "Corsican cattle", "Costeño con Cuernos", "Crioulo Lageano", "Dedit", "Dajal", "Dangi cattle", "Danish Black-Pied", "Danish Jersey", "Danish Red", "Deep Red cattle", "Deoni", "Devon", "Dexter cattle", "Dhanni", "Doayo cattle", "Doela", "Drakensberger", "Dølafe", "Droughtmaster", "Dulong'", "Dutch Belted", "Dutch Friesian", "Dwarf Lulu", "Eedit", "East Anatolian Red", "Eastern Finncattle", "Eastern Red Polled", "Enderby Island cattle", "English Longhorn", "Ennstaler Bergscheck", "Estonian Holstein", "Estonian Native", "Estonian Red cattle", "Évolène cattle", "Fedit", "Fēng Cattle", "Finnish Ayrshire", "Finncattle", "Finnish Holstein-Friesian", "Fjäll", "Fleckvieh", "Florida Cracker cattle", "Fogera", "French Simmental", "Fribourgeoise", "Friesian Red and White", "Fulani Sudanese", "Gedit", "Galician Blond", "Galloway cattle", "Gangatiri", "Gaolao", "Garvonesa", "Gascon cattle", "Gelbvieh", "Georgian Mountain cattle", "German Angus", "German Black Pied cattle", "German Black Pied Dairy", "German Red Pied", "Gir", "Glan cattle", "Gloucester", "Gobra", "Greek Shorthorn", "Greek Steppe", "Greyman cattle", "Gudali", "Guernsey cattle", "Guzerá", "Hedit", "Hallikar4", "Hanwoo", "Hariana cattle", "Hartón del Valle", "Harzer Rotvieh", "Hays Converter", "Heck cattle", "Hereford", "Herens", "Hybridmaster", "Highland cattle", "Hinterwald", "Holando-Argentino", "Holstein Friesian cattle", "Horro", "Huáng Cattle", "Hungarian Grey", "Iedit", "Iberian cattle", "Icelandic", "Illawarra cattle", "Improved Red and White", "Indo-Brazilian", "Irish Moiled", "Israeli Holstein", "Israeli Red", "Istoben cattle", "Istrian cattle", "Jedit", "Jamaica Black", "Jamaica Hope", "Jamaica Red", "Japanese Brown", "Jarmelista", "Javari cattle", "Jersey cattle", "Jutland cattle", "Kedit", "Kabin Buri cattle", "Kalmyk cattle", "Kangayam", "Kankrej", "Kamphaeng Saen cattle", "Karan Swiss", "Kasaragod Dwarf cattle", "Kathiawadi", "Kazakh Whiteheaded", "Kenana cattle", "Kenkatha cattle", "Kerry cattle", "Kherigarh", "Khillari cattle", "Kholomogory", "Korat Wagyu", "Kostroma cattle", "Krishna Valley cattle", "Kuri", "Kurgan cattle", "Ledit", "La Reina cattle", "Lakenvelder cattle", "Lampurger", "Latvian Blue", "Latvian Brown", "Latvian Danish Red", "Lebedyn", "Levantina", "Limia cattle", "Limousin", "Limpurger", "Lincoln Red", "Lineback", "Lithuanian Black-and-White", "Lithuanian Light Grey", "Lithuanian Red", "Lithuanian White-Backed", "Lohani cattle", "Lourdais", "Lucerna cattle", "Luing", "Medit", "Madagascar Zebu", "Madura", "Maine-Anjou", "Malnad Gidda", "Malvi", "Mandalong Special", "Mantequera Leonesa", "Maramureş Brown", "Marchigiana", "Maremmana", "Marinhoa", "Maronesa", "Masai", "Mashona", "Menorquina", "Mertolenga", "Meuse-Rhine-Issel", "Mewati", "Milking Shorthorn", "Minhota", "Mirandesa", "Mirkadim", "Mocăniţă", "Mollie", "Monchina", "Mongolian", "Montbéliarde", "Morucha", "Muturu", "Murboden", "Murnau-Werdenfels", "Murray Grey", "Nedit", "Nagori", "N'Dama", "Negra Andaluza", "Nelore", "Nguni", "Nimari", "Normande", "North Bengal Grey", "Northern Finncattle", "Northern Shorthorn", "Norwegian Red", "Oedit]", "Ongole", "Original Simmental", "Pedit", "Pajuna", "Palmera", "Pantaneiro", "Parda Alpina", "Parthenaise", "Pasiega", "Pembroke", "Philippine Native", "Pie Rouge des Plaines", "Piedmontese cattle", "Pineywoods", "Pinzgauer", "Pirenaica", "Podolac", "Podolica", "Polish Black-and-White", "Polish Red", "Polled Hereford", "Poll Shorthorn", "Polled Shorthorn", "Ponwar", "Preta", "Punganur", "Pulikulam", "Pustertaler Sprinzen", "Qedit", "Qinchaun", "Queensland Miniature Boran", "Redit", "Ramo Grande", "Randall", "Raramuri Criollo", "Rathi", "Rätisches Grauvieh", "Raya", "Red Angus", "Red Brangus", "Red Chittagong", "Red Fulani", "Red Gorbatov", "Red Holstein", "Red Kandhari", "Red Mingrelian", "Red Poll", "Red Polled Østland", "Red Sindhi", "Retinta", "Riggit Galloway", "Ringamåla", "Rohjan", "Romagnola", "Romanian Bălţata", "Romanian Steppe Gray", "Romosinuano", "Russian Black Pied", "RX3", "Sedit", "Sahiwal", "Salers", "Salorn", "Sanga", "Sanhe", "Santa Cruz", "Santa Gertrudis", "Sayaguesa", "Schwyz", "Selembu", "Senepol", "Serbian Pied", "Serbian Steppe", "Sheko", "Shetland", "Shorthorn", "Siboney de Cuba", "Simbrah", "Simford", "Simmental", "Siri", "South Devon", "Spanish Fighting Bull", "Speckle Park", "Square Meater", "Sussex", "Swedish Friesian", "Swedish Polled", "Swedish Red Pied", "Swedish Red Polled", "Swedish Red-and-White", "Tedit", "Tabapuã", "Tarentaise", "Tasmanian Grey", "Tauros", "Telemark", "Texas Longhorn", "Texon", "Thai Black", "Thai Fighting Bull", "Thai Friesian", "Thai Milking Zebu", "Tharparkar", "Tswana", "Tudanca", "Tuli", "Tulim", "Turkish Grey Steppe", "Tux-Zillertal", "Tyrol Grey", "Uedit", "Umblachery", "Ukrainian Grey", "Vedit", "Valdostana Castana", "Valdostana Pezzata Nera", "Valdostana Pezzata Rossa", "Väneko", "Vaynol", "Vechur8", "Vestland Fjord", "Vestland Red Polled", "Vianesa", "Volinian Beef", "Vorderwald", "Vosgienne", "Wedit", "Wagyu", "Waguli", "Wangus", "Welsh Black", "Western Finncattle", "White Cáceres", "White Fulani", "White Lamphun", "White Park", "Whitebred Shorthorn", "Xedit", "Xingjiang Brown", "Yedit", "Yakutian", "Yanbian", "Yanhuang", "Yurino", "Zedit", "Żubroń", "Zebu"];
var u = ["Alligator mississippiensis", "Chinese Alligator", "Black Caiman", "Broad-snouted Caiman", "Spectacled Caiman", "Yacare Caiman", "Cuvier’s Dwarf Caiman", "Schneider’s Smooth-fronted Caiman", "African Slender-snouted Crocodile", "American Crocodile", "Australian Freshwater Crocodile", "Cuban Crocodile", "Dwarf Crocodile", "Morelet’s Crocodile", "Mugger Crocodile", "New Guinea Freshwater Crocodile", "Nile Crocodile", "West African Crocodile", "Orinoco Crocodile", "Philippine Crocodile", "Saltwater Crocodile", "Siamese Crocodile", "Gharial", "Tomistoma"];
var m = ["Affenpinscher", "Afghan Hound", "Aidi", "Airedale Terrier", "Akbash", "Akita", "Alano Español", "Alapaha Blue Blood Bulldog", "Alaskan Husky", "Alaskan Klee Kai", "Alaskan Malamute", "Alopekis", "Alpine Dachsbracke", "American Bulldog", "American Bully", "American Cocker Spaniel", "American English Coonhound", "American Foxhound", "American Hairless Terrier", "American Pit Bull Terrier", "American Staffordshire Terrier", "American Water Spaniel", "Andalusian Hound", "Anglo-Français de Petite Vénerie", "Appenzeller Sennenhund", "Ariegeois", "Armant", "Armenian Gampr dog", "Artois Hound", "Australian Cattle Dog", "Australian Kelpie", "Australian Shepherd", "Australian Stumpy Tail Cattle Dog", "Australian Terrier", "Austrian Black and Tan Hound", "Austrian Pinscher", "Azawakh", "Bakharwal dog", "Banjara Hound", "Barbado da Terceira", "Barbet", "Basenji", "Basque Shepherd Dog", "Basset Artésien Normand", "Basset Bleu de Gascogne", "Basset Fauve de Bretagne", "Basset Hound", "Bavarian Mountain Hound", "Beagle", "Beagle-Harrier", "Belgian Shepherd", "Bearded Collie", "Beauceron", "Bedlington Terrier", "Bergamasco Shepherd", "Berger Picard", "Bernese Mountain Dog", "Bhotia", "Bichon Frisé", "Billy", "Black and Tan Coonhound", "Black Norwegian Elkhound", "Black Russian Terrier", "Black Mouth Cur", "Bloodhound", "Blue Lacy", "Blue Picardy Spaniel", "Bluetick Coonhound", "Boerboel", "Bohemian Shepherd", "Bolognese", "Border Collie", "Border Terrier", "Borzoi", "Bosnian Coarse-haired Hound", "Boston Terrier", "Bouvier des Ardennes", "Bouvier des Flandres", "Boxer", "Boykin Spaniel", "Bracco Italiano", "Braque d'Auvergne", "Braque de l'Ariège", "Braque du Bourbonnais", "Braque Francais", "Braque Saint-Germain", "Briard", "Briquet Griffon Vendéen", "Brittany", "Broholmer", "Bruno Jura Hound", "Brussels Griffon", "Bucovina Shepherd Dog", "Bull Arab", "Bull Terrier", "Bulldog", "Bullmastiff", "Bully Kutta", "Burgos Pointer", "Cairn Terrier", "Campeiro Bulldog", "Canaan Dog", "Canadian Eskimo Dog", "Cane Corso", "Cane di Oropa", "Cane Paratore", "Cantabrian Water Dog", "Can de Chira", "Cão da Serra de Aires", "Cão de Castro Laboreiro", "Cão de Gado Transmontano", "Cão Fila de São Miguel", "Cardigan Welsh Corgi", "Carea Castellano Manchego", "Carolina Dog", "Carpathian Shepherd Dog", "Catahoula Leopard Dog", "Catalan Sheepdog", "Caucasian Shepherd Dog", "Cavalier King Charles Spaniel", "Central Asian Shepherd Dog", "Cesky Fousek", "Cesky Terrier", "Chesapeake Bay Retriever", "Chien Français Blanc et Noir", "Chien Français Blanc et Orange", "Chien Français Tricolore", "Chihuahua", "Chilean Terrier", "Chinese Chongqing Dog", "Chinese Crested Dog", "Chinook", "Chippiparai", "Chongqing dog", "Chortai", "Chow Chow", "Cimarrón Uruguayo", "Cirneco dell'Etna", "Clumber Spaniel", "Colombian fino hound", "Coton de Tulear", "Cretan Hound", "Croatian Sheepdog", "Curly-Coated Retriever", "Cursinu", "Czechoslovakian Wolfdog", "Dachshund", "Dalmatian", "Dandie Dinmont Terrier", "Danish-Swedish Farmdog", "Denmark Feist", "Dingo", "Doberman Pinscher", "Dogo Argentino", "Dogo Guatemalteco", "Dogo Sardesco", "Dogue Brasileiro", "Dogue de Bordeaux", "Drentse Patrijshond", "Drever", "Dunker", "Dutch Shepherd", "Dutch Smoushond", "East Siberian Laika", "East European Shepherd", "English Cocker Spaniel", "English Foxhound", "English Mastiff", "English Setter", "English Shepherd", "English Springer Spaniel", "English Toy Terrier", "Entlebucher Mountain Dog", "Estonian Hound", "Estrela Mountain Dog", "Eurasier", "Field Spaniel", "Fila Brasileiro", "Finnish Hound", "Finnish Lapphund", "Finnish Spitz", "Flat-Coated Retriever", "French Bulldog", "French Spaniel", "Galgo Español", "Galician Shepherd Dog", "Garafian Shepherd", "Gascon Saintongeois", "Georgian Shepherd", "German Hound", "German Longhaired Pointer", "German Pinscher", "German Roughhaired Pointer", "German Shepherd Dog", "German Shorthaired Pointer", "German Spaniel", "German Spitz", "German Wirehaired Pointer", "Giant Schnauzer", "Glen of Imaal Terrier", "Golden Retriever", "Gończy Polski", "Gordon Setter", "Grand Anglo-Français Blanc et Noir", "Grand Anglo-Français Blanc et Orange", "Grand Anglo-Français Tricolore", "Grand Basset Griffon Vendéen", "Grand Bleu de Gascogne", "Grand Griffon Vendéen", "Great Dane", "Greater Swiss Mountain Dog", "Greek Harehound", "Greek Shepherd", "Greenland Dog", "Greyhound", "Griffon Bleu de Gascogne", "Griffon Fauve de Bretagne", "Griffon Nivernais", "Gull Dong", "Gull Terrier", "Hällefors Elkhound", "Hamiltonstövare", "Hanover Hound", "Harrier", "Havanese", "Hierran Wolfdog", "Hokkaido", "Hovawart", "Huntaway", "Hygen Hound", "Ibizan Hound", "Icelandic Sheepdog", "Indian pariah dog", "Indian Spitz", "Irish Red and White Setter", "Irish Setter", "Irish Terrier", "Irish Water Spaniel", "Irish Wolfhound", "Istrian Coarse-haired Hound", "Istrian Shorthaired Hound", "Italian Greyhound", "Jack Russell Terrier", "Jagdterrier", "Japanese Chin", "Japanese Spitz", "Japanese Terrier", "Jindo", "Jonangi", "Kai Ken", "Kaikadi", "Kangal Shepherd Dog", "Kanni", "Karakachan dog", "Karelian Bear Dog", "Kars", "Karst Shepherd", "Keeshond", "Kerry Beagle", "Kerry Blue Terrier", "King Charles Spaniel", "King Shepherd", "Kintamani", "Kishu", "Kokoni", "Kombai", "Komondor", "Kooikerhondje", "Koolie", "Koyun dog", "Kromfohrländer", "Kuchi", "Kuvasz", "Labrador Retriever", "Lagotto Romagnolo", "Lakeland Terrier", "Lancashire Heeler", "Landseer", "Lapponian Herder", "Large Münsterländer", "Leonberger", "Levriero Sardo", "Lhasa Apso", "Lithuanian Hound", "Löwchen", "Lupo Italiano", "Mackenzie River Husky", "Magyar agár", "Mahratta Greyhound", "Maltese", "Manchester Terrier", "Maremmano-Abruzzese Sheepdog", "McNab dog", "Miniature American Shepherd", "Miniature Bull Terrier", "Miniature Fox Terrier", "Miniature Pinscher", "Miniature Schnauzer", "Molossus of Epirus", "Montenegrin Mountain Hound", "Mountain Cur", "Mountain Feist", "Mucuchies", "Mudhol Hound", "Mudi", "Neapolitan Mastiff", "New Guinea Singing Dog", "New Zealand Heading Dog", "Newfoundland", "Norfolk Terrier", "Norrbottenspets", "Northern Inuit Dog", "Norwegian Buhund", "Norwegian Elkhound", "Norwegian Lundehund", "Norwich Terrier", "Nova Scotia Duck Tolling Retriever", "Old Croatian Sighthound", "Old Danish Pointer", "Old English Sheepdog", "Old English Terrier", "Olde English Bulldogge", "Otterhound", "Pachon Navarro", "Pampas Deerhound", "Paisley Terrier", "Papillon", "Parson Russell Terrier", "Pastore della Lessinia e del Lagorai", "Patagonian Sheepdog", "Patterdale Terrier", "Pekingese", "Pembroke Welsh Corgi", "Perro Majorero", "Perro de Pastor Mallorquin", "Perro de Presa Canario", "Perro de Presa Mallorquin", "Peruvian Inca Orchid", "Petit Basset Griffon Vendéen", "Petit Bleu de Gascogne", "Phalène", "Pharaoh Hound", "Phu Quoc Ridgeback", "Picardy Spaniel", "Plummer Terrier", "Plott Hound", "Podenco Canario", "Podenco Valenciano", "Pointer", "Poitevin", "Polish Greyhound", "Polish Hound", "Polish Lowland Sheepdog", "Polish Tatra Sheepdog", "Pomeranian", "Pont-Audemer Spaniel", "Poodle", "Porcelaine", "Portuguese Podengo", "Portuguese Pointer", "Portuguese Water Dog", "Posavac Hound", "Pražský Krysařík", "Pshdar Dog", "Pudelpointer", "Pug", "Puli", "Pumi", "Pungsan Dog", "Pyrenean Mastiff", "Pyrenean Mountain Dog", "Pyrenean Sheepdog", "Rafeiro do Alentejo", "Rajapalayam", "Rampur Greyhound", "Rat Terrier", "Ratonero Bodeguero Andaluz", "Ratonero Mallorquin", "Ratonero Murciano de Huerta", "Ratonero Valenciano", "Redbone Coonhound", "Rhodesian Ridgeback", "Romanian Mioritic Shepherd Dog", "Romanian Raven Shepherd Dog", "Rottweiler", "Rough Collie", "Russian Spaniel", "Russian Toy", "Russo-European Laika", "Saarloos Wolfdog", "Sabueso Español", "Saint Bernard", "Saint Hubert Jura Hound", "Saint-Usuge Spaniel", "Saluki", "Samoyed", "Sapsali", "Sarabi dog", "Šarplaninac", "Schapendoes", "Schillerstövare", "Schipperke", "Schweizer Laufhund", "Schweizerischer Niederlaufhund", "Scottish Deerhound", "Scottish Terrier", "Sealyham Terrier", "Segugio dell'Appennino", "Segugio Italiano", "Segugio Maremmano", "Seppala Siberian Sleddog", "Serbian Hound", "Serbian Tricolour Hound", "Serrano Bulldog", "Shar Pei", "Shetland Sheepdog", "Shiba Inu", "Shih Tzu", "Shikoku", "Shiloh Shepherd", "Siberian Husky", "Silken Windhound", "Silky Terrier", "Sinhala Hound", "Skye Terrier", "Sloughi", "Slovakian Wirehaired Pointer", "Slovenský Cuvac", "Slovenský Kopov", "Smalandstövare", "Small Greek domestic dog", "Small Münsterländer", "Smooth Collie", "Smooth Fox Terrier", "Soft-Coated Wheaten Terrier", "South Russian Ovcharka", "Spanish Mastiff", "Spanish Water Dog", "Spinone Italiano", "Sporting Lucas Terrier", "Sardinian Shepherd Dog", "Stabyhoun", "Staffordshire Bull Terrier", "Standard Schnauzer", "Stephens Stock", "Styrian Coarse-haired Hound", "Sussex Spaniel", "Swedish Elkhound", "Swedish Lapphund", "Swedish Vallhund", "Swedish White Elkhound", "Taigan", "Taiwan Dog", "Tamaskan Dog", "Teddy Roosevelt Terrier", "Telomian", "Tenterfield Terrier", "Terrier Brasileiro", "Thai Bangkaew Dog", "Thai Ridgeback", "Tibetan Mastiff", "Tibetan Spaniel", "Tibetan Terrier", "Tornjak", "Tosa", "Toy Fox Terrier", "Toy Manchester Terrier", "Transylvanian Hound", "Treeing Cur", "Treeing Feist", "Treeing Tennessee Brindle", "Treeing Walker Coonhound", "Trigg Hound", "Tyrolean Hound", "Vikhan", "Villano de Las Encartaciones", "Villanuco de Las Encartaciones", "Vizsla", "Volpino Italiano", "Weimaraner", "Welsh Sheepdog", "Welsh Springer Spaniel", "Welsh Terrier", "West Highland White Terrier", "West Siberian Laika", "Westphalian Dachsbracke", "Wetterhoun", "Whippet", "White Shepherd", "White Swiss Shepherd Dog", "Wire Fox Terrier", "Wirehaired Pointing Griffon", "Wirehaired Vizsla", "Xiasi Dog", "Xoloitzcuintli", "Yakutian Laika", "Yorkshire Terrier"];
var h = ["Grass carp", "Peruvian anchoveta", "Silver carp", "Common carp", "Asari", "Japanese littleneck", "Filipino Venus", "Japanese cockle", "Alaska pollock", "Nile tilapia", "Whiteleg shrimp", "Bighead carp", "Skipjack tuna", "Catla", "Crucian carp", "Atlantic salmon", "Atlantic herring", "Chub mackerel", "Rohu", "Yellowfin tuna", "Japanese anchovy", "Largehead hairtail", "Atlantic cod", "European pilchard", "Capelin", "Jumbo flying squid", "Milkfish", "Atlantic mackerel", "Rainbow trout", "Araucanian herring", "Wuchang bream", "Gulf menhaden", "Indian oil sardine", "Black carp", "European anchovy", "Northern snakehead", "Pacific cod", "Pacific saury", "Pacific herring", "Bigeye tuna", "Chilean jack mackerel", "Yellow croaker", "Haddock", "Gazami crab", "Amur catfish", "Japanese common catfish", "European sprat", "Pink salmon", "Mrigal carp", "Channel catfish", "Blood cockle", "Blue whiting", "Hilsa shad", "Daggertooth pike conger", "California pilchard", "Cape horse mackerel", "Pacific anchoveta", "Japanese flying squid", "Pollock", "Chinese softshell turtle", "Kawakawa", "Indian mackerel", "Asian swamp eel", "Argentine hake", "Short mackerel", "Southern rough shrimp", "Southern African anchovy", "Pond loach", "Iridescent shark", "Mandarin fish", "Chinese perch", "Nile perch", "Round sardinella", "Japanese pilchard", "Bombay-duck", "Yellowhead catfish", "Korean bullhead", "Narrow-barred Spanish mackerel", "Albacore", "Madeiran sardinella", "Bonga shad", "Silver cyprinid", "Longtail tuna", "Atlantic menhaden", "North Pacific hake", "Atlantic horse mackerel", "Japanese jack mackerel", "Pacific thread herring", "Bigeye scad", "Yellowstripe scad", "Chum salmon", "Blue swimming crab", "Pacific sand lance", "Pacific sandlance", "Goldstripe sardinella"];
var p = ["American Albino", "Abaco Barb", "Abtenauer", "Abyssinian", "Aegidienberger", "Akhal-Teke", "Albanian Horse", "Altai Horse", "Altèr Real", "American Cream Draft", "American Indian Horse", "American Paint Horse", "American Quarter Horse", "American Saddlebred", "American Warmblood", "Andalusian Horse", "Andravida Horse", "Anglo-Arabian", "Anglo-Arabo-Sardo", "Anglo-Kabarda", "Appaloosa", "AraAppaloosa", "Arabian Horse", "Ardennes Horse", "Arenberg-Nordkirchen", "Argentine Criollo", "Asian wild Horse", "Assateague Horse", "Asturcón", "Augeron", "Australian Brumby", "Australian Draught Horse", "Australian Stock Horse", "Austrian Warmblood", "Auvergne Horse", "Auxois", "Azerbaijan Horse", "Azteca Horse", "Baise Horse", "Bale", "Balearic Horse", "Balikun Horse", "Baluchi Horse", "Banker Horse", "Barb Horse", "Bardigiano", "Bashkir Curly", "Basque Mountain Horse", "Bavarian Warmblood", "Belgian Half-blood", "Belgian Horse", "Belgian Warmblood ", "Bhutia Horse", "Black Forest Horse", "Blazer Horse", "Boerperd", "Borana", "Boulonnais Horse", "Brabant", "Brandenburger", "Brazilian Sport Horse", "Breton Horse", "Brumby", "Budyonny Horse", "Burguete Horse", "Burmese Horse", "Byelorussian Harness Horse", "Calabrese Horse", "Camargue Horse", "Camarillo White Horse", "Campeiro", "Campolina", "Canadian Horse", "Canadian Pacer", "Carolina Marsh Tacky", "Carthusian Horse", "Caspian Horse", "Castilian Horse", "Castillonnais", "Catria Horse", "Cavallo Romano della Maremma Laziale", "Cerbat Mustang", "Chickasaw Horse", "Chilean Corralero", "Choctaw Horse", "Cleveland Bay", "Clydesdale Horse", "Cob", "Coldblood Trotter", "Colonial Spanish Horse", "Colorado Ranger", "Comtois Horse", "Corsican Horse", "Costa Rican Saddle Horse", "Cretan Horse", "Criollo Horse", "Croatian Coldblood", "Cuban Criollo", "Cumberland Island Horse", "Curly Horse", "Czech Warmblood", "Daliboz", "Danish Warmblood", "Danube Delta Horse", "Dole Gudbrandsdal", "Don", "Dongola Horse", "Draft Trotter", "Dutch Harness Horse", "Dutch Heavy Draft", "Dutch Warmblood", "Dzungarian Horse", "East Bulgarian", "East Friesian Horse", "Estonian Draft", "Estonian Horse", "Falabella", "Faroese", "Finnhorse", "Fjord Horse", "Fleuve", "Florida Cracker Horse", "Foutanké", "Frederiksborg Horse", "Freiberger", "French Trotter", "Friesian Cross", "Friesian Horse", "Friesian Sporthorse", "Furioso-North Star", "Galiceño", "Galician Pony", "Gelderland Horse", "Georgian Grande Horse", "German Warmblood", "Giara Horse", "Gidran", "Groningen Horse", "Gypsy Horse", "Hackney Horse", "Haflinger", "Hanoverian Horse", "Heck Horse", "Heihe Horse", "Henson Horse", "Hequ Horse", "Hirzai", "Hispano-Bretón", "Holsteiner Horse", "Horro", "Hungarian Warmblood", "Icelandic Horse", "Iomud", "Irish Draught", "Irish Sport Horse sometimes called Irish Hunter", "Italian Heavy Draft", "Italian Trotter", "Jaca Navarra", "Jeju Horse", "Jutland Horse", "Kabarda Horse", "Kafa", "Kaimanawa Horses", "Kalmyk Horse", "Karabair", "Karabakh Horse", "Karachai Horse", "Karossier", "Kathiawari", "Kazakh Horse", "Kentucky Mountain Saddle Horse", "Kiger Mustang", "Kinsky Horse", "Kisber Felver", "Kiso Horse", "Kladruber", "Knabstrupper", "Konik", "Kundudo", "Kustanair", "Kyrgyz Horse", "Latvian Horse", "Lipizzan", "Lithuanian Heavy Draught", "Lokai", "Losino Horse", "Lusitano", "Lyngshest", "M'Bayar", "M'Par", "Mallorquín", "Malopolski", "Mangalarga", "Mangalarga Marchador", "Maremmano", "Marismeño Horse", "Marsh Tacky", "Marwari Horse", "Mecklenburger", "Međimurje Horse", "Menorquín", "Mérens Horse", "Messara Horse", "Metis Trotter", "Mezőhegyesi Sport Horse", "Miniature Horse", "Misaki Horse", "Missouri Fox Trotter", "Monchina", "Mongolian Horse", "Mongolian Wild Horse", "Monterufolino", "Morab", "Morgan Horse", "Mountain Pleasure Horse", "Moyle Horse", "Murakoz Horse", "Murgese", "Mustang Horse", "Namib Desert Horse", "Nangchen Horse", "National Show Horse", "Nez Perce Horse", "Nivernais Horse", "Nokota Horse", "Noma", "Nonius Horse", "Nooitgedachter", "Nordlandshest", "Noriker Horse", "Norman Cob", "North American Single-Footer Horse", "North Swedish Horse", "Norwegian Coldblood Trotter", "Norwegian Fjord", "Novokirghiz", "Oberlander Horse", "Ogaden", "Oldenburg Horse", "Orlov trotter", "Ostfriesen", "Paint", "Pampa Horse", "Paso Fino", "Pentro Horse", "Percheron", "Persano Horse", "Peruvian Paso", "Pintabian", "Pleven Horse", "Poitevin Horse", "Posavac Horse", "Pottok", "Pryor Mountain Mustang", "Przewalski's Horse", "Pura Raza Española", "Purosangue Orientale", "Qatgani", "Quarab", "Quarter Horse", "Racking Horse", "Retuerta Horse", "Rhenish German Coldblood", "Rhinelander Horse", "Riwoche Horse", "Rocky Mountain Horse", "Romanian Sporthorse", "Rottaler", "Russian Don", "Russian Heavy Draft", "Russian Trotter", "Saddlebred", "Salerno Horse", "Samolaco Horse", "San Fratello Horse", "Sarcidano Horse", "Sardinian Anglo-Arab", "Schleswig Coldblood", "Schwarzwälder Kaltblut", "Selale", "Sella Italiano", "Selle Français", "Shagya Arabian", "Shan Horse", "Shire Horse", "Siciliano Indigeno", "Silesian Horse", "Sokolsky Horse", "Sorraia", "South German Coldblood", "Soviet Heavy Draft", "Spanish Anglo-Arab", "Spanish Barb", "Spanish Jennet Horse", "Spanish Mustang", "Spanish Tarpan", "Spanish-Norman Horse", "Spiti Horse", "Spotted Saddle Horse", "Standardbred Horse", "Suffolk Punch", "Swedish Ardennes", "Swedish coldblood trotter", "Swedish Warmblood", "Swiss Warmblood", "Taishū Horse", "Takhi", "Tawleed", "Tchernomor", "Tennessee Walking Horse", "Tersk Horse", "Thoroughbred", "Tiger Horse", "Tinker Horse", "Tolfetano", "Tori Horse", "Trait Du Nord", "Trakehner", "Tsushima", "Tuigpaard", "Ukrainian Riding Horse", "Unmol Horse", "Uzunyayla", "Ventasso Horse", "Virginia Highlander", "Vlaamperd", "Vladimir Heavy Draft", "Vyatka", "Waler", "Waler Horse", "Walkaloosa", "Warlander", "Warmblood", "Welsh Cob", "Westphalian Horse", "Wielkopolski", "Württemberger", "Xilingol Horse", "Yakutian Horse", "Yili Horse", "Yonaguni Horse", "Zaniskari", "Žemaitukas", "Zhemaichu", "Zweibrücker"];
var g = ["Acacia-ants", "Acorn-plum gall", "Aerial yellowjacket", "Africanized honey bee", "Allegheny mound ant", "Almond stone wasp", "Ant", "Arboreal ant", "Argentine ant", "Asian paper wasp", "Baldfaced hornet", "Bee", "Bigheaded ant", "Black and yellow mud dauber", "Black carpenter ant", "Black imported fire ant", "Blue horntail woodwasp", "Blue orchard bee", "Braconid wasp", "Bumble bee", "Carpenter ant", "Carpenter wasp", "Chalcid wasp", "Cicada killer", "Citrus blackfly parasitoid", "Common paper wasp", "Crazy ant", "Cuckoo wasp", "Cynipid gall wasp", "Eastern Carpenter bee", "Eastern yellowjacket", "Elm sawfly", "Encyrtid wasp", "Erythrina gall wasp", "Eulophid wasp", "European hornet", "European imported fire ant", "False honey ant", "Fire ant", "Forest bachac", "Forest yellowjacket", "German yellowjacket", "Ghost ant", "Giant ichneumon wasp", "Giant resin bee", "Giant wood wasp", "Golden northern bumble bee", "Golden paper wasp", "Gouty oak gall", "Grass Carrying Wasp", "Great black wasp", "Great golden digger wasp", "Hackberry nipple gall parasitoid", "Honey bee", "Horned oak gall", "Horse guard wasp", "Hunting wasp", "Ichneumonid wasp", "Keyhole wasp", "Knopper gall", "Large garden bumble bee", "Large oak-apple gall", "Leafcutting bee", "Little fire ant", "Little yellow ant", "Long-horned bees", "Long-legged ant", "Macao paper wasp", "Mallow bee", "Marble gall", "Mossyrose gall wasp", "Mud-daubers", "Multiflora rose seed chalcid", "Oak apple gall wasp", "Oak rough bulletgall wasp", "Oak saucer gall", "Oak shoot sawfly", "Odorous house ant", "Orange-tailed bumble bee", "Orangetailed potter wasp", "Oriental chestnut gall wasp", "Paper wasp", "Pavement ant", "Pigeon tremex", "Pip gall wasp", "Prairie yellowjacket", "Pteromalid wasp", "Pyramid ant", "Raspberry Horntail", "Red ant", "Red carpenter ant", "Red harvester ant", "Red imported fire ant", "Red wasp", "Red wood ant", "Red-tailed wasp", "Reddish carpenter ant", "Rough harvester ant", "Sawfly parasitic wasp", "Scale parasitoid", "Silky ant", "Sirex woodwasp", "Siricid woodwasp", "Smaller yellow ant", "Southeastern blueberry bee", "Southern fire ant", "Southern yellowjacket", "Sphecid wasp", "Stony gall", "Sweat bee", "Texas leafcutting ant", "Tiphiid wasp", "Torymid wasp", "Tramp ant", "Valentine ant", "Velvet ant", "Vespid wasp", "Weevil parasitoid", "Western harvester ant", "Western paper wasp", "Western thatching ant", "Western yellowjacket", "White-horned horntail", "Willow shoot sawfly", "Woodwasp", "Wool sower gall maker", "Yellow and black potter wasp", "Yellow Crazy Ant", "Yellow-horned horntail"];
var y = ["Asiatic Lion", "Barbary Lion", "West African Lion", "Northeast Congo Lion", "Masai Lion", "Transvaal lion", "Cape lion"];
var b = ["American", "American Chinchilla", "American Fuzzy Lop", "American Sable", "Argente Brun", "Belgian Hare", "Beveren", "Blanc de Hotot", "Britannia Petite", "Californian", "Champagne D’Argent", "Checkered Giant", "Cinnamon", "Crème D’Argent", "Dutch", "Dwarf Hotot", "English Angora", "English Lop", "English Spot", "Flemish Giant", "Florida White", "French Angora", "French Lop", "Giant Angora", "Giant Chinchilla", "Harlequin", "Havana", "Himalayan", "Holland Lop", "Jersey Wooly", "Lilac", "Lionhead", "Mini Lop", "Mini Rex", "Mini Satin", "Netherland Dwarf", "New Zealand", "Palomino", "Polish", "Rex", "Rhinelander", "Satin", "Satin Angora", "Silver", "Silver Fox", "Silver Marten", "Standard Chinchilla", "Tan", "Thrianta"];
var f = ["Abrocoma", "Abrocoma schistacea", "Aconaemys", "Aconaemys porteri", "African brush-tailed porcupine", "Andean mountain cavy", "Argentine tuco-tuco", "Ashy chinchilla rat", "Asiatic brush-tailed porcupine", "Atherurus", "Azara's agouti", "Azara's tuco-tuco", "Bahia porcupine", "Bathyergus", "Bathyergus janetta", "Bathyergus suillus", "Bennett's chinchilla rat", "Bicolored-spined porcupine", "Black agouti", "Black dwarf porcupine", "Black-rumped agouti", "Black-tailed hairy dwarf porcupine", "Bolivian chinchilla rat", "Bolivian tuco-tuco", "Bonetto's tuco-tuco", "Brandt's yellow-toothed cavy", "Brazilian guinea pig", "Brazilian porcupine", "Brazilian tuco-tuco", "Bridge's degu", "Brown hairy dwarf porcupine", "Budin's chinchilla rat, A. budini", "Cape porcupine", "Catamarca tuco-tuco", "Cavia", "Central American agouti", "Chacoan tuco-tuco", "Chilean rock rat", "Chinchilla", "Coendou", "Coiban agouti", "Colburn's tuco-tuco", "Collared tuco-tuco", "Common degu", "Common yellow-toothed cavy", "Conover's tuco-tuco", "Coruro", "Crested agouti", "Crested porcupine", "Cryptomys", "Cryptomys bocagei", "Cryptomys damarensis", "Cryptomys foxi", "Cryptomys hottentotus", "Cryptomys mechowi", "Cryptomys ochraceocinereus", "Cryptomys zechi", "Ctenomys", "Cuniculus", "Cuscomys", "Cuscomys ashanika", "Dactylomys", "Dactylomys boliviensis", "Dactylomys dactylinus", "Dactylomys peruanus", "Dasyprocta", "Domestic guinea pig", "Emily's tuco-tuco", "Erethizon", "Famatina chinchilla rat", "Frosted hairy dwarf porcupine", "Fukomys", "Fukomys amatus", "Fukomys anselli", "Fukomys bocagei", "Fukomys damarensis", "Fukomys darlingi", "Fukomys foxi", "Fukomys ilariae", "Fukomys kafuensis", "Fukomys mechowii", "Fukomys micklemi", "Fukomys occlusus", "Fukomys ochraceocinereus", "Fukomys whytei", "Fukomys zechi", "Furtive tuco-tuco", "Galea", "Georychus", "Georychus capensis", "Golden viscacha-rat", "Goya tuco-tuco", "Greater guinea pig", "Green acouchi", "Haig's tuco-tuco", "Heliophobius", "Heliophobius argenteocinereus", "Heterocephalus", "Heterocephalus glaber", "Highland tuco-tuco", "Hystrix", "Indian porcupine", "Isla Mocha degu", "Kalinowski agouti", "Kannabateomys", "Kannabateomys amblyonyx", "Lagidium", "Lagostomus", "Lewis' tuco-tuco", "Long-tailed chinchilla", "Long-tailed porcupine", "Los Chalchaleros' viscacha-rat", "Lowland paca", "Magellanic tuco-tuco", "Malayan porcupine", "Maule tuco-tuco", "Mendoza tuco-tuco", "Mexican agouti", "Mexican hairy dwarf porcupine", "Microcavia", "Montane guinea pig", "Moon-toothed degu", "Mottled tuco-tuco", "Mountain degu", "Mountain paca", "Mountain viscacha-rat", "Myoprocta", "Natterer's tuco-tuco", "North American porcupine", "Northern viscacha", "Octodon", "Octodontomys", "Octomys", "Olallamys", "Olallamys albicauda", "Olallamys edax", "Orinoco agouti", "Paraguaian hairy dwarf porcupine", "Pearson's tuco-tuco", "Peruvian tuco-tuco", "Philippine porcupine", "Pipanacoctomys", "Plains viscacha", "Plains viscacha-rat", "Porteous' tuco-tuco", "Punta de Vacas chinchilla rat", "Red acouchi", "Red-rumped agouti", "Reddish tuco-tuco", "Rio Negro tuco-tuco", "Robust tuco-tuco", "Roosmalen's dwarf porcupine", "Rothschild's porcupine", "Ruatan Island agouti", "Sage's rock rat", "Salinoctomys", "Salta tuco-tuco", "San Luis tuco-tuco", "Santa Catarina's guinea pig", "Shiny guinea pig", "Shipton's mountain cavy", "Short-tailed chinchilla", "Silky tuco-tuco", "Social tuco-tuco", "Southern mountain cavy", "Southern tuco-tuco", "Southern viscacha", "Spalacopus", "Spix's yellow-toothed cavy", "Steinbach's tuco-tuco", "Streaked dwarf porcupine", "Strong tuco-tuco", "Stump-tailed porcupine", "Sumatran porcupine", "Sunda porcupine", "Talas tuco-tuco", "Tawny tuco-tuco", "Thick-spined porcupine", "Tiny tuco-tuco", "Trichys", "Tucuman tuco-tuco", "Tympanoctomys", "Uspallata chinchilla rat", "White-toothed tuco-tuco", "Wolffsohn's viscacha"];
var k = ["Viper Adder", "Common adder", "Death Adder", "Desert death adder", "Horned adder", "Long-nosed adder", "Many-horned adder", "Mountain adder", "Mud adder", "Namaqua dwarf adder", "Nightingale adder", "Peringuey's adder", "Puff adder", "African puff adder", "Rhombic night adder", "Sand adder", "Dwarf sand adder", "Namib dwarf sand adder", "Water adder", "Aesculapian snake", "Anaconda", "Bolivian anaconda", "De Schauensee's anaconda", "Green anaconda", "Yellow anaconda", "Arafura file snake", "Asp", "European asp", "Egyptian asp", "African beaked snake", "Ball Python", "Bird snake", "Black-headed snake", "Mexican black kingsnake", "Black rat snake", "Black snake", "Red-bellied black snake", "Blind snake", "Brahminy blind snake", "Texas blind snake", "Western blind snake", "Boa", "Abaco Island boa", "Amazon tree boa", "Boa constrictor", "Cuban boa", "Dumeril's boa", "Dwarf boa", "Emerald tree boa", "Hogg Island boa", "Jamaican boa", "Madagascar ground boa", "Madagascar tree boa", "Puerto Rican boa", "Rainbow boa", "Red-tailed boa", "Rosy boa", "Rubber boa", "Sand boa", "Tree boa", "Boiga", "Boomslang", "Brown snake", "Eastern brown snake", "Bull snake", "Bushmaster", "Dwarf beaked snake", "Rufous beaked snake", "Canebrake", "Cantil", "Cascabel", "Cat-eyed snake", "Banded cat-eyed snake", "Green cat-eyed snake", "Cat snake", "Andaman cat snake", "Beddome's cat snake", "Dog-toothed cat snake", "Forsten's cat snake", "Gold-ringed cat snake", "Gray cat snake", "Many-spotted cat snake", "Tawny cat snake", "Chicken snake", "Coachwhip snake", "Cobra", "Andaman cobra", "Arabian cobra", "Asian cobra", "Banded water cobra", "Black-necked cobra", "Black-necked spitting cobra", "Black tree cobra", "Burrowing cobra", "Cape cobra", "Caspian cobra", "Congo water cobra", "Common cobra", "Eastern water cobra", "Egyptian cobra", "Equatorial spitting cobra", "False cobra", "False water cobra", "Forest cobra", "Gold tree cobra", "Indian cobra", "Indochinese spitting cobra", "Javan spitting cobra", "King cobra", "Mandalay cobra", "Mozambique spitting cobra", "North Philippine cobra", "Nubian spitting cobra", "Philippine cobra", "Red spitting cobra", "Rinkhals cobra", "Shield-nosed cobra", "Sinai desert cobra", "Southern Indonesian spitting cobra", "Southern Philippine cobra", "Southwestern black spitting cobra", "Snouted cobra", "Spectacled cobra", "Spitting cobra", "Storm water cobra", "Thai cobra", "Taiwan cobra", "Zebra spitting cobra", "Collett's snake", "Congo snake", "Copperhead", "American copperhead", "Australian copperhead", "Coral snake", "Arizona coral snake", "Beddome's coral snake", "Brazilian coral snake", "Cape coral snake", "Harlequin coral snake", "High Woods coral snake", "Malayan long-glanded coral snake", "Texas Coral Snake", "Western coral snake", "Corn snake", "South eastern corn snake", "Cottonmouth", "Crowned snake", "Cuban wood snake", "Eastern hognose snake", "Egg-eater", "Eastern coral snake", "Fer-de-lance", "Fierce snake", "Fishing snake", "Flying snake", "Golden tree snake", "Indian flying snake", "Moluccan flying snake", "Ornate flying snake", "Paradise flying snake", "Twin-Barred tree snake", "Banded Flying Snake", "Fox snake, three species of Pantherophis", "Forest flame snake", "Garter snake", "Checkered garter snake", "Common garter snake", "San Francisco garter snake", "Texas garter snake", "Cape gopher snake", "Grass snake", "Green snake", "Rough green snake", "Smooth green snake", "Ground snake", "Common ground snake", "Three-lined ground snake", "Western ground snake", "Habu", "Hognose snake", "Blonde hognose snake", "Dusty hognose snake", "Jan's hognose snake", "Giant Malagasy hognose snake", "Mexican hognose snake", "South American hognose snake", "Hundred pacer", "Ikaheka snake", "Indigo snake", "Jamaican Tree Snake", "Keelback", "Asian keelback", "Assam keelback", "Black-striped keelback", "Buff striped keelback", "Burmese keelback", "Checkered keelback", "Common keelback", "Hill keelback", "Himalayan keelback", "Khasi Hills keelback", "Modest keelback", "Nicobar Island keelback", "Nilgiri keelback", "Orange-collared keelback", "Red-necked keelback", "Sikkim keelback", "Speckle-bellied keelback", "White-lipped keelback", "Wynaad keelback", "Yunnan keelback", "King brown", "King snake", "California kingsnake", "Desert kingsnake", "Grey-banded kingsnake", "North eastern king snake", "Prairie kingsnake", "Scarlet kingsnake", "Speckled kingsnake", "Krait", "Banded krait", "Blue krait", "Black krait", "Burmese krait", "Ceylon krait", "Indian krait", "Lesser black krait", "Malayan krait", "Many-banded krait", "Northeastern hill krait", "Red-headed krait", "Sind krait", "Large shield snake", "Lancehead", "Common lancehead", "Lora", "Grey Lora", "Lyre snake", "Baja California lyresnake", "Central American lyre snake", "Texas lyre snake", "Eastern lyre snake", "Machete savane", "Mamba", "Black mamba", "Green mamba", "Eastern green mamba", "Western green mamba", "Mamushi", "Mangrove snake", "Milk snake", "Moccasin snake", "Montpellier snake", "Mud snake", "Eastern mud snake", "Western mud snake", "Mussurana", "Night snake", "Cat-eyed night snake", "Texas night snake", "Nichell snake", "Narrowhead Garter Snake", "Nose-horned viper", "Rhinoceros viper", "Vipera ammodytes", "Parrot snake", "Mexican parrot snake", "Patchnose snake", "Perrotet's shieldtail snake", "Pine snake", "Pipe snake", "Asian pipe snake", "Dwarf pipe snake", "Red-tailed pipe snake", "Python", "African rock python", "Amethystine python", "Angolan python", "Australian scrub python", "Ball python", "Bismarck ringed python", "Black headed python", "Blood python", "Boelen python", "Borneo short-tailed python", "Bredl's python", "Brown water python", "Burmese python", "Calabar python", "Western carpet python", "Centralian carpet python", "Coastal carpet python", "Inland carpet python", "Jungle carpet python", "New Guinea carpet python", "Northwestern carpet python", "Southwestern carpet python", "Children's python", "Dauan Island water python", "Desert woma python", "Diamond python", "Flinders python", "Green tree python", "Halmahera python", "Indian python", "Indonesian water python", "Macklot's python", "Mollucan python", "Oenpelli python", "Olive python", "Papuan python", "Pygmy python", "Red blood python", "Reticulated python", "Kayaudi dwarf reticulated python", "Selayer reticulated python", "Rough-scaled python", "Royal python", "Savu python", "Spotted python", "Stimson's python", "Sumatran short-tailed python", "Tanimbar python", "Timor python", "Wetar Island python", "White-lipped python", "Brown white-lipped python", "Northern white-lipped python", "Southern white-lipped python", "Woma python", "Western woma python", "Queen snake", "Racer", "Bimini racer", "Buttermilk racer", "Eastern racer", "Eastern yellowbelly sad racer", "Mexican racer", "Southern black racer", "Tan racer", "West Indian racer", "Raddysnake", "Southwestern blackhead snake", "Rat snake", "Baird's rat snake", "Beauty rat snake", "Great Plains rat snake", "Green rat snake", "Japanese forest rat snake", "Japanese rat snake", "King rat snake", "Mandarin rat snake", "Persian rat snake", "Red-backed rat snake", "Twin-spotted rat snake", "Yellow-striped rat snake", "Manchurian Black Water Snake", "Rattlesnake", "Arizona black rattlesnake", "Aruba rattlesnake", "Chihuahuan ridge-nosed rattlesnake", "Coronado Island rattlesnake", "Durango rock rattlesnake", "Dusky pigmy rattlesnake", "Eastern diamondback rattlesnake", "Grand Canyon rattlesnake", "Great Basin rattlesnake", "Hopi rattlesnake", "Lance-headed rattlesnake", "Long-tailed rattlesnake", "Massasauga rattlesnake", "Mexican green rattlesnake", "Mexican west coast rattlesnake", "Midget faded rattlesnake", "Mojave rattlesnake", "Northern black-tailed rattlesnake", "Oaxacan small-headed rattlesnake", "Rattler", "Red diamond rattlesnake", "Southern Pacific rattlesnake", "Southwestern speckled rattlesnake", "Tancitaran dusky rattlesnake", "Tiger rattlesnake", "Timber rattlesnake", "Tropical rattlesnake", "Twin-spotted rattlesnake", "Uracoan rattlesnake", "Western diamondback rattlesnake", "Ribbon snake", "Rinkhals", "River jack", "Sea snake", "Annulated sea snake", "Beaked sea snake", "Dubois's sea snake", "Hardwicke's sea snake", "Hook Nosed Sea Snake", "Olive sea snake", "Pelagic sea snake", "Stoke's sea snake", "Yellow-banded sea snake", "Yellow-bellied sea snake", "Yellow-lipped sea snake", "Shield-tailed snake", "Sidewinder", "Colorado desert sidewinder", "Mojave desert sidewinder", "Sonoran sidewinder", "Small-eyed snake", "Smooth snake", "Brazilian smooth snake", "European smooth snake", "Stiletto snake", "Striped snake", "Japanese striped snake", "Sunbeam snake", "Taipan", "Central ranges taipan", "Coastal taipan", "Inland taipan", "Paupan taipan", "Tentacled snake", "Tic polonga", "Tiger snake", "Chappell Island tiger snake", "Common tiger snake", "Down's tiger snake", "Eastern tiger snake", "King Island tiger snake", "Krefft's tiger snake", "Peninsula tiger snake", "Tasmanian tiger snake", "Western tiger snake", "Tigre snake", "Tree snake", "Blanding's tree snake", "Blunt-headed tree snake", "Brown tree snake", "Long-nosed tree snake", "Many-banded tree snake", "Northern tree snake", "Trinket snake", "Black-banded trinket snake", "Twig snake", "African twig snake", "Twin Headed King Snake", "Titanboa", "Urutu", "Vine snake", "Asian Vine Snake, Whip Snake", "American Vine Snake", "Mexican vine snake", "Viper", "Asp viper", "Bamboo viper", "Bluntnose viper", "Brazilian mud Viper", "Burrowing viper", "Bush viper", "Great Lakes bush viper", "Hairy bush viper", "Nitsche's bush viper", "Rough-scaled bush viper", "Spiny bush viper", "Carpet viper", "Crossed viper", "Cyclades blunt-nosed viper", "Eyelash viper", "False horned viper", "Fea's viper", "Fifty pacer", "Gaboon viper", "Hognosed viper", "Horned desert viper", "Horned viper", "Jumping viper", "Kaznakov's viper", "Leaf-nosed viper", "Leaf viper", "Levant viper", "Long-nosed viper", "McMahon's viper", "Mole viper", "Palestine viper", "Pallas' viper", "Palm viper", "Amazonian palm viper", "Black-speckled palm-pitviper", "Eyelash palm-pitviper", "Green palm viper", "Mexican palm-pitviper", "Guatemalan palm viper", "Honduran palm viper", "Siamese palm viper", "Side-striped palm-pitviper", "Yellow-lined palm viper", "Pit viper", "Banded pitviper", "Bamboo pitviper", "Barbour's pit viper", "Black-tailed horned pit viper", "Bornean pitviper", "Brongersma's pitviper", "Brown spotted pitviper[4]", "Cantor's pitviper", "Elegant pitviper", "Eyelash pit viper", "Fan-Si-Pan horned pitviper", "Flat-nosed pitviper", "Godman's pit viper", "Green tree pit viper", "Habu pit viper", "Hagen's pitviper", "Horseshoe pitviper", "Jerdon's pitviper", "Kanburian pit viper", "Kaulback's lance-headed pitviper", "Kham Plateau pitviper", "Large-eyed pitviper", "Malabar rock pitviper", "Malayan pit viper", "Mangrove pit viper", "Mangshan pitviper", "Motuo bamboo pitviper", "Nicobar bamboo pitviper", "Philippine pitviper", "Pointed-scaled pit viper[5]", "Red-tailed bamboo pitviper", "Schultze's pitviper", "Stejneger's bamboo pitviper", "Sri Lankan pit viper", "Temple pit viper", "Tibetan bamboo pitviper", "Tiger pit viper", "Undulated pit viper", "Wagler's pit viper", "Wirot's pit viper", "Portuguese viper", "Saw-scaled viper", "Schlegel's viper", "Sedge viper", "Sharp-nosed viper", "Snorkel viper", "Temple viper", "Tree viper", "Chinese tree viper", "Guatemalan tree viper", "Hutton's tree viper", "Indian tree viper", "Large-scaled tree viper", "Malcolm's tree viper", "Nitsche's tree viper", "Pope's tree viper", "Rough-scaled tree viper", "Rungwe tree viper", "Sumatran tree viper", "White-lipped tree viper", "Ursini's viper", "Western hog-nosed viper", "Wart snake", "Water moccasin", "Water snake", "Bocourt's water snake", "Northern water snake", "Whip snake", "Long-nosed whip snake", "Wolf snake", "African wolf snake", "Barred wolf snake", "Worm snake", "Common worm snake", "Longnosed worm snake", "Wutu", "Yarara", "Zebra snake"];
var v = ["dog", "cat", "snake", "bear", "lion", "cetacean", "insect", "crocodilia", "cow", "bird", "fish", "rabbit", "horse"];
var Wa = { bear: t, bird: l, cat: s, cetacean: d, cow: c, crocodilia: u, dog: m, fish: h, horse: p, insect: g, lion: y, rabbit: b, rodent: f, snake: k, type: v };
var w = Wa;
var C = ["{{person.name}}", "{{company.name}}"];
var S = ["Redhold", "Treeflex", "Trippledex", "Kanlam", "Bigtax", "Daltfresh", "Toughjoyfax", "Mat Lam Tam", "Otcom", "Tres-Zap", "Y-Solowarm", "Tresom", "Voltsillam", "Biodex", "Greenlam", "Viva", "Matsoft", "Temp", "Zoolab", "Subin", "Rank", "Job", "Stringtough", "Tin", "It", "Home Ing", "Zamit", "Sonsing", "Konklab", "Alpha", "Latlux", "Voyatouch", "Alphazap", "Holdlamis", "Zaam-Dox", "Sub-Ex", "Quo Lux", "Bamity", "Ventosanzap", "Lotstring", "Hatity", "Tempsoft", "Overhold", "Fixflex", "Konklux", "Zontrax", "Tampflex", "Span", "Namfix", "Transcof", "Stim", "Fix San", "Sonair", "Stronghold", "Fintone", "Y-find", "Opela", "Lotlux", "Ronstring", "Zathin", "Duobam", "Keylex"];
var A = ["0.#.#", "0.##", "#.##", "#.#", "#.#.#"];
var Ga = { author: C, name: S, version: A };
var B = Ga;
var M = ["###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####"];
var Pa = { formats: M };
var T = Pa;
var L = ["red", "green", "blue", "yellow", "purple", "mint green", "teal", "white", "black", "orange", "pink", "grey", "maroon", "violet", "turquoise", "tan", "sky blue", "salmon", "plum", "orchid", "olive", "magenta", "lime", "ivory", "indigo", "gold", "fuchsia", "cyan", "azure", "lavender", "silver"];
var za = { human: L };
var R = za;
var D = ["Books", "Movies", "Music", "Games", "Electronics", "Computers", "Home", "Garden", "Tools", "Grocery", "Health", "Beauty", "Toys", "Kids", "Baby", "Clothing", "Shoes", "Jewelery", "Sports", "Outdoors", "Automotive", "Industrial"];
var H = ["Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support", "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive", "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016", "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality", "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design", "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J", "The Football Is Good For Training And Recreational Purposes", "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit", "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles", "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart", "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients", "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals"];
var W = { adjective: ["Small", "Ergonomic", "Electronic", "Rustic", "Intelligent", "Gorgeous", "Incredible", "Elegant", "Fantastic", "Practical", "Modern", "Recycled", "Sleek", "Bespoke", "Awesome", "Generic", "Handcrafted", "Handmade", "Oriental", "Licensed", "Luxurious", "Refined", "Unbranded", "Tasty"], material: ["Steel", "Bronze", "Wooden", "Concrete", "Plastic", "Cotton", "Granite", "Rubber", "Metal", "Soft", "Fresh", "Frozen"], product: ["Chair", "Car", "Computer", "Keyboard", "Mouse", "Bike", "Ball", "Gloves", "Pants", "Shirt", "Table", "Shoes", "Hat", "Towels", "Soap", "Tuna", "Chicken", "Fish", "Cheese", "Bacon", "Pizza", "Salad", "Sausages", "Chips"] };
var xa = { department: D, product_description: H, product_name: W };
var G = xa;
var P = ["Adaptive", "Advanced", "Ameliorated", "Assimilated", "Automated", "Balanced", "Business-focused", "Centralized", "Cloned", "Compatible", "Configurable", "Cross-group", "Cross-platform", "Customer-focused", "Customizable", "Decentralized", "De-engineered", "Devolved", "Digitized", "Distributed", "Diverse", "Down-sized", "Enhanced", "Enterprise-wide", "Ergonomic", "Exclusive", "Expanded", "Extended", "Face to face", "Focused", "Front-line", "Fully-configurable", "Function-based", "Fundamental", "Future-proofed", "Grass-roots", "Horizontal", "Implemented", "Innovative", "Integrated", "Intuitive", "Inverse", "Managed", "Mandatory", "Monitored", "Multi-channelled", "Multi-lateral", "Multi-layered", "Multi-tiered", "Networked", "Object-based", "Open-architected", "Open-source", "Operative", "Optimized", "Optional", "Organic", "Organized", "Persevering", "Persistent", "Phased", "Polarised", "Pre-emptive", "Proactive", "Profit-focused", "Profound", "Programmable", "Progressive", "Public-key", "Quality-focused", "Reactive", "Realigned", "Re-contextualized", "Re-engineered", "Reduced", "Reverse-engineered", "Right-sized", "Robust", "Seamless", "Secured", "Self-enabling", "Sharable", "Stand-alone", "Streamlined", "Switchable", "Synchronised", "Synergistic", "Synergized", "Team-oriented", "Total", "Triple-buffered", "Universal", "Up-sized", "Upgradable", "User-centric", "User-friendly", "Versatile", "Virtual", "Visionary", "Vision-oriented"];
var z = ["clicks-and-mortar", "value-added", "vertical", "proactive", "robust", "revolutionary", "scalable", "leading-edge", "innovative", "intuitive", "strategic", "e-business", "mission-critical", "sticky", "one-to-one", "24/7", "end-to-end", "global", "B2B", "B2C", "granular", "frictionless", "virtual", "viral", "dynamic", "24/365", "best-of-breed", "killer", "magnetic", "bleeding-edge", "web-enabled", "interactive", "dot-com", "sexy", "back-end", "real-time", "efficient", "front-end", "distributed", "seamless", "extensible", "turn-key", "world-class", "open-source", "cross-platform", "cross-media", "synergistic", "bricks-and-clicks", "out-of-the-box", "enterprise", "integrated", "impactful", "wireless", "transparent", "next-generation", "cutting-edge", "user-centric", "visionary", "customized", "ubiquitous", "plug-and-play", "collaborative", "compelling", "holistic", "rich"];
var x = ["synergies", "paradigms", "markets", "partnerships", "infrastructures", "platforms", "initiatives", "channels", "eyeballs", "communities", "ROI", "solutions", "action-items", "portals", "niches", "technologies", "content", "supply-chains", "convergence", "relationships", "architectures", "interfaces", "e-markets", "e-commerce", "systems", "bandwidth", "models", "mindshare", "deliverables", "users", "schemas", "networks", "applications", "metrics", "e-business", "functionalities", "experiences", "web services", "methodologies", "blockchains", "lifetime value"];
var N = ["implement", "utilize", "integrate", "streamline", "optimize", "evolve", "transform", "embrace", "enable", "orchestrate", "leverage", "reinvent", "aggregate", "architect", "enhance", "incentivize", "morph", "empower", "envisioneer", "monetize", "harness", "facilitate", "seize", "disintermediate", "synergize", "strategize", "deploy", "brand", "grow", "target", "syndicate", "synthesize", "deliver", "mesh", "incubate", "engage", "maximize", "benchmark", "expedite", "reintermediate", "whiteboard", "visualize", "repurpose", "innovate", "scale", "unleash", "drive", "extend", "engineer", "revolutionize", "generate", "exploit", "transition", "e-enable", "iterate", "cultivate", "matrix", "productize", "redefine", "recontextualize"];
var E = ["24 hour", "24/7", "3rd generation", "4th generation", "5th generation", "6th generation", "actuating", "analyzing", "asymmetric", "asynchronous", "attitude-oriented", "background", "bandwidth-monitored", "bi-directional", "bifurcated", "bottom-line", "clear-thinking", "client-driven", "client-server", "coherent", "cohesive", "composite", "context-sensitive", "contextually-based", "content-based", "dedicated", "demand-driven", "didactic", "directional", "discrete", "disintermediate", "dynamic", "eco-centric", "empowering", "encompassing", "even-keeled", "executive", "explicit", "exuding", "fault-tolerant", "foreground", "fresh-thinking", "full-range", "global", "grid-enabled", "heuristic", "high-level", "holistic", "homogeneous", "human-resource", "hybrid", "impactful", "incremental", "intangible", "interactive", "intermediate", "leading edge", "local", "logistical", "maximized", "methodical", "mission-critical", "mobile", "modular", "motivating", "multimedia", "multi-state", "multi-tasking", "national", "needs-based", "neutral", "next generation", "non-volatile", "object-oriented", "optimal", "optimizing", "radical", "real-time", "reciprocal", "regional", "responsive", "scalable", "secondary", "solution-oriented", "stable", "static", "systematic", "systemic", "system-worthy", "tangible", "tertiary", "transitional", "uniform", "upward-trending", "user-facing", "value-added", "web-enabled", "well-modulated", "zero administration", "zero defect", "zero tolerance"];
var F = ["{{person.last_name}} {{company.suffix}}", "{{person.last_name}} - {{person.last_name}}", "{{person.last_name}}, {{person.last_name}} and {{person.last_name}}"];
var J = ["ability", "access", "adapter", "algorithm", "alliance", "analyzer", "application", "approach", "architecture", "archive", "artificial intelligence", "array", "attitude", "benchmark", "budgetary management", "capability", "capacity", "challenge", "circuit", "collaboration", "complexity", "concept", "conglomeration", "contingency", "core", "customer loyalty", "database", "data-warehouse", "definition", "emulation", "encoding", "encryption", "extranet", "firmware", "flexibility", "focus group", "forecast", "frame", "framework", "function", "functionalities", "Graphic Interface", "groupware", "Graphical User Interface", "hardware", "help-desk", "hierarchy", "hub", "implementation", "info-mediaries", "infrastructure", "initiative", "installation", "instruction set", "interface", "internet solution", "intranet", "knowledge user", "knowledge base", "local area network", "leverage", "matrices", "matrix", "methodology", "middleware", "migration", "model", "moderator", "monitoring", "moratorium", "neural-net", "open architecture", "open system", "orchestration", "paradigm", "parallelism", "policy", "portal", "pricing structure", "process improvement", "product", "productivity", "project", "projection", "protocol", "secured line", "service-desk", "software", "solution", "standardization", "strategy", "structure", "success", "superstructure", "support", "synergy", "system engine", "task-force", "throughput", "time-frame", "toolset", "utilisation", "website", "workforce"];
var K = ["Inc", "and Sons", "LLC", "Group"];
var Na = { adjective: P, buzz_adjective: z, buzz_noun: x, buzz_verb: N, descriptor: E, name_pattern: F, noun: J, suffix: K };
var I = Na;
var O = ["id", "title", "name", "email", "phone", "token", "group", "category", "password", "comment", "avatar", "status", "createdAt", "updatedAt"];
var Ea = { column: O };
var q = Ea;
var j = { wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], abbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] };
var V = { wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], abbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"] };
var Fa = { month: j, weekday: V };
var Y = Fa;
var U = ["Checking", "Savings", "Money Market", "Investment", "Home Loan", "Credit Card", "Auto Loan", "Personal Loan"];
var _ = ["34##-######-####L", "37##-######-####L"];
var Z = ["30[0-5]#-######-###L", "36##-######-###L", "54##-####-####-###L"];
var Q = ["6011-####-####-###L", "65##-####-####-###L", "64[4-9]#-####-####-###L", "6011-62##-####-####-###L", "65##-62##-####-####-###L", "64[4-9]#-62##-####-####-###L"];
var X = ["3528-####-####-###L", "3529-####-####-###L", "35[3-8]#-####-####-###L"];
var $ = ["5018-#{4}-#{4}-#{3}L", "5020-#{4}-#{4}-#{3}L", "5038-#{4}-#{4}-#{3}L", "5893-#{4}-#{4}-#{3}L", "6304-#{4}-#{4}-#{3}L", "6759-#{4}-#{4}-#{3}L", "676[1-3]-####-####-###L", "5018#{11,15}L", "5020#{11,15}L", "5038#{11,15}L", "5893#{11,15}L", "6304#{11,15}L", "6759#{11,15}L", "676[1-3]#{11,15}L"];
var ee = ["5[1-5]##-####-####-###L", "2[221-720]-####-####-###L"];
var ae = ["4###########L", "4###-####-####-###L"];
var Ja = { american_express: _, diners_club: Z, discover: Q, jcb: X, maestro: $, mastercard: ee, visa: ae };
var re = Ja;
var ie = [{ name: "UAE Dirham", code: "AED", symbol: "" }, { name: "Afghani", code: "AFN", symbol: "؋" }, { name: "Lek", code: "ALL", symbol: "Lek" }, { name: "Armenian Dram", code: "AMD", symbol: "" }, { name: "Netherlands Antillian Guilder", code: "ANG", symbol: "ƒ" }, { name: "Kwanza", code: "AOA", symbol: "" }, { name: "Argentine Peso", code: "ARS", symbol: "$" }, { name: "Australian Dollar", code: "AUD", symbol: "$" }, { name: "Aruban Guilder", code: "AWG", symbol: "ƒ" }, { name: "Azerbaijanian Manat", code: "AZN", symbol: "ман" }, { name: "Convertible Marks", code: "BAM", symbol: "KM" }, { name: "Barbados Dollar", code: "BBD", symbol: "$" }, { name: "Taka", code: "BDT", symbol: "" }, { name: "Bulgarian Lev", code: "BGN", symbol: "лв" }, { name: "Bahraini Dinar", code: "BHD", symbol: "" }, { name: "Burundi Franc", code: "BIF", symbol: "" }, { name: "Bermudian Dollar (customarily known as Bermuda Dollar)", code: "BMD", symbol: "$" }, { name: "Brunei Dollar", code: "BND", symbol: "$" }, { name: "Boliviano boliviano", code: "BOB", symbol: "Bs" }, { name: "Brazilian Real", code: "BRL", symbol: "R$" }, { name: "Bahamian Dollar", code: "BSD", symbol: "$" }, { name: "Pula", code: "BWP", symbol: "P" }, { name: "Belarusian Ruble", code: "BYN", symbol: "Rbl" }, { name: "Belize Dollar", code: "BZD", symbol: "BZ$" }, { name: "Canadian Dollar", code: "CAD", symbol: "$" }, { name: "Congolese Franc", code: "CDF", symbol: "" }, { name: "Swiss Franc", code: "CHF", symbol: "CHF" }, { name: "Chilean Peso", code: "CLP", symbol: "$" }, { name: "Yuan Renminbi", code: "CNY", symbol: "¥" }, { name: "Colombian Peso", code: "COP", symbol: "$" }, { name: "Costa Rican Colon", code: "CRC", symbol: "₡" }, { name: "Cuban Peso", code: "CUP", symbol: "₱" }, { name: "Cape Verde Escudo", code: "CVE", symbol: "" }, { name: "Czech Koruna", code: "CZK", symbol: "Kč" }, { name: "Djibouti Franc", code: "DJF", symbol: "" }, { name: "Danish Krone", code: "DKK", symbol: "kr" }, { name: "Dominican Peso", code: "DOP", symbol: "RD$" }, { name: "Algerian Dinar", code: "DZD", symbol: "" }, { name: "Egyptian Pound", code: "EGP", symbol: "£" }, { name: "Nakfa", code: "ERN", symbol: "" }, { name: "Ethiopian Birr", code: "ETB", symbol: "" }, { name: "Euro", code: "EUR", symbol: "€" }, { name: "Fiji Dollar", code: "FJD", symbol: "$" }, { name: "Falkland Islands Pound", code: "FKP", symbol: "£" }, { name: "Pound Sterling", code: "GBP", symbol: "£" }, { name: "Lari", code: "GEL", symbol: "" }, { name: "Cedi", code: "GHS", symbol: "" }, { name: "Gibraltar Pound", code: "GIP", symbol: "£" }, { name: "Dalasi", code: "GMD", symbol: "" }, { name: "Guinea Franc", code: "GNF", symbol: "" }, { name: "Quetzal", code: "GTQ", symbol: "Q" }, { name: "Guyana Dollar", code: "GYD", symbol: "$" }, { name: "Hong Kong Dollar", code: "HKD", symbol: "$" }, { name: "Lempira", code: "HNL", symbol: "L" }, { name: "Gourde", code: "HTG", symbol: "" }, { name: "Forint", code: "HUF", symbol: "Ft" }, { name: "Rupiah", code: "IDR", symbol: "Rp" }, { name: "New Israeli Sheqel", code: "ILS", symbol: "₪" }, { name: "Bhutanese Ngultrum", code: "BTN", symbol: "Nu" }, { name: "Indian Rupee", code: "INR", symbol: "₹" }, { name: "Iraqi Dinar", code: "IQD", symbol: "" }, { name: "Iranian Rial", code: "IRR", symbol: "﷼" }, { name: "Iceland Krona", code: "ISK", symbol: "kr" }, { name: "Jamaican Dollar", code: "JMD", symbol: "J$" }, { name: "Jordanian Dinar", code: "JOD", symbol: "" }, { name: "Yen", code: "JPY", symbol: "¥" }, { name: "Kenyan Shilling", code: "KES", symbol: "" }, { name: "Som", code: "KGS", symbol: "лв" }, { name: "Riel", code: "KHR", symbol: "៛" }, { name: "Comoro Franc", code: "KMF", symbol: "" }, { name: "North Korean Won", code: "KPW", symbol: "₩" }, { name: "Won", code: "KRW", symbol: "₩" }, { name: "Kuwaiti Dinar", code: "KWD", symbol: "" }, { name: "Cayman Islands Dollar", code: "KYD", symbol: "$" }, { name: "Tenge", code: "KZT", symbol: "лв" }, { name: "Kip", code: "LAK", symbol: "₭" }, { name: "Lebanese Pound", code: "LBP", symbol: "£" }, { name: "Sri Lanka Rupee", code: "LKR", symbol: "₨" }, { name: "Liberian Dollar", code: "LRD", symbol: "$" }, { name: "Libyan Dinar", code: "LYD", symbol: "" }, { name: "Moroccan Dirham", code: "MAD", symbol: "" }, { name: "Moldovan Leu", code: "MDL", symbol: "" }, { name: "Malagasy Ariary", code: "MGA", symbol: "" }, { name: "Denar", code: "MKD", symbol: "ден" }, { name: "Kyat", code: "MMK", symbol: "" }, { name: "Tugrik", code: "MNT", symbol: "₮" }, { name: "Pataca", code: "MOP", symbol: "" }, { name: "Ouguiya", code: "MRU", symbol: "" }, { name: "Mauritius Rupee", code: "MUR", symbol: "₨" }, { name: "Rufiyaa", code: "MVR", symbol: "" }, { name: "Kwacha", code: "MWK", symbol: "" }, { name: "Mexican Peso", code: "MXN", symbol: "$" }, { name: "Malaysian Ringgit", code: "MYR", symbol: "RM" }, { name: "Metical", code: "MZN", symbol: "MT" }, { name: "Naira", code: "NGN", symbol: "₦" }, { name: "Cordoba Oro", code: "NIO", symbol: "C$" }, { name: "Norwegian Krone", code: "NOK", symbol: "kr" }, { name: "Nepalese Rupee", code: "NPR", symbol: "₨" }, { name: "New Zealand Dollar", code: "NZD", symbol: "$" }, { name: "Rial Omani", code: "OMR", symbol: "﷼" }, { name: "Balboa", code: "PAB", symbol: "B/." }, { name: "Nuevo Sol", code: "PEN", symbol: "S/." }, { name: "Kina", code: "PGK", symbol: "" }, { name: "Philippine Peso", code: "PHP", symbol: "Php" }, { name: "Pakistan Rupee", code: "PKR", symbol: "₨" }, { name: "Zloty", code: "PLN", symbol: "zł" }, { name: "Guarani", code: "PYG", symbol: "Gs" }, { name: "Qatari Rial", code: "QAR", symbol: "﷼" }, { name: "New Leu", code: "RON", symbol: "lei" }, { name: "Serbian Dinar", code: "RSD", symbol: "Дин." }, { name: "Russian Ruble", code: "RUB", symbol: "руб" }, { name: "Rwanda Franc", code: "RWF", symbol: "" }, { name: "Saudi Riyal", code: "SAR", symbol: "﷼" }, { name: "Solomon Islands Dollar", code: "SBD", symbol: "$" }, { name: "Seychelles Rupee", code: "SCR", symbol: "₨" }, { name: "Sudanese Pound", code: "SDG", symbol: "" }, { name: "Swedish Krona", code: "SEK", symbol: "kr" }, { name: "Singapore Dollar", code: "SGD", symbol: "$" }, { name: "Saint Helena Pound", code: "SHP", symbol: "£" }, { name: "Leone", code: "SLE", symbol: "" }, { name: "Somali Shilling", code: "SOS", symbol: "S" }, { name: "Surinam Dollar", code: "SRD", symbol: "$" }, { name: "South Sudanese pound", code: "SSP", symbol: "" }, { name: "Dobra", code: "STN", symbol: "Db" }, { name: "Syrian Pound", code: "SYP", symbol: "£" }, { name: "Lilangeni", code: "SZL", symbol: "" }, { name: "Baht", code: "THB", symbol: "฿" }, { name: "Somoni", code: "TJS", symbol: "" }, { name: "Manat", code: "TMT", symbol: "" }, { name: "Tunisian Dinar", code: "TND", symbol: "" }, { name: "Pa'anga", code: "TOP", symbol: "" }, { name: "Turkish Lira", code: "TRY", symbol: "₺" }, { name: "Trinidad and Tobago Dollar", code: "TTD", symbol: "TT$" }, { name: "New Taiwan Dollar", code: "TWD", symbol: "NT$" }, { name: "Tanzanian Shilling", code: "TZS", symbol: "" }, { name: "Hryvnia", code: "UAH", symbol: "₴" }, { name: "Uganda Shilling", code: "UGX", symbol: "" }, { name: "US Dollar", code: "USD", symbol: "$" }, { name: "Peso Uruguayo", code: "UYU", symbol: "$U" }, { name: "Uzbekistan Sum", code: "UZS", symbol: "лв" }, { name: "Venezuelan bolívar", code: "VES", symbol: "Bs" }, { name: "Dong", code: "VND", symbol: "₫" }, { name: "Vatu", code: "VUV", symbol: "" }, { name: "Tala", code: "WST", symbol: "" }, { name: "CFA Franc BEAC", code: "XAF", symbol: "" }, { name: "East Caribbean Dollar", code: "XCD", symbol: "$" }, { name: "CFA Franc BCEAO", code: "XOF", symbol: "" }, { name: "CFP Franc", code: "XPF", symbol: "" }, { name: "Yemeni Rial", code: "YER", symbol: "﷼" }, { name: "Rand", code: "ZAR", symbol: "R" }, { name: "Lesotho Loti", code: "LSL", symbol: "" }, { name: "Namibia Dollar", code: "NAD", symbol: "N$" }, { name: "Zambian Kwacha", code: "ZMW", symbol: "K" }, { name: "Zimbabwe Dollar", code: "ZWL", symbol: "" }];
var oe = ["deposit", "withdrawal", "payment", "invoice"];
var Ka = { account_type: U, credit_card: re, currency: ie, transaction_type: oe };
var ne = Ka;
var te = ["auxiliary", "primary", "back-end", "digital", "open-source", "virtual", "cross-platform", "redundant", "online", "haptic", "multi-byte", "bluetooth", "wireless", "1080p", "neural", "optical", "solid state", "mobile"];
var le = ["backing up", "bypassing", "hacking", "overriding", "compressing", "copying", "navigating", "indexing", "connecting", "generating", "quantifying", "calculating", "synthesizing", "transmitting", "programming", "parsing"];
var se = ["driver", "protocol", "bandwidth", "panel", "microchip", "program", "port", "card", "array", "interface", "system", "sensor", "firewall", "hard drive", "pixel", "alarm", "feed", "monitor", "application", "transmitter", "bus", "circuit", "capacitor", "matrix"];
var de = ["If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!", "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!", "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!", "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!", "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!", "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"];
var ce = ["back up", "bypass", "hack", "override", "compress", "copy", "navigate", "index", "connect", "generate", "quantify", "calculate", "synthesize", "input", "transmit", "program", "reboot", "parse"];
var Ia = { adjective: te, ingverb: le, noun: se, phrase: de, verb: ce };
var ue = Ia;
var me = ["com", "biz", "info", "name", "net", "org"];
var he = ["example.org", "example.com", "example.net"];
var pe = ["gmail.com", "yahoo.com", "hotmail.com"];
var Oa = { domain_suffix: me, example_email: he, free_email: pe };
var ge = Oa;
var ye = ["#####", "####", "###"];
var be = ["Abilene", "Akron", "Alafaya", "Alameda", "Albany", "Albuquerque", "Alexandria", "Alhambra", "Aliso Viejo", "Allen", "Allentown", "Aloha", "Alpharetta", "Altadena", "Altamonte Springs", "Altoona", "Amarillo", "Ames", "Anaheim", "Anchorage", "Anderson", "Ankeny", "Ann Arbor", "Annandale", "Antelope", "Antioch", "Apex", "Apopka", "Apple Valley", "Appleton", "Arcadia", "Arden-Arcade", "Arecibo", "Arlington", "Arlington Heights", "Arvada", "Ashburn", "Asheville", "Aspen Hill", "Atascocita", "Athens-Clarke County", "Atlanta", "Attleboro", "Auburn", "Augusta-Richmond County", "Aurora", "Austin", "Avondale", "Azusa", "Bakersfield", "Baldwin Park", "Baltimore", "Barnstable Town", "Bartlett", "Baton Rouge", "Battle Creek", "Bayamon", "Bayonne", "Baytown", "Beaumont", "Beavercreek", "Beaverton", "Bedford", "Bel Air South", "Bell Gardens", "Belleville", "Bellevue", "Bellflower", "Bellingham", "Bend", "Bentonville", "Berkeley", "Berwyn", "Bethesda", "Bethlehem", "Billings", "Biloxi", "Binghamton", "Birmingham", "Bismarck", "Blacksburg", "Blaine", "Bloomington", "Blue Springs", "Boca Raton", "Boise City", "Bolingbrook", "Bonita Springs", "Bossier City", "Boston", "Bothell", "Boulder", "Bountiful", "Bowie", "Bowling Green", "Boynton Beach", "Bozeman", "Bradenton", "Brandon", "Brentwood", "Bridgeport", "Bristol", "Brockton", "Broken Arrow", "Brookhaven", "Brookline", "Brooklyn Park", "Broomfield", "Brownsville", "Bryan", "Buckeye", "Buena Park", "Buffalo", "Buffalo Grove", "Burbank", "Burien", "Burke", "Burleson", "Burlington", "Burnsville", "Caguas", "Caldwell", "Camarillo", "Cambridge", "Camden", "Canton", "Cape Coral", "Carlsbad", "Carmel", "Carmichael", "Carolina", "Carrollton", "Carson", "Carson City", "Cary", "Casa Grande", "Casas Adobes", "Casper", "Castle Rock", "Castro Valley", "Catalina Foothills", "Cathedral City", "Catonsville", "Cedar Hill", "Cedar Park", "Cedar Rapids", "Centennial", "Centreville", "Ceres", "Cerritos", "Champaign", "Chandler", "Chapel Hill", "Charleston", "Charlotte", "Charlottesville", "Chattanooga", "Cheektowaga", "Chesapeake", "Chesterfield", "Cheyenne", "Chicago", "Chico", "Chicopee", "Chino", "Chino Hills", "Chula Vista", "Cicero", "Cincinnati", "Citrus Heights", "Clarksville", "Clearwater", "Cleveland", "Cleveland Heights", "Clifton", "Clovis", "Coachella", "Coconut Creek", "Coeur d'Alene", "College Station", "Collierville", "Colorado Springs", "Colton", "Columbia", "Columbus", "Commerce City", "Compton", "Concord", "Conroe", "Conway", "Coon Rapids", "Coral Gables", "Coral Springs", "Corona", "Corpus Christi", "Corvallis", "Costa Mesa", "Council Bluffs", "Country Club", "Covina", "Cranston", "Cupertino", "Cutler Bay", "Cuyahoga Falls", "Cypress", "Dale City", "Dallas", "Daly City", "Danbury", "Danville", "Davenport", "Davie", "Davis", "Dayton", "Daytona Beach", "DeKalb", "DeSoto", "Dearborn", "Dearborn Heights", "Decatur", "Deerfield Beach", "Delano", "Delray Beach", "Deltona", "Denton", "Denver", "Des Moines", "Des Plaines", "Detroit", "Diamond Bar", "Doral", "Dothan", "Downers Grove", "Downey", "Draper", "Dublin", "Dubuque", "Duluth", "Dundalk", "Dunwoody", "Durham", "Eagan", "East Hartford", "East Honolulu", "East Lansing", "East Los Angeles", "East Orange", "East Providence", "Eastvale", "Eau Claire", "Eden Prairie", "Edina", "Edinburg", "Edmond", "El Cajon", "El Centro", "El Dorado Hills", "El Monte", "El Paso", "Elgin", "Elizabeth", "Elk Grove", "Elkhart", "Ellicott City", "Elmhurst", "Elyria", "Encinitas", "Enid", "Enterprise", "Erie", "Escondido", "Euclid", "Eugene", "Euless", "Evanston", "Evansville", "Everett", "Fairfield", "Fall River", "Fargo", "Farmington", "Farmington Hills", "Fayetteville", "Federal Way", "Findlay", "Fishers", "Flagstaff", "Flint", "Florence-Graham", "Florin", "Florissant", "Flower Mound", "Folsom", "Fond du Lac", "Fontana", "Fort Collins", "Fort Lauderdale", "Fort Myers", "Fort Pierce", "Fort Smith", "Fort Wayne", "Fort Worth", "Fountain Valley", "Fountainebleau", "Framingham", "Franklin", "Frederick", "Freeport", "Fremont", "Fresno", "Frisco", "Fullerton", "Gainesville", "Gaithersburg", "Galveston", "Garden Grove", "Gardena", "Garland", "Gary", "Gastonia", "Georgetown", "Germantown", "Gilbert", "Gilroy", "Glen Burnie", "Glendale", "Glendora", "Glenview", "Goodyear", "Grand Forks", "Grand Island", "Grand Junction", "Grand Prairie", "Grand Rapids", "Grapevine", "Great Falls", "Greeley", "Green Bay", "Greensboro", "Greenville", "Greenwood", "Gresham", "Guaynabo", "Gulfport", "Hacienda Heights", "Hackensack", "Haltom City", "Hamilton", "Hammond", "Hampton", "Hanford", "Harlingen", "Harrisburg", "Harrisonburg", "Hartford", "Hattiesburg", "Haverhill", "Hawthorne", "Hayward", "Hemet", "Hempstead", "Henderson", "Hendersonville", "Hesperia", "Hialeah", "Hicksville", "High Point", "Highland", "Highlands Ranch", "Hillsboro", "Hilo", "Hoboken", "Hoffman Estates", "Hollywood", "Homestead", "Honolulu", "Hoover", "Houston", "Huntersville", "Huntington", "Huntington Beach", "Huntington Park", "Huntsville", "Hutchinson", "Idaho Falls", "Independence", "Indianapolis", "Indio", "Inglewood", "Iowa City", "Irondequoit", "Irvine", "Irving", "Jackson", "Jacksonville", "Janesville", "Jefferson City", "Jeffersonville", "Jersey City", "Johns Creek", "Johnson City", "Joliet", "Jonesboro", "Joplin", "Jupiter", "Jurupa Valley", "Kalamazoo", "Kannapolis", "Kansas City", "Kearny", "Keller", "Kendale Lakes", "Kendall", "Kenner", "Kennewick", "Kenosha", "Kent", "Kentwood", "Kettering", "Killeen", "Kingsport", "Kirkland", "Kissimmee", "Knoxville", "Kokomo", "La Crosse", "La Habra", "La Mesa", "La Mirada", "Lacey", "Lafayette", "Laguna Niguel", "Lake Charles", "Lake Elsinore", "Lake Forest", "Lake Havasu City", "Lake Ridge", "Lakeland", "Lakeville", "Lakewood", "Lancaster", "Lansing", "Laredo", "Largo", "Las Cruces", "Las Vegas", "Lauderhill", "Lawrence", "Lawton", "Layton", "League City", "Lee's Summit", "Leesburg", "Lehi", "Lehigh Acres", "Lenexa", "Levittown", "Lewisville", "Lexington-Fayette", "Lincoln", "Linden", "Little Rock", "Littleton", "Livermore", "Livonia", "Lodi", "Logan", "Lombard", "Lompoc", "Long Beach", "Longmont", "Longview", "Lorain", "Los Angeles", "Louisville/Jefferson County", "Loveland", "Lowell", "Lubbock", "Lynchburg", "Lynn", "Lynwood", "Macon-Bibb County", "Madera", "Madison", "Malden", "Manchester", "Manhattan", "Mansfield", "Manteca", "Maple Grove", "Margate", "Maricopa", "Marietta", "Marysville", "Mayaguez", "McAllen", "McKinney", "McLean", "Medford", "Melbourne", "Memphis", "Menifee", "Mentor", "Merced", "Meriden", "Meridian", "Mesa", "Mesquite", "Metairie", "Methuen Town", "Miami", "Miami Beach", "Miami Gardens", "Middletown", "Midland", "Midwest City", "Milford", "Millcreek", "Milpitas", "Milwaukee", "Minneapolis", "Minnetonka", "Minot", "Miramar", "Mishawaka", "Mission", "Mission Viejo", "Missoula", "Missouri City", "Mobile", "Modesto", "Moline", "Monroe", "Montebello", "Monterey Park", "Montgomery", "Moore", "Moreno Valley", "Morgan Hill", "Mount Pleasant", "Mount Prospect", "Mount Vernon", "Mountain View", "Muncie", "Murfreesboro", "Murray", "Murrieta", "Nampa", "Napa", "Naperville", "Nashua", "Nashville-Davidson", "National City", "New Bedford", "New Braunfels", "New Britain", "New Brunswick", "New Haven", "New Orleans", "New Rochelle", "New York", "Newark", "Newport Beach", "Newport News", "Newton", "Niagara Falls", "Noblesville", "Norfolk", "Normal", "Norman", "North Bethesda", "North Charleston", "North Highlands", "North Las Vegas", "North Lauderdale", "North Little Rock", "North Miami", "North Miami Beach", "North Port", "North Richland Hills", "Norwalk", "Novato", "Novi", "O'Fallon", "Oak Lawn", "Oak Park", "Oakland", "Oakland Park", "Ocala", "Oceanside", "Odessa", "Ogden", "Oklahoma City", "Olathe", "Olympia", "Omaha", "Ontario", "Orange", "Orem", "Orland Park", "Orlando", "Oro Valley", "Oshkosh", "Overland Park", "Owensboro", "Oxnard", "Palatine", "Palm Bay", "Palm Beach Gardens", "Palm Coast", "Palm Desert", "Palm Harbor", "Palm Springs", "Palmdale", "Palo Alto", "Paradise", "Paramount", "Parker", "Parma", "Pasadena", "Pasco", "Passaic", "Paterson", "Pawtucket", "Peabody", "Pearl City", "Pearland", "Pembroke Pines", "Pensacola", "Peoria", "Perris", "Perth Amboy", "Petaluma", "Pflugerville", "Pharr", "Philadelphia", "Phoenix", "Pico Rivera", "Pine Bluff", "Pine Hills", "Pinellas Park", "Pittsburg", "Pittsburgh", "Pittsfield", "Placentia", "Plainfield", "Plano", "Plantation", "Pleasanton", "Plymouth", "Pocatello", "Poinciana", "Pomona", "Pompano Beach", "Ponce", "Pontiac", "Port Arthur", "Port Charlotte", "Port Orange", "Port St. Lucie", "Portage", "Porterville", "Portland", "Portsmouth", "Potomac", "Poway", "Providence", "Provo", "Pueblo", "Quincy", "Racine", "Raleigh", "Rancho Cordova", "Rancho Cucamonga", "Rancho Palos Verdes", "Rancho Santa Margarita", "Rapid City", "Reading", "Redding", "Redlands", "Redmond", "Redondo Beach", "Redwood City", "Reno", "Renton", "Reston", "Revere", "Rialto", "Richardson", "Richland", "Richmond", "Rio Rancho", "Riverside", "Riverton", "Riverview", "Roanoke", "Rochester", "Rochester Hills", "Rock Hill", "Rockford", "Rocklin", "Rockville", "Rockwall", "Rocky Mount", "Rogers", "Rohnert Park", "Rosemead", "Roseville", "Roswell", "Round Rock", "Rowland Heights", "Rowlett", "Royal Oak", "Sacramento", "Saginaw", "Salem", "Salina", "Salinas", "Salt Lake City", "Sammamish", "San Angelo", "San Antonio", "San Bernardino", "San Bruno", "San Buenaventura (Ventura)", "San Clemente", "San Diego", "San Francisco", "San Jacinto", "San Jose", "San Juan", "San Leandro", "San Luis Obispo", "San Marcos", "San Mateo", "San Rafael", "San Ramon", "San Tan Valley", "Sandy", "Sandy Springs", "Sanford", "Santa Ana", "Santa Barbara", "Santa Clara", "Santa Clarita", "Santa Cruz", "Santa Fe", "Santa Maria", "Santa Monica", "Santa Rosa", "Santee", "Sarasota", "Savannah", "Sayreville", "Schaumburg", "Schenectady", "Scottsdale", "Scranton", "Seattle", "Severn", "Shawnee", "Sheboygan", "Shoreline", "Shreveport", "Sierra Vista", "Silver Spring", "Simi Valley", "Sioux City", "Sioux Falls", "Skokie", "Smyrna", "Somerville", "South Bend", "South Gate", "South Hill", "South Jordan", "South San Francisco", "South Valley", "South Whittier", "Southaven", "Southfield", "Sparks", "Spokane", "Spokane Valley", "Spring", "Spring Hill", "Spring Valley", "Springdale", "Springfield", "St. Charles", "St. Clair Shores", "St. Cloud", "St. George", "St. Joseph", "St. Louis", "St. Louis Park", "St. Paul", "St. Peters", "St. Petersburg", "Stamford", "State College", "Sterling Heights", "Stillwater", "Stockton", "Stratford", "Strongsville", "Suffolk", "Sugar Land", "Summerville", "Sunnyvale", "Sunrise", "Sunrise Manor", "Surprise", "Syracuse", "Tacoma", "Tallahassee", "Tamarac", "Tamiami", "Tampa", "Taunton", "Taylor", "Taylorsville", "Temecula", "Tempe", "Temple", "Terre Haute", "Texas City", "The Hammocks", "The Villages", "The Woodlands", "Thornton", "Thousand Oaks", "Tigard", "Tinley Park", "Titusville", "Toledo", "Toms River", "Tonawanda", "Topeka", "Torrance", "Town 'n' Country", "Towson", "Tracy", "Trenton", "Troy", "Trujillo Alto", "Tuckahoe", "Tucson", "Tulare", "Tulsa", "Turlock", "Tuscaloosa", "Tustin", "Twin Falls", "Tyler", "Union City", "University", "Upland", "Urbana", "Urbandale", "Utica", "Vacaville", "Valdosta", "Vallejo", "Vancouver", "Victoria", "Victorville", "Vineland", "Virginia Beach", "Visalia", "Vista", "Waco", "Waipahu", "Waldorf", "Walnut Creek", "Waltham", "Warner Robins", "Warren", "Warwick", "Washington", "Waterbury", "Waterloo", "Watsonville", "Waukegan", "Waukesha", "Wauwatosa", "Wellington", "Wesley Chapel", "West Allis", "West Babylon", "West Covina", "West Des Moines", "West Hartford", "West Haven", "West Jordan", "West Lafayette", "West New York", "West Palm Beach", "West Sacramento", "West Seneca", "West Valley City", "Westfield", "Westland", "Westminster", "Weston", "Weymouth Town", "Wheaton", "White Plains", "Whittier", "Wichita", "Wichita Falls", "Wilmington", "Wilson", "Winston-Salem", "Woodbury", "Woodland", "Worcester", "Wylie", "Wyoming", "Yakima", "Yonkers", "Yorba Linda", "York", "Youngstown", "Yuba City", "Yucaipa", "Yuma"];
var fe = ["{{location.city_prefix}} {{person.first_name}}{{location.city_suffix}}", "{{location.city_prefix}} {{person.first_name}}", "{{person.first_name}}{{location.city_suffix}}", "{{person.last_name}}{{location.city_suffix}}", "{{location.city_name}}"];
var ke = ["North", "East", "West", "South", "New", "Lake", "Port", "Fort"];
var ve = ["town", "ton", "land", "ville", "berg", "burgh", "boro", "borough", "bury", "view", "port", "mouth", "stad", "stead", "furt", "chester", "cester", "fort", "field", "haven", "side", "shire", "worth"];
var we = ["Afghanistan", "Aland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire, Sint Eustatius and Saba", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory (Chagos Archipelago)", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Curacao", "Cyprus", "Czechia", "Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", "Ethiopia", "Faroe Islands", "Falkland Islands (Malvinas)", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Democratic People's Republic of Korea", "Republic of Korea", "Kuwait", "Kyrgyz Republic", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macao", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Macedonia", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Barthelemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Islands", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard & Jan Mayen Islands", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands, British", "Virgin Islands, U.S.", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"];
var Ce = ["Adams County", "Calhoun County", "Carroll County", "Clark County", "Clay County", "Crawford County", "Douglas County", "Fayette County", "Franklin County", "Grant County", "Greene County", "Hamilton County", "Hancock County", "Henry County", "Jackson County", "Jefferson County", "Johnson County", "Lake County", "Lawrence County", "Lee County", "Lincoln County", "Logan County", "Madison County", "Marion County", "Marshall County", "Monroe County", "Montgomery County", "Morgan County", "Perry County", "Pike County", "Polk County", "Scott County", "Union County", "Warren County", "Washington County", "Wayne County", "Avon", "Bedfordshire", "Berkshire", "Borders", "Buckinghamshire", "Cambridgeshire", "Central", "Cheshire", "Cleveland", "Clwyd", "Cornwall", "County Antrim", "County Armagh", "County Down", "County Fermanagh", "County Londonderry", "County Tyrone", "Cumbria", "Derbyshire", "Devon", "Dorset", "Dumfries and Galloway", "Durham", "Dyfed", "East Sussex", "Essex", "Fife", "Gloucestershire", "Grampian", "Greater Manchester", "Gwent", "Gwynedd County", "Hampshire", "Herefordshire", "Hertfordshire", "Highlands and Islands", "Humberside", "Isle of Wight", "Kent", "Lancashire", "Leicestershire", "Lincolnshire", "Lothian", "Merseyside", "Mid Glamorgan", "Norfolk", "North Yorkshire", "Northamptonshire", "Northumberland", "Nottinghamshire", "Oxfordshire", "Powys", "Rutland", "Shropshire", "Somerset", "South Glamorgan", "South Yorkshire", "Staffordshire", "Strathclyde", "Suffolk", "Surrey", "Tayside", "Tyne and Wear", "Warwickshire", "West Glamorgan", "West Midlands", "West Sussex", "West Yorkshire", "Wiltshire", "Worcestershire"];
var Se = ["United States of America"];
var Ae = ["North", "East", "South", "West", "Northeast", "Northwest", "Southeast", "Southwest"];
var Be = ["N", "E", "S", "W", "NE", "NW", "SE", "SW"];
var Me = ["#####", "#####-####"];
var Te = ["Apt. ###", "Suite ###"];
var Le = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"];
var Re = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"];
var De = { normal: "{{location.buildingNumber}} {{location.street}}", full: "{{location.buildingNumber}} {{location.street}} {{location.secondaryAddress}}" };
var He = ["10th Street", "11th Street", "12th Street", "13th Street", "14th Street", "15th Street", "16th Street", "1st Avenue", "1st Street", "2nd Avenue", "2nd Street", "3rd Avenue", "3rd Street", "4th Avenue", "4th Street", "5th Avenue", "5th Street", "6th Avenue", "6th Street", "7th Avenue", "7th Street", "8th Avenue", "8th Street", "9th Street", "A Street", "Abbey Road", "Adams Avenue", "Adams Street", "Airport Road", "Albany Road", "Albert Road", "Albion Street", "Alexandra Road", "Alfred Street", "Alma Street", "Ash Close", "Ash Grove", "Ash Road", "Ash Street", "Aspen Close", "Atlantic Avenue", "Avenue Road", "Back Lane", "Baker Street", "Balmoral Road", "Barn Close", "Barton Road", "Bath Road", "Bath Street", "Bay Street", "Beach Road", "Bedford Road", "Beech Close", "Beech Drive", "Beech Grove", "Beech Road", "Beechwood Avenue", "Bell Lane", "Belmont Road", "Birch Avenue", "Birch Close", "Birch Grove", "Birch Road", "Blind Lane", "Bluebell Close", "Boundary Road", "Bramble Close", "Bramley Close", "Bridge Road", "Bridge Street", "Broad Lane", "Broad Street", "Broadway", "Broadway Avenue", "Broadway Street", "Brook Lane", "Brook Road", "Brook Street", "Brookside", "Buckingham Road", "Cambridge Street", "Canal Street", "Castle Close", "Castle Lane", "Castle Road", "Castle Street", "Cavendish Road", "Cedar Avenue", "Cedar Close", "Cedar Grove", "Cedar Road", "Cedar Street", "Cemetery Road", "Center Avenue", "Center Road", "Center Street", "Central Avenue", "Central Street", "Chapel Close", "Chapel Hill", "Chapel Road", "Chapel Street", "Charles Street", "Cherry Close", "Cherry Street", "Cherry Tree Close", "Chester Road", "Chestnut Close", "Chestnut Drive", "Chestnut Grove", "Chestnut Street", "Church Avenue", "Church Close", "Church Hill", "Church Lane", "Church Path", "Church Road", "Church Street", "Church View", "Church Walk", "Claremont Road", "Clarence Road", "Clarence Street", "Clarendon Road", "Clark Street", "Clay Lane", "Cleveland Street", "Cliff Road", "Clifton Road", "Clinton Street", "College Avenue", "College Street", "Columbia Avenue", "Commerce Street", "Commercial Road", "Commercial Street", "Common Lane", "Coronation Avenue", "Coronation Road", "County Line Road", "County Road", "Court Street", "Cow Lane", "Crescent Road", "Cromwell Road", "Cross Lane", "Cross Street", "Crown Street", "Cumberland Street", "Dale Street", "Dark Lane", "Davis Street", "Depot Street", "Derby Road", "Derwent Close", "Devonshire Road", "Division Street", "Douglas Road", "Duke Street", "E 10th Street", "E 11th Street", "E 12th Street", "E 14th Street", "E 1st Street", "E 2nd Street", "E 3rd Street", "E 4th Avenue", "E 4th Street", "E 5th Street", "E 6th Avenue", "E 6th Street", "E 7th Street", "E 8th Street", "E 9th Street", "E Bridge Street", "E Broad Street", "E Broadway", "E Broadway Street", "E Cedar Street", "E Center Street", "E Central Avenue", "E Church Street", "E Elm Street", "E Franklin Street", "E Front Street", "E Grand Avenue", "E High Street", "E Jackson Street", "E Jefferson Street", "E Main", "E Main Street", "E Maple Street", "E Market Street", "E North Street", "E Oak Street", "E Park Avenue", "E Pine Street", "E River Road", "E South Street", "E State Street", "E Union Street", "E Walnut Street", "E Washington Avenue", "E Washington Street", "E Water Street", "East Avenue", "East Road", "East Street", "Edward Street", "Elm Close", "Elm Grove", "Elm Road", "Elm Street", "Euclid Avenue", "Fairfield Road", "Farm Close", "Ferry Road", "Field Close", "Field Lane", "First Avenue", "First Street", "Fore Street", "Forest Avenue", "Forest Road", "Fourth Avenue", "Franklin Avenue", "Franklin Road", "Franklin Street", "Front Street", "Frontage Road", "Garden Close", "Garden Street", "George Street", "Gladstone Road", "Glebe Close", "Gloucester Road", "Gordon Road", "Gordon Street", "Grand Avenue", "Grange Avenue", "Grange Close", "Grange Road", "Grant Street", "Green Close", "Green Lane", "Green Street", "Greenville Road", "Greenway", "Greenwood Road", "Grove Lane", "Grove Road", "Grove Street", "Hall Lane", "Hall Street", "Harrison Avenue", "Harrison Street", "Hawthorn Avenue", "Hawthorn Close", "Hazel Close", "Hazel Grove", "Heath Road", "Heather Close", "Henry Street", "Heron Close", "Hickory Street", "High Road", "High Street", "Highfield Avenue", "Highfield Close", "Highfield Road", "Highland Avenue", "Hill Road", "Hill Street", "Hillside", "Hillside Avenue", "Hillside Close", "Hillside Road", "Holly Close", "Honeysuckle Close", "Howard Road", "Howard Street", "Jackson Avenue", "Jackson Street", "James Street", "Jefferson Avenue", "Jefferson Street", "Johnson Street", "Jubilee Close", "Juniper Close", "Kent Road", "Kestrel Close", "King Street", "King's Road", "Kingfisher Close", "Kings Highway", "Kingsway", "Laburnum Grove", "Lafayette Street", "Lake Avenue", "Lake Drive", "Lake Road", "Lake Street", "Lancaster Road", "Lansdowne Road", "Larch Close", "Laurel Close", "Lawrence Street", "Lee Street", "Liberty Street", "Lime Grove", "Lincoln Avenue", "Lincoln Highway", "Lincoln Road", "Lincoln Street", "Locust Street", "Lodge Close", "Lodge Lane", "London Road", "Long Lane", "Low Road", "Madison Avenue", "Madison Street", "Main", "Main Avenue", "Main Road", "Main Street", "Main Street E", "Main Street N", "Main Street S", "Main Street W", "Manchester Road", "Manor Close", "Manor Drive", "Manor Gardens", "Manor Road", "Manor Way", "Maple Avenue", "Maple Close", "Maple Drive", "Maple Road", "Maple Street", "Market Place", "Market Square", "Market Street", "Marlborough Road", "Marsh Lane", "Martin Luther King Boulevard", "Martin Luther King Drive", "Martin Luther King Jr Boulevard", "Mary Street", "Mayfield Road", "Meadow Close", "Meadow Drive", "Meadow Lane", "Meadow View", "Meadow Way", "Memorial Drive", "Middle Street", "Mill Close", "Mill Lane", "Mill Road", "Mill Street", "Milton Road", "Milton Street", "Monroe Street", "Moor Lane", "Moss Lane", "Mount Pleasant", "Mount Street", "Mulberry Street", "N 1st Street", "N 2nd Street", "N 3rd Street", "N 4th Street", "N 5th Street", "N 6th Street", "N 7th Street", "N 8th Street", "N 9th Street", "N Bridge Street", "N Broad Street", "N Broadway", "N Broadway Street", "N Cedar Street", "N Center Street", "N Central Avenue", "N Chestnut Street", "N Church Street", "N College Street", "N Court Street", "N Division Street", "N East Street", "N Elm Street", "N Franklin Street", "N Front Street", "N Harrison Street", "N High Street", "N Jackson Street", "N Jefferson Street", "N Lincoln Street", "N Locust Street", "N Main", "N Main Avenue", "N Main Street", "N Maple Street", "N Market Street", "N Monroe Street", "N Oak Street", "N Park Street", "N Pearl Street", "N Pine Street", "N Poplar Street", "N Railroad Street", "N State Street", "N Union Street", "N Walnut Street", "N Washington Avenue", "N Washington Street", "N Water Street", "Nelson Road", "Nelson Street", "New Lane", "New Road", "New Street", "Newton Road", "Nightingale Close", "Norfolk Road", "North Avenue", "North Lane", "North Road", "North Street", "Northfield Road", "Oak Avenue", "Oak Drive", "Oak Lane", "Oak Road", "Oak Street", "Oakfield Road", "Oaklands", "Old Lane", "Old Military Road", "Old Road", "Old State Road", "Orchard Drive", "Orchard Lane", "Orchard Road", "Orchard Street", "Oxford Road", "Oxford Street", "Park Avenue", "Park Crescent", "Park Drive", "Park Lane", "Park Place", "Park Road", "Park Street", "Park View", "Parkside", "Pearl Street", "Pennsylvania Avenue", "Pine Close", "Pine Grove", "Pine Street", "Pinfold Lane", "Pleasant Street", "Poplar Avenue", "Poplar Close", "Poplar Road", "Poplar Street", "Post Road", "Pound Lane", "Princes Street", "Princess Street", "Priory Close", "Priory Road", "Prospect Avenue", "Prospect Place", "Prospect Road", "Prospect Street", "Quarry Lane", "Quarry Road", "Queen's Road", "Railroad Avenue", "Railroad Street", "Railway Street", "Rectory Close", "Rectory Lane", "Richmond Close", "Richmond Road", "Ridge Road", "River Road", "River Street", "Riverside", "Riverside Avenue", "Riverside Drive", "Roman Road", "Roman Way", "Rowan Close", "Russell Street", "S 10th Street", "S 14th Street", "S 1st Avenue", "S 1st Street", "S 2nd Street", "S 3rd Street", "S 4th Street", "S 5th Street", "S 6th Street", "S 7th Street", "S 8th Street", "S 9th Street", "S Bridge Street", "S Broad Street", "S Broadway", "S Broadway Street", "S Center Street", "S Central Avenue", "S Chestnut Street", "S Church Street", "S College Street", "S Division Street", "S East Street", "S Elm Street", "S Franklin Street", "S Front Street", "S Grand Avenue", "S High Street", "S Jackson Street", "S Jefferson Street", "S Lincoln Street", "S Main", "S Main Avenue", "S Main Street", "S Maple Street", "S Market Street", "S Mill Street", "S Monroe Street", "S Oak Street", "S Park Street", "S Pine Street", "S Railroad Street", "S State Street", "S Union Street", "S Walnut Street", "S Washington Avenue", "S Washington Street", "S Water Street", "S West Street", "Salisbury Road", "Sandringham Road", "Sandy Lane", "School Close", "School Lane", "School Road", "School Street", "Second Avenue", "Silver Street", "Skyline Drive", "Smith Street", "Somerset Road", "South Avenue", "South Drive", "South Road", "South Street", "South View", "Spring Gardens", "Spring Street", "Springfield Close", "Springfield Road", "Spruce Street", "St Andrew's Road", "St Andrews Close", "St George's Road", "St John's Road", "St Mary's Close", "St Mary's Road", "Stanley Road", "Stanley Street", "State Avenue", "State Line Road", "State Road", "State Street", "Station Road", "Station Street", "Stoney Lane", "Sycamore Avenue", "Sycamore Close", "Sycamore Drive", "Sycamore Street", "Talbot Road", "Tennyson Road", "The Avenue", "The Beeches", "The Causeway", "The Chase", "The Coppice", "The Copse", "The Crescent", "The Croft", "The Dell", "The Drive", "The Fairway", "The Glebe", "The Grange", "The Green", "The Grove", "The Hawthorns", "The Lane", "The Laurels", "The Limes", "The Maltings", "The Meadows", "The Mews", "The Mount", "The Oaks", "The Orchard", "The Oval", "The Paddock", "The Paddocks", "The Poplars", "The Ridgeway", "The Ridings", "The Rise", "The Sidings", "The Spinney", "The Square", "The Willows", "The Woodlands", "Third Avenue", "Third Street", "Tower Road", "Trinity Road", "Tudor Close", "Union Avenue", "Union Street", "University Avenue", "University Drive", "Valley Road", "Veterans Memorial Drive", "Veterans Memorial Highway", "Vicarage Close", "Vicarage Lane", "Vicarage Road", "Victoria Place", "Victoria Road", "Victoria Street", "Vine Street", "W 10th Street", "W 11th Street", "W 12th Street", "W 14th Street", "W 1st Street", "W 2nd Street", "W 3rd Street", "W 4th Avenue", "W 4th Street", "W 5th Street", "W 6th Avenue", "W 6th Street", "W 7th Street", "W 8th Street", "W 9th Street", "W Bridge Street", "W Broad Street", "W Broadway", "W Broadway Avenue", "W Broadway Street", "W Center Street", "W Central Avenue", "W Chestnut Street", "W Church Street", "W Division Street", "W Elm Street", "W Franklin Street", "W Front Street", "W Grand Avenue", "W High Street", "W Jackson Street", "W Jefferson Street", "W Lake Street", "W Main", "W Main Street", "W Maple Street", "W Market Street", "W Monroe Street", "W North Street", "W Oak Street", "W Park Street", "W Pine Street", "W River Road", "W South Street", "W State Street", "W Union Street", "W Walnut Street", "W Washington Avenue", "W Washington Street", "Walnut Close", "Walnut Street", "Warren Close", "Warren Road", "Washington Avenue", "Washington Boulevard", "Washington Road", "Washington Street", "Water Lane", "Water Street", "Waterloo Road", "Waterside", "Watery Lane", "Waverley Road", "Well Lane", "Wellington Road", "Wellington Street", "West Avenue", "West End", "West Lane", "West Road", "West Street", "West View", "Western Avenue", "Western Road", "Westfield Road", "Westgate", "William Street", "Willow Close", "Willow Drive", "Willow Grove", "Willow Road", "Willow Street", "Windermere Road", "Windmill Close", "Windmill Lane", "Windsor Avenue", "Windsor Close", "Windsor Drive", "Wood Lane", "Wood Street", "Woodland Close", "Woodland Road", "Woodlands", "Woodlands Avenue", "Woodlands Close", "Woodlands Road", "Woodside", "Woodside Road", "Wren Close", "Yew Tree Close", "York Road", "York Street"];
var We = ["{{person.first_name}} {{location.street_suffix}}", "{{person.last_name}} {{location.street_suffix}}", "{{location.street_name}}"];
var Ge = ["Alley", "Avenue", "Branch", "Bridge", "Brook", "Brooks", "Burg", "Burgs", "Bypass", "Camp", "Canyon", "Cape", "Causeway", "Center", "Centers", "Circle", "Circles", "Cliff", "Cliffs", "Club", "Common", "Corner", "Corners", "Course", "Court", "Courts", "Cove", "Coves", "Creek", "Crescent", "Crest", "Crossing", "Crossroad", "Curve", "Dale", "Dam", "Divide", "Drive", "Drives", "Estate", "Estates", "Expressway", "Extension", "Extensions", "Fall", "Falls", "Ferry", "Field", "Fields", "Flat", "Flats", "Ford", "Fords", "Forest", "Forge", "Forges", "Fork", "Forks", "Fort", "Freeway", "Garden", "Gardens", "Gateway", "Glen", "Glens", "Green", "Greens", "Grove", "Groves", "Harbor", "Harbors", "Haven", "Heights", "Highway", "Hill", "Hills", "Hollow", "Inlet", "Island", "Islands", "Isle", "Junction", "Junctions", "Key", "Keys", "Knoll", "Knolls", "Lake", "Lakes", "Land", "Landing", "Lane", "Light", "Lights", "Loaf", "Lock", "Locks", "Lodge", "Loop", "Mall", "Manor", "Manors", "Meadow", "Meadows", "Mews", "Mill", "Mills", "Mission", "Motorway", "Mount", "Mountain", "Mountains", "Neck", "Orchard", "Oval", "Overpass", "Park", "Parks", "Parkway", "Parkways", "Pass", "Passage", "Path", "Pike", "Pine", "Pines", "Place", "Plain", "Plains", "Plaza", "Point", "Points", "Port", "Ports", "Prairie", "Radial", "Ramp", "Ranch", "Rapid", "Rapids", "Rest", "Ridge", "Ridges", "River", "Road", "Roads", "Route", "Row", "Rue", "Run", "Shoal", "Shoals", "Shore", "Shores", "Skyway", "Spring", "Springs", "Spur", "Spurs", "Square", "Squares", "Station", "Stravenue", "Stream", "Street", "Streets", "Summit", "Terrace", "Throughway", "Trace", "Track", "Trafficway", "Trail", "Tunnel", "Turnpike", "Underpass", "Union", "Unions", "Valley", "Valleys", "Via", "Viaduct", "View", "Views", "Village", "Villages", "Ville", "Vista", "Walk", "Walks", "Wall", "Way", "Ways", "Well", "Wells"];
var qa = { building_number: ye, city_name: be, city_pattern: fe, city_prefix: ke, city_suffix: ve, country: we, county: Ce, default_country: Se, direction: Ae, direction_abbr: Be, postcode: Me, secondary_address: Te, state: Le, state_abbr: Re, street_address: De, street_name: He, street_pattern: We, street_suffix: Ge };
var Pe = qa;
var ze = ["a", "ab", "abbas", "abduco", "abeo", "abscido", "absconditus", "absens", "absorbeo", "absque", "abstergo", "absum", "abundans", "abutor", "accedo", "accendo", "acceptus", "accommodo", "accusamus", "accusantium", "accusator", "acer", "acerbitas", "acervus", "acidus", "acies", "acquiro", "acsi", "ad", "adamo", "adaugeo", "addo", "adduco", "ademptio", "adeo", "adeptio", "adfectus", "adfero", "adficio", "adflicto", "adhaero", "adhuc", "adicio", "adimpleo", "adinventitias", "adipisci", "adipiscor", "adiuvo", "administratio", "admiratio", "admitto", "admoneo", "admoveo", "adnuo", "adopto", "adsidue", "adstringo", "adsuesco", "adsum", "adulatio", "adulescens", "aduro", "advenio", "adversus", "advoco", "aedificium", "aeger", "aegre", "aegrotatio", "aegrus", "aeneus", "aequitas", "aequus", "aer", "aestas", "aestivus", "aestus", "aetas", "aeternus", "ager", "aggero", "aggredior", "agnitio", "agnosco", "ago", "ait", "aiunt", "alias", "alienus", "alii", "alioqui", "aliqua", "aliquam", "aliquid", "alius", "allatus", "alo", "alter", "altus", "alveus", "amaritudo", "ambitus", "ambulo", "amet", "amicitia", "amiculum", "amissio", "amita", "amitto", "amo", "amor", "amoveo", "amplexus", "amplitudo", "amplus", "ancilla", "angelus", "angulus", "angustus", "animadverto", "animi", "animus", "annus", "anser", "ante", "antea", "antepono", "antiquus", "aperiam", "aperio", "aperte", "apostolus", "apparatus", "appello", "appono", "appositus", "approbo", "apto", "aptus", "apud", "aqua", "ara", "aranea", "arbitro", "arbor", "arbustum", "arca", "arceo", "arcesso", "architecto", "arcus", "argentum", "argumentum", "arguo", "arma", "armarium", "aro", "ars", "articulus", "artificiose", "arto", "arx", "ascisco", "ascit", "asper", "asperiores", "aspernatur", "aspicio", "asporto", "assentator", "assumenda", "astrum", "at", "atavus", "ater", "atque", "atqui", "atrocitas", "atrox", "attero", "attollo", "attonbitus", "auctor", "auctus", "audacia", "audax", "audentia", "audeo", "audio", "auditor", "aufero", "aureus", "aurum", "aut", "autem", "autus", "auxilium", "avaritia", "avarus", "aveho", "averto", "baiulus", "balbus", "barba", "bardus", "basium", "beatae", "beatus", "bellicus", "bellum", "bene", "beneficium", "benevolentia", "benigne", "bestia", "bibo", "bis", "blandior", "blanditiis", "bonus", "bos", "brevis", "cado", "caecus", "caelestis", "caelum", "calamitas", "calcar", "calco", "calculus", "callide", "campana", "candidus", "canis", "canonicus", "canto", "capillus", "capio", "capitulus", "capto", "caput", "carbo", "carcer", "careo", "caries", "cariosus", "caritas", "carmen", "carpo", "carus", "casso", "caste", "casus", "catena", "caterva", "cattus", "cauda", "causa", "caute", "caveo", "cavus", "cedo", "celebrer", "celer", "celo", "cena", "cenaculum", "ceno", "censura", "centum", "cerno", "cernuus", "certe", "certus", "cervus", "cetera", "charisma", "chirographum", "cibo", "cibus", "cicuta", "cilicium", "cimentarius", "ciminatio", "cinis", "circumvenio", "cito", "civis", "civitas", "clam", "clamo", "claro", "clarus", "claudeo", "claustrum", "clementia", "clibanus", "coadunatio", "coaegresco", "coepi", "coerceo", "cogito", "cognatus", "cognomen", "cogo", "cohaero", "cohibeo", "cohors", "colligo", "collum", "colo", "color", "coma", "combibo", "comburo", "comedo", "comes", "cometes", "comis", "comitatus", "commemoro", "comminor", "commodi", "commodo", "communis", "comparo", "compello", "complectus", "compono", "comprehendo", "comptus", "conatus", "concedo", "concido", "conculco", "condico", "conduco", "confero", "confido", "conforto", "confugo", "congregatio", "conicio", "coniecto", "conitor", "coniuratio", "conor", "conqueror", "conscendo", "consectetur", "consequatur", "consequuntur", "conservo", "considero", "conspergo", "constans", "consuasor", "contabesco", "contego", "contigo", "contra", "conturbo", "conventus", "convoco", "copia", "copiose", "cornu", "corona", "corporis", "corpus", "correptius", "corrigo", "corroboro", "corrumpo", "corrupti", "coruscus", "cotidie", "crapula", "cras", "crastinus", "creator", "creber", "crebro", "credo", "creo", "creptio", "crepusculum", "cresco", "creta", "cribro", "crinis", "cruciamentum", "crudelis", "cruentus", "crur", "crustulum", "crux", "cubicularis", "cubitum", "cubo", "cui", "cuius", "culpa", "culpo", "cultellus", "cultura", "cum", "cumque", "cunabula", "cunae", "cunctatio", "cupiditas", "cupiditate", "cupio", "cuppedia", "cupressus", "cur", "cura", "curatio", "curia", "curiositas", "curis", "curo", "curriculum", "currus", "cursim", "curso", "cursus", "curto", "curtus", "curvo", "custodia", "damnatio", "damno", "dapifer", "debeo", "debilito", "debitis", "decens", "decerno", "decet", "decimus", "decipio", "decor", "decretum", "decumbo", "dedecor", "dedico", "deduco", "defaeco", "defendo", "defero", "defessus", "defetiscor", "deficio", "defleo", "defluo", "defungo", "degenero", "degero", "degusto", "deinde", "delectatio", "delectus", "delego", "deleniti", "deleo", "delibero", "delicate", "delinquo", "deludo", "demens", "demergo", "demitto", "demo", "demonstro", "demoror", "demulceo", "demum", "denego", "denique", "dens", "denuncio", "denuo", "deorsum", "depereo", "depono", "depopulo", "deporto", "depraedor", "deprecator", "deprimo", "depromo", "depulso", "deputo", "derelinquo", "derideo", "deripio", "deserunt", "desidero", "desino", "desipio", "desolo", "desparatus", "despecto", "dicta", "dignissimos", "distinctio", "dolor", "dolore", "dolorem", "doloremque", "dolores", "doloribus", "dolorum", "ducimus", "ea", "eaque", "earum", "eius", "eligendi", "enim", "eos", "error", "esse", "est", "et", "eum", "eveniet", "ex", "excepturi", "exercitationem", "expedita", "explicabo", "facere", "facilis", "fuga", "fugiat", "fugit", "harum", "hic", "id", "illo", "illum", "impedit", "in", "incidunt", "infit", "inflammatio", "inventore", "ipsa", "ipsam", "ipsum", "iste", "itaque", "iure", "iusto", "labore", "laboriosam", "laborum", "laudantium", "libero", "magnam", "magni", "maiores", "maxime", "minima", "minus", "modi", "molestiae", "molestias", "mollitia", "nam", "natus", "necessitatibus", "nemo", "neque", "nesciunt", "nihil", "nisi", "nobis", "non", "nostrum", "nulla", "numquam", "occaecati", "ocer", "odio", "odit", "officia", "officiis", "omnis", "optio", "paens", "pariatur", "patior", "patria", "patrocinor", "patruus", "pauci", "paulatim", "pauper", "pax", "peccatus", "pecco", "pecto", "pectus", "pecus", "peior", "pel", "perferendis", "perspiciatis", "placeat", "porro", "possimus", "praesentium", "provident", "quae", "quaerat", "quam", "quas", "quasi", "qui", "quia", "quibusdam", "quidem", "quis", "quisquam", "quo", "quod", "quos", "ratione", "recusandae", "reiciendis", "rem", "repellat", "repellendus", "reprehenderit", "repudiandae", "rerum", "saepe", "sapiente", "sed", "sequi", "similique", "sint", "sit", "socius", "sodalitas", "sol", "soleo", "solio", "solitudo", "solium", "sollers", "sollicito", "solum", "solus", "soluta", "solutio", "solvo", "somniculosus", "somnus", "sonitus", "sono", "sophismata", "sopor", "sordeo", "sortitus", "spargo", "speciosus", "spectaculum", "speculum", "sperno", "spero", "spes", "spiculum", "spiritus", "spoliatio", "sponte", "stabilis", "statim", "statua", "stella", "stillicidium", "stipes", "stips", "sto", "strenuus", "strues", "studio", "stultus", "suadeo", "suasoria", "sub", "subito", "subiungo", "sublime", "subnecto", "subseco", "substantia", "subvenio", "succedo", "succurro", "sufficio", "suffoco", "suffragium", "suggero", "sui", "sulum", "sum", "summa", "summisse", "summopere", "sumo", "sumptus", "sunt", "supellex", "super", "suppellex", "supplanto", "suppono", "supra", "surculus", "surgo", "sursum", "suscipio", "suscipit", "suspendo", "sustineo", "suus", "synagoga", "tabella", "tabernus", "tabesco", "tabgo", "tabula", "taceo", "tactus", "taedium", "talio", "talis", "talus", "tam", "tamdiu", "tamen", "tametsi", "tamisium", "tamquam", "tandem", "tantillus", "tantum", "tardus", "tego", "temeritas", "temperantia", "templum", "tempora", "tempore", "temporibus", "temptatio", "tempus", "tenax", "tendo", "teneo", "tener", "tenetur", "tenuis", "tenus", "tepesco", "tepidus", "ter", "terebro", "teres", "terga", "tergeo", "tergiversatio", "tergo", "tergum", "termes", "terminatio", "tero", "terra", "terreo", "territo", "terror", "tersus", "tertius", "testimonium", "texo", "textilis", "textor", "textus", "thalassinus", "theatrum", "theca", "thema", "theologus", "thermae", "thesaurus", "thesis", "thorax", "thymbra", "thymum", "tibi", "timidus", "timor", "titulus", "tolero", "tollo", "tondeo", "tonsor", "torqueo", "torrens", "tot", "totam", "totidem", "toties", "totus", "tracto", "trado", "traho", "trans", "tredecim", "tremo", "trepide", "tres", "tribuo", "tricesimus", "triduana", "tripudio", "tristis", "triumphus", "trucido", "truculenter", "tubineus", "tui", "tum", "tumultus", "tunc", "turba", "turbo", "turpis", "tutamen", "tutis", "tyrannus", "uberrime", "ubi", "ulciscor", "ullam", "ullus", "ulterius", "ultio", "ultra", "umbra", "umerus", "umquam", "una", "unde", "undique", "universe", "unus", "urbanus", "urbs", "uredo", "usitas", "usque", "ustilo", "ustulo", "usus", "ut", "uter", "uterque", "utilis", "utique", "utor", "utpote", "utrimque", "utroque", "utrum", "uxor", "vaco", "vacuus", "vado", "vae", "valde", "valens", "valeo", "valetudo", "validus", "vallum", "vapulus", "varietas", "varius", "vehemens", "vel", "velit", "velociter", "velum", "velut", "venia", "veniam", "venio", "ventito", "ventosus", "ventus", "venustas", "ver", "verbera", "verbum", "vere", "verecundia", "vereor", "vergo", "veritas", "veritatis", "vero", "versus", "verto", "verumtamen", "verus", "vesco", "vesica", "vesper", "vespillo", "vester", "vestigium", "vestrum", "vetus", "via", "vicinus", "vicissitudo", "victoria", "victus", "videlicet", "video", "viduo", "vigilo", "vigor", "vilicus", "vilis", "vilitas", "villa", "vinco", "vinculum", "vindico", "vinitor", "vinum", "vir", "virga", "virgo", "viridis", "viriliter", "virtus", "vis", "viscus", "vita", "vitae", "vitiosus", "vitium", "vito", "vivo", "vix", "vobis", "vociferor", "voco", "volaticus", "volo", "volubilis", "voluntarius", "volup", "voluptas", "voluptate", "voluptatem", "voluptates", "voluptatibus", "voluptatum", "volutabrum", "volva", "vomer", "vomica", "vomito", "vorago", "vorax", "voro", "vos", "votum", "voveo", "vox", "vulariter", "vulgaris", "vulgivagus", "vulgo", "vulgus", "vulnero", "vulnus", "vulpes", "vulticulus", "xiphias"];
var ja = { words: ze };
var xe = ja;
var Va = { title: "English", code: "en", language: "en", endonym: "English", dir: "ltr", script: "Latn" };
var Ne = Va;
var Ee = ["Rock", "Metal", "Pop", "Electronic", "Folk", "World", "Country", "Jazz", "Funk", "Soul", "Hip Hop", "Classical", "Latin", "Reggae", "Stage And Screen", "Blues", "Non Music", "Rap"];
var Fe = ["White Christmas", "Hey Jude", "Every Breath You Take", "Mack the Knife", "Rock Around the Clock", "I Want to Hold Your Hand", "(I Can't Get No) Satisfaction", "The Twist", "(Everything I Do) I Do it For You", "Bridge Over Troubled Water", "When Doves Cry", "Call Me", "Bette Davis Eyes", "I Will Always Love You", "Over the Rainbow", "American Pie", "Flashdance. What a Feeling", "The Way We Were", "I Heard it Through the Grapevine", "You've Lost That Lovin' Feelin'", "Nothing Compares 2 U", "Endless Love", "Yeah!", "Let's Get it On", "That's What Friends Are For", "You Light Up My Life", "(Sittin' On) the Dock of the Bay", "Joy to the World", "Heartbreak Hotel", "Theme From 'A Summer Place'", "Aquarius/Let The Sunshine In", "I Will Survive", "It's Too Late", "Respect", "Sugar Sugar", "Stayin' Alive", "Maggie May", "My Heart Will Go On", "Eye of the Tiger", "End of the Road", "Another One Bites the Dust", "Billie Jean", "Let's Stay Together", "Battle of New Orleans", "Oh", "Hound Dog", "I Love Rock 'n' Roll", "Smooth", "Good Vibrations", "Physical", "Light My Fire", "Low", "Hey Ya!", "Let it Be", "Don't Be Cruel", "Hotel California", "We Belong Together", "Le Freak", "Raindrops Keep Falling On My Head", "How High the Moon", "My Girl", "I Can't Stop Loving You", "Killing Me Softly With His Song", "Mona Lisa", "In the Mood", "She Loves You", "The Letter", "Mister Sandman", "Careless Whisper", "What's Love Got to Do With It?", "I'm a Believer", "Wooly Bully", "Theme From 'Shaft'", "Hot Stuff", "Centerfold", "Honky Tonk Woman", "I'll Be There", "Gangsta's Paradise", "Yesterday", "My Sharona", "Tennessee Waltz", "Reach Out (I'll Be There)", "California Dreamin'", "Jailhouse Rock", "Irreplaceable", "Dancing in the Street", "Rolling In The Deep", "Tie a Yellow Ribbon 'round the Old Oak Tree", "Stand By Me", "Sentimental Journey", "The First Time Ever I Saw Your Face", "Louie Louie", "Another Brick in the Wall (part 2)", "(Just Like) Starting Over", "Night Fever", "To Sir", "You're So Vain", "Be My Baby", "Celebration", "(They Long to Be) Close to You", "Begin the Beguine", "I Still Haven't Found What I'm Looking For", "I Want You Back", "Arthur's Theme (Best That You Can Do)", "Boulevard of Broken Dreams", "With Or Without You", "Tonight's the Night (Gonna Be Alright)", "Are You Lonesome Tonight?", "Upside Down", "Dancing Queen", "Sweet Child O' Mine", "Where Did Our Love Go", "Unchained Melody", "Rudolph", "Take My Breath Away", "I'll Make Love to You", "Love Will Keep Us Together", "When a Man Loves a Woman", "Walk Like an Egyptian", "Crazy in Love", "Strangers in the Night", "You Belong to Me", "In Da Club", "Say You", "We Are the World", "Johnny B Goode", "Love Theme From 'A Star is Born' (Evergreen)", "Shadow Dancing", "Superstition", "Beat It", "Night & Day", "Waterfalls", "House of the Rising Sun", "Paper Doll", "Downtown", "I Can't Help Myself (Sugar Pie", "Kiss From a Rose", "Believe", "Ballad of the Green Berets", "Proud Mary", "Too Young", "Umbrella", "Swanee", "Need You Tonight", "Like a Rolling Stone", "Lady", "One Sweet Day", "Lean On Me", "Tik-Toc", "Monday Monday", "What'd I Say", "How You Remind Me", "Silly Love Songs", "My Guy", "Macarena", "Goodnight", "Just My Imagination (Running Away With Me)", "The Sounds of Silence", "Imagine", "Me & Bobby McGee", "Near You", "What's Going On?", "Suspicious Minds", "Ode To Billie Joe", "Wind Beneath My Wings", "The Boy is Mine", "Mr Tambourine Man", "Faith", "Green Onions", "Mrs Robinson", "How Deep is Your Love?", "Hey There", "Heart of Glass", "Pennies From Heaven", "Like a Virgin", "Midnight Train to Georgia", "Help!", "Tossing & Turning", "The Sign", "Born to Be Wild", "Layla", "I Just Wanna Be Your Everything", "War", "96 Tears", "I Get Around", "Because You Loved Me", "Summer in the City", "Get Back", "Secret Love", "9 to 5", "(Ghost) Riders in the Sky", "The Loco-Motion", "Play That Funky Music", "Bohemian Rhapsody", "Little Things Mean a Lot", "Cry", "All Shook Up", "Up Where We Belong", "Sledgehammer", "Fire & Rain", "Stop! in the Name of Love", "Sweet Home Alabama", "Another Day in Paradise", "Bleeding Love", "Lady Marmalade (Voulez-Vous Coucher Aver Moi Ce Soir?)", "Whispering", "Vogue", "Under the Bridge", "Sixteen Tons", "Sugar Shack", "Baby Love", "What a Fool Believes", "Lose Yourself", "Hello Dolly", "Brown Eyed Girl", "Without You", "Build Me Up Buttercup", "We Found Love", "Tears in Heaven", "Family Affair", "All I Wanna Do", "Soul Man", "Tequila", "Rock With You", "Livin' La Vida Loca", "Best of My Love", "Runaway", "Alone Again (Naturally)", "Can't Help Falling in Love", "My Sweet Lord", "Runaround Sue", "Swinging On a Star", "Gold Digger", "Happy Together", "Losing My Religion", "Heart of Gold", "Stardust", "Will You Love Me Tomorrow", "You Are the Sunshine of My Life", "You Were Meant for Me", "Take On Me", "Hollaback Girl", "God Bless America", "I Swear", "Sunshine of Your Love", "Firework", "Groovin'", "Smells Like Teen Spirit", "Big Girls Don't Cry", "Jack & Diane", "Addicted to Love", "The Last Dance", "Georgia On My Mind", "Money For Nothing", "Jump", "Vaya Con Dios (may God Be With You)", "You'll Never Know", "That'll Be the Day", "Girls Just Wanna Have Fun", "Wheel of Fortune", "When You Wish Upon a Star", "Don't Fence Me In", "Turn! Turn! Turn! (To Everything There is a Season)", "Volare", "Sweet Dreams (Are Made of This)", "Whole Lotta Love", "You've Got a Friend", "Penny Lane", "People Got to Be Free", "Nature Boy", "Sexyback", "Crying", "Single Ladies (Put A Ring On It)", "Bad Girls", "Too Close", "I Got You Babe", "We've Only Just Begun", "Sh-Boom (Life Could Be a Dream)", "Shining Star", "Kansas City", "Like a Prayer", "Cheek to Cheek", "Papa Was a Rolling Stone", "Promiscuous", "Love Shack", "Funkytown", "Crazy", "Philadelphia Freedom", "Temperature", "Somebody That I Used to Know", "All I Have to Do is Dream", "Jessie's Girl", "Rhinestone Cowboy", "Blue Suede Shoes", "Ebony & Ivory", "I'll Never Smile Again", "Keep On Loving You", "Since U Been Gone", "The Way You Look Tonight", "Crazy Little Thing Called Love", "The Great Pretender", "Brown Sugar", "Que sera sera (Whatever will be will be)", "No One", "Bad Day", "Boom Boom Pow", "Party Rock Anthem", "Because of You", "Chattanooga Choo Choo", "A Whiter Shade of Pale", "Love Me Tender", "Higher Love", "Footloose", "Blurred Lines", "I Just Called to Say I Love You", "Come Together", "It's Now Or Never", "Under the Boardwalk", "Don't You Want Me", "You Can't Hurry Love", "Fame", "Fallin'", "Poker Face", "Bad Romance", "Ruby Tuesday", "All Night Long (All Night)", "Baby Got Back", "Whole Lotta Shakin' Goin' On", "Frenesi", "December 1963 (Oh What a Night)", "Bad Moon Rising", "Abracadabra", "I Gotta Feeling", "The Song From Moulin Rouge (Where Is Your Heart)", "Waiting For a Girl Like You", "Everybody Loves Somebody", "I Can't Go For That (No Can Do)", "Buttons & Bows", "It's All in the Game", "Love Train", "Dance to the Music", "Candle in the Wind '97", "Honey", "Kiss", "I'll Take You There", "Paint it Black", "Band of Gold", "Just the Way You Are", "Spirit in the Sky", "Vision of Love", "Hips don't lie", "Till The End of Time", "Duke of Earl", "YMCA", "Oh My Papa (O Mein Papa)", "Pistol Packin' Mama", "Gonna Make You Sweat (Everybody Dance Now)", "Dilemma", "I Need You Now", "Wanted", "Jumpin' Jack Flash", "Against All Odds (Take a Look At Me Now)", "Tom Dooley", "Goodbye Yellow Brick Road", "Rhapsody in Blue", "Bennie & the Jets", "Call Me Maybe", "You Really Got Me", "God Bless the Child", "I'm Sorry", "Bad", "I Can't Get Next to You", "The Power of Love", "Dreamlover", "Only The Lonely (Know The Way I Feel)", "We Are Family", "At Last", "Brand New Key", "I've Heard That Song Before", "Stay (I Missed You)", "Do Ya Think I'm Sexy?", "Tutti Frutti", "This Ole House", "Please Mr Postman", "Good Times", "Something", "(I've Had) the Time of My Life", "I Don't Want to Miss a Thing", "Down Hearted Blues", "Rag Doll", "Blueberry Hill", "Ain't No Sunshine", "Wild Thing", "Blaze of Glory", "Ray of Light", "The Hustle", "Grenade", "Cathy's Clown", "Minnie the Moocher", "Love Is Blue (L'Amour Est Bleu)", "Iris", "The Boys of Summer", "The Tide is High", "She Drives Me Crazy", "Save the Best For Last", "These Boots Are Made For Walking", "I Feel Love", "A Woman in Love", "We Can Work it Out", "The Reason", "Locked Out Of Heaven", "Do That to Me One More Time", "That's the Way Love Goes", "A Hard Day's Night", "I Believe I Can Fly", "Karma Chameleon", "One O'Clock Jump", "Mule Train", "Car Wash", "Rapture", "Creep", "Streets of Philadelphia", "West End Girls", "Leader of the Pack", "T For Texas (Blue Yodel No 1)", "Mama Told Me Not to Come", "Just Dance", "Mercy Mercy Me (The Ecology)", "Livin' On a Prayer", "Good Lovin'", "50 Ways to Leave Your Lover", "Stronger", "I Can See Clearly Now", "We Are the Champions", "(I've Got a Gal In) Kalamazoo", "No Scrubs", "How Do You Mend a Broken Heart", "I Got You (I Feel Good)", "Don't Let the Stars Get in Your Eyes", "The Girl From Ipanema", "(Sexual) Healing", "Tears of a Clown", "We Will Rock You", "Hold On", "Bye Bye Love", "Chapel of Love", "White Rabbit", "Rock the Boat", "The Gypsy", "Take The 'A' Train", "Crimson & Clover", "Crocodile Rock", "Make Love to Me", "Nothing's Gonna Stop Us Now", "Say Say Say", "The Christmas Song (Chestnuts Roasting On An Open Fire)", "Un-Break My Heart", "Cherish", "I'll Be Missing You", "Drops of Jupiter (Tell Me)", "There goes my baby", "You Send Me", "If (They Made Me a King)", "The Prisoner's Song", "ABC", "Do Wah Diddy Diddy", "He's So Fine", "A Boy Named Sue", "Roll Over Beethoven", "Sweet Georgia Brown", "Earth Angel", "Rehab", "(You Keep Me) Hangin' On", "This Diamond Ring", "Be My Love", "Rush Rush", "You're Beautiful", "Roll With It", "Moonlight Serenade", "Unbelievable", "Peg o' My Heart", "This Land is Your Land", "Stranger On the Shore", "Rum & Coca-Cola", "Hit the Road", "Without Me", "Crazy For You", "I Want to Know What Love Is", "Bye Bye", "Down Under", "At the Hop", "One Bad Apple", "Kiss & Say Goodbye", "For What It's Worth (Stop", "The Long & Winding Road", "Baby One More Time", "Stairway to Heaven", "How Do I Live?", "Hello", "Truly Madly Deeply", "Great Balls of Fire", "King of the Road", "I Wanna Dance With Somebody (Who Loves Me)", "Reunited", "Help Me", "Rags to Riches", "(It's No) Sin", "Say My Name", "Nobody Does it Better", "Paperback Writer", "Don't Worry Be Happy", "I Fall to Pieces", "Body & Soul", "You're Still the One", "Stormy Weather (Keeps Rainin' All the Time)", "Horse With No Name", "American Woman", "Chattanoogie Shoe-Shine Boy", "Pick Up the Pieces", "Everybody Wants to Rule the World", "Blue Tango", "Hurt So Good", "Apologize", "Let's Dance", "(You're My) Soul & Inspiration", "I Only Have Eyes For You", "Wichita Lineman", "Hanging by a Moment", "Spinning Wheel", "Look Away", "Ironic", "Don't Stop 'Til You Get Enough", "Empire State Of Mind", "Do You Love Me?", "Jive Talkin'", "You're the One That I Want", "Sweet Soul Music", "Hey There Delilah", "A Whole New World (Aladdin's Theme)", "Somethin' Stupid", "Knock Three Times", "Mickey", "The Wanderer", "Dancing in the Dark", "It's Still Rock 'n' Roll to Me", "Boogie Oogie Oogie", "Can You Feel the Love Tonight", "Harper Valley PTA", "Seasons in the Sun", "Come On-a My House", "Viva La Vida", "Walk On By", "Drop it Like It's Hot", "Private Eyes", "Maniac", "All My Lovin' (You're Never Gonna Get It)", "Take a Bow", "Ring of Fire", "Save the Last Dance For Me", "Make it With You", "Don't Speak", "I Shot the Sheriff", "Say It Right", "Sing", "Twist & Shout", "Walk This Way", "A-Tisket A-Tasket", "Let Me Love You", "I Can Dream", "Toxic", "The Joker", "Hero", "In the Year 2525 (Exordium & Terminus)", "Your Song", "Oh Happy Day", "Grease", "Love In This Club", "Angie", "How Much is That Doggy in the Window?", "Daydream Believer", "Whip It", "Boogie Woogie Bugle Boy", "Down", "Hanky Panky", "Total Eclipse of the Heart", "Cat's in the Cradle", "Strange Fruit", "Breathe", "On My Own", "Dizzy", "Ticket to Ride", "We Got The Beat", "On the Atchison", "Always On My Mind", "Unforgettable", "In the End", "Music", "Can't Buy Me Love", "Chain of Fools", "Won't Get Fooled Again", "Happy Days Are Here Again", "Third Man Theme", "Your Cheatin' Heart", "Thriller", "Venus", "Time After Time", "That Lucky Old Sun (Just Rolls Around Heaven All Day)", "E.T.", "Three Coins in the Fountain", "Touch Me", "You Ain't Seen Nothin' Yet", "Gives You Hell", "Knock On Wood", "One of These Nights", "Again", "Doo Wop (That Thing)", "Whoomp! (There it Is)", "Magic", "I'm Walking Behind You", "We Didn't Start the Fire", "Lola", "Ghostbusters", "Winchester Cathedral", "Greatest Love of All", "My Love", "Wannabe", "Miss You", "I Feel Fine", "Baby Baby", "TSOP (The Sound of Philadelphia)", "Loving You", "This Guy's in Love With You", "Till I Waltz Again With You", "Why Do Fools Fall in Love?", "Nights in White Satin", "That's the Way (I Like It)", "My Prayer", "(Put Another Nickel In) Music! Music! Music!", "Colors of the Wind", "Morning Train (Nine to Five)", "I Went to Your Wedding", "Kiss Me", "Gypsies", "Cracklin' Rosie", "Maybellene", "Born in the USA", "Here Without You", "Mony Mony", "Mmmbop", "You Always Hurt the One You Love", "Eight Days a Week", "What Goes Around Comes Around", "Kung Fu Fighting", "Fantasy", "Sir Duke", "Ain't Misbehavin'", "Need You Now", "Last Train to Clarksville", "Yakety Yak", "I'll be seeing you", "Hard to Say I'm Sorry", "It's My Party", "Love to Love You Baby", "Miss You Much", "Born to Run", "Instant Karma", "The Rose", "Purple Rain", "One", "Groove is in the Heart", "Gimme Some Lovin'", "Beautiful Day", "Escape (The Pina Colada Song)", "Use Somebody", "Fortunate Son", "Afternoon Delight", "Love's Theme", "Sailing", "Cherry Pink & Apple Blossom White", "Georgy Girl", "How to Save a Life", "I Walk the Line", "All You Need is Love", "U Can't Touch This", "All Out of Love", "Where is the Love?", "Revolution", "The Love You Save", "Black Or White", "This Used to Be My Playground", "Living For the City", "School's Out", "Disturbia", "Riders On the Storm", "Some Enchanted Evening", "Weak", "Maneater", "More Than Words", "Time of the Season", "Mrs Brown You've Got a Lovely Daughter", "If You Leave Me Now", "Can't Get Enough of Your Love", "Na Na Hey Hey (Kiss Him Goodbye)", "Mr Brightside", "Black Velvet", "I'm Yours", "My Blue Heaven", "It Had to Be You", "Tha Crossroads", "Ac-cent-tchu-ate the Positive", "Everyday People", "We Are Young", "Take Me Home", "Smoke! Smoke! Smoke! (That Cigarette)", "In the Summertime", "The Tracks of My Tears", "Fly Robin Fly", "Love is a Many Splendoured Thing", "Another Night", "Long Tall Sally", "You Sexy Thing", "The Morning After", "Get Off of My Cloud", "Roses Are Red", "Thank You (Falettinme be Mice Elf Again)", "Slow Poke", "You Belong With Me", "Ain't No Mountain High Enough", "Auf Wiederseh'n Sweetheart", "Beauty & the Beast", "St Louis Blues", "Peggy Sue", "U Got it Bad", "Sweet Caroline (Good Times Never Seemed So Good)", "Wedding Bell Blues", "Freebird", "Wipe Out", "California Girls", "Being With You", "Makin' Whoopee", "Shop Around", "Smoke On the Water", "Hungry Heart", "That's Amore", "My Life", "Brandy (You're A Fine Girl)", "Walk Don't Run", "Surfin' USA", "Ball of Confusion (That's What the World is Today)", "Sunshine Superman", "Frankenstein", "Kiss You All Over", "Wishing Well", "Piano Man", "Ben", "In the Ghetto", "Hang On Sloopy", "Singing The Blues", "Cry Like a Baby", "I Honestly Love You", "Brother", "Lookin' Out My Back Door", "Candy Man", "Burn", "Stagger Lee", "Moonlight Cocktail", "Coming Up", "Pop Muzik", "As Time Goes By", "My Eyes Adored You", "Strawberry Fields Forever", "Some of These Days", "I Think I Love You", "Judy in Disguise (With Glasses)", "All Along the Watchtower", "A Thousand Miles", "Fast Car", "Red Red Wine", "Live & Let Die", "Come On Eileen", "Right Back Where We Started From", "Brother Louie", "Ol' Man River", "Band On the Run", "Rich Girl", "Green River", "Got to Give it Up", "Behind Closed Doors", "Don't Go Breaking My Heart", "I'm Looking Over a Four Leaf Clover", "Mr Big Stuff", "Tiger Rag", "Kryptonite", "Hey Paula", "Go Your Own Way", "Big Bad John", "Wake Me Up Before You Go Go", "Tangerine", "Wayward Wind", "Disco Lady", "Spanish Harlem", "Wicked Game", "Rosanna", "Papa Don't Preach", "Somebody to Love", "Kokomo", "Manana (Is Soon Enough For Me)", "Puttin' on the Ritz", "One More Try", "I'll Walk Alone", "Shout", "Woman", "Ballerina", "We Built This City", "19th Nervous Breakdown", "Working My Way Back to You", "Superstar", "Foolish Games", "Get Down Tonight", "On Bended Knee", "Magic Carpet Ride", "Only You (And You Alone)", "A String of Pearls", "A Tree in the Meadow", "So Much in Love", "Every Little Thing She Does is Magic", "La Bamba", "Tighten Up", "Three Times a Lady", "Airplanes", "Don't Leave Me This Way", "Rock the Casbah", "Feel Good Inc", "Love Me Do", "Kiss On My List", "Give Me Everything", "Have You Ever Really Loved a Woman?", "Love Letters in the Sand", "Ring My Bell", "Love Child", "I Feel For You", "Bye", "(Let Me Be Your) Teddy Bear", "Soldier Boy", "Papa's Got a Brand New Bag", "Love Hangover", "Spill the Wine", "Royals", "April Showers", "Don't You (Forget About Me)", "Travellin' Man", "The Thing", "You Make Me Feel Brand New", "The Glow-Worm", "You Don't Bring Me Flowers", "Summertime Blues", "Straight Up", "Sunday", "Wake Up Little Susie", "She's a Lady", "Over There", "Little Darlin'", "Rag Mop", "Shake Down", "Up Around the Bend", "Harbour Lights", "Chances Are", "Mood Indigo", "Pony Time", "After You've Gone", "I Wanna Love You", "Da Doo Ron Ron (When He Walked Me Home)", "If You Don't Know Me By Now", "Green Tambourine", "My Man", "If I Didn't Care", "St George & the Dragonette", "Why Don't You Believe Me?", "How Will I Know", "Disco Duck", "Lonely Boy", "Never Gonna Give You Up", "Before The Next Teardrop Falls", "Running Scared", "Let's Hear it For the Boy", "Sleep Walk", "Walk On the Wild Side", "Memories Are Made of This", "Open Arms", "Stuck On You", "Personality", "Feel Like Making Love", "Stars & Stripes Forever", "Besame Mucho", "Let Me Call You Sweetheart", "Indian Reservation (The Lament Of The Cherokee Reservation Indian)", "Cars", "You Make Me Feel Like Dancing", "Whatcha Say", "Me & Mrs Jones", "Bitter Sweet Symphony", "Uncle Albert (Admiral Halsey)", "More Than a Feeling", "My Boyfriend's Back", "People", "He'll Have to Go", "I Can Help", "The Streak", "Dreams", "Hair", "Cold", "Nothin' on You", "The End of the World", "Caldonia Boogie (What Makes Your Big Head So Hard)", "I Kissed A Girl", "Incense & Peppermints", "12th Street Rag", "West End Blues", "The Way You Move", "Smoke Gets in Your Eyes", "Want Ads", "Long Cool Woman in a Black Dress", "Hey Baby", "(Your Love Keeps Lifting Me) Higher & Higher", "He's a Rebel", "Alone", "Thrift Shop", "Don't Let the Sun Go Down On Me", "The Sweet Escape", "Return to Sender", "Here in My Heart", "Wabash Cannonball", "Ain't That a Shame", "Travellin' Band", "I'm Your Boogie Man", "I Write the Songs", "This Love", "Lights", "Will It Go Round In Circles", "Purple Haze", "Rock Your Baby", "Delicado", "Tammy", "Check On It", "Breaking Up is Hard to Do", "1999", "Prisoner of Love", "Wild Wild West", "Walk Like a Man", "I Will Follow Him", "Glamorous", "Yellow Rose of Texas", "That Old Black Magic", "I'm So Lonesome I Could Cry", "Up Up & Away", "Baby Come Back", "Let it Snow! Let it Snow! Let it Snow!", "Pon De Replay", "Because I Love You (The Postman Song)", "Sleepy Lagoon", "Baker Street", "Dardanella", "You Don't Have to Be a Star (To Be in My Show)", "Leaving", "Glory of Love", "Theme From 'Greatest American Hero' (Believe It Or Not)", "Shake You Down", "Ole Buttermilk Sky", "I Can't Get Started", "Freak Me", "Hot Child In The City", "Man in the Mirror", "Queen of Hearts", "Let's Groove", "Change the World", "You make Me Wanna", "Someday", "Eve of Destruction", "One of Us", "Honky Tonk", "Be Bop a Lula", "Two Hearts", "Paper Planes"];
var Ya = { genre: Ee, song_name: Fe };
var Je = Ya;
var Ke = ["activist", "artist", "author", "blogger", "business owner", "coach", "creator", "designer", "developer", "dreamer", "educator", "engineer", "entrepreneur", "environmentalist", "film lover", "filmmaker", "foodie", "founder", "friend", "gamer", "geek", "grad", "inventor", "leader", "model", "musician", "nerd", "parent", "patriot", "person", "philosopher", "photographer", "public speaker", "scientist", "singer", "streamer", "student", "teacher", "traveler", "veteran", "writer"];
var Ie = ["{{person.bio_part}}", "{{person.bio_part}}, {{person.bio_part}}", "{{person.bio_part}}, {{person.bio_part}}, {{person.bio_part}}", "{{person.bio_part}}, {{person.bio_part}}, {{person.bio_part}} {{internet.emoji}}", "{{word.noun}} {{person.bio_supporter}}", "{{word.noun}} {{person.bio_supporter}}  {{internet.emoji}}", "{{word.noun}} {{person.bio_supporter}}, {{person.bio_part}}", "{{word.noun}} {{person.bio_supporter}}, {{person.bio_part}} {{internet.emoji}}"];
var Oe = ["advocate", "devotee", "enthusiast", "fan", "junkie", "lover", "supporter"];
var qe = ["Mary", "Patricia", "Linda", "Barbara", "Elizabeth", "Jennifer", "Maria", "Susan", "Margaret", "Dorothy", "Lisa", "Nancy", "Karen", "Betty", "Helen", "Sandra", "Donna", "Carol", "Ruth", "Sharon", "Michelle", "Laura", "Sarah", "Kimberly", "Deborah", "Jessica", "Shirley", "Cynthia", "Angela", "Melissa", "Brenda", "Amy", "Anna", "Rebecca", "Virginia", "Kathleen", "Pamela", "Martha", "Debra", "Amanda", "Stephanie", "Carolyn", "Christine", "Marie", "Janet", "Catherine", "Frances", "Ann", "Joyce", "Diane", "Alice", "Julie", "Heather", "Teresa", "Doris", "Gloria", "Evelyn", "Jean", "Cheryl", "Mildred", "Katherine", "Joan", "Ashley", "Judith", "Rose", "Janice", "Kelly", "Nicole", "Judy", "Christina", "Kathy", "Theresa", "Beverly", "Denise", "Tammy", "Irene", "Jane", "Lori", "Rachel", "Marilyn", "Andrea", "Kathryn", "Louise", "Sara", "Anne", "Jacqueline", "Wanda", "Bonnie", "Julia", "Ruby", "Lois", "Tina", "Phyllis", "Norma", "Paula", "Diana", "Annie", "Lillian", "Emily", "Robin", "Peggy", "Crystal", "Gladys", "Rita", "Dawn", "Connie", "Florence", "Tracy", "Edna", "Tiffany", "Carmen", "Rosa", "Cindy", "Grace", "Wendy", "Victoria", "Edith", "Kim", "Sherry", "Sylvia", "Josephine", "Thelma", "Shannon", "Sheila", "Ethel", "Ellen", "Elaine", "Marjorie", "Carrie", "Charlotte", "Monica", "Esther", "Pauline", "Emma", "Juanita", "Anita", "Rhonda", "Hazel", "Amber", "Eva", "Debbie", "April", "Leslie", "Clara", "Lucille", "Jamie", "Joanne", "Eleanor", "Valerie", "Danielle", "Megan", "Alicia", "Suzanne", "Michele", "Gail", "Bertha", "Darlene", "Veronica", "Jill", "Erin", "Geraldine", "Lauren", "Cathy", "Joann", "Lorraine", "Lynn", "Sally", "Regina", "Erica", "Beatrice", "Dolores", "Bernice", "Audrey", "Yvonne", "Annette", "June", "Samantha", "Marion", "Dana", "Stacy", "Ana", "Renee", "Ida", "Vivian", "Roberta", "Holly", "Brittany", "Melanie", "Loretta", "Yolanda", "Jeanette", "Laurie", "Katie", "Kristen", "Vanessa", "Alma", "Sue", "Elsie", "Beth", "Jeanne", "Vicki", "Carla", "Tara", "Rosemary", "Eileen", "Terri", "Gertrude", "Lucy", "Tonya", "Ella", "Stacey", "Wilma", "Gina", "Kristin", "Jessie", "Natalie", "Agnes", "Vera", "Willie", "Charlene", "Bessie", "Delores", "Melinda", "Pearl", "Arlene", "Maureen", "Colleen", "Allison", "Tamara", "Joy", "Georgia", "Constance", "Lillie", "Claudia", "Jackie", "Marcia", "Tanya", "Nellie", "Minnie", "Marlene", "Heidi", "Glenda", "Lydia", "Viola", "Courtney", "Marian", "Stella", "Caroline", "Dora", "Jo", "Vickie", "Mattie", "Terry", "Maxine", "Irma", "Mabel", "Marsha", "Myrtle", "Lena", "Christy", "Deanna", "Patsy", "Hilda", "Gwendolyn", "Jennie", "Nora", "Margie", "Nina", "Cassandra", "Leah", "Penny", "Kay", "Priscilla", "Naomi", "Carole", "Brandy", "Olga", "Billie", "Dianne", "Tracey", "Leona", "Jenny", "Felicia", "Sonia", "Miriam", "Velma", "Becky", "Bobbie", "Violet", "Kristina", "Toni", "Misty", "Mae", "Shelly", "Daisy", "Ramona", "Sherri", "Erika", "Katrina", "Claire", "Lindsey", "Lindsay", "Geneva", "Guadalupe", "Belinda", "Margarita", "Sheryl", "Cora", "Faye", "Ada", "Natasha", "Sabrina", "Isabel", "Marguerite", "Hattie", "Harriet", "Molly", "Cecilia", "Kristi", "Brandi", "Blanche", "Sandy", "Rosie", "Joanna", "Iris", "Eunice", "Angie", "Inez", "Lynda", "Madeline", "Amelia", "Alberta", "Genevieve", "Monique", "Jodi", "Janie", "Maggie", "Kayla", "Sonya", "Jan", "Lee", "Kristine", "Candace", "Fannie", "Maryann", "Opal", "Alison", "Yvette", "Melody", "Luz", "Susie", "Olivia", "Flora", "Shelley", "Kristy", "Mamie", "Lula", "Lola", "Verna", "Beulah", "Antoinette", "Candice", "Juana", "Jeannette", "Pam", "Kelli", "Hannah", "Whitney", "Bridget", "Karla", "Celia", "Latoya", "Patty", "Shelia", "Gayle", "Della", "Vicky", "Lynne", "Sheri", "Marianne", "Kara", "Jacquelyn", "Erma", "Blanca", "Myra", "Leticia", "Pat", "Krista", "Roxanne", "Angelica", "Johnnie", "Robyn", "Francis", "Adrienne", "Rosalie", "Alexandra", "Brooke", "Bethany", "Sadie", "Bernadette", "Traci", "Jody", "Kendra", "Jasmine", "Nichole", "Rachael", "Chelsea", "Mable", "Ernestine", "Muriel", "Marcella", "Elena", "Krystal", "Angelina", "Nadine", "Kari", "Estelle", "Dianna", "Paulette", "Lora", "Mona", "Doreen", "Rosemarie", "Angel", "Desiree", "Antonia", "Hope", "Ginger", "Janis", "Betsy", "Christie", "Freda", "Mercedes", "Meredith", "Lynette", "Teri", "Cristina", "Eula", "Leigh", "Meghan", "Sophia", "Eloise", "Rochelle", "Gretchen", "Cecelia", "Raquel", "Henrietta", "Alyssa", "Jana", "Kelley", "Gwen", "Kerry", "Jenna", "Tricia", "Laverne", "Olive", "Alexis", "Tasha", "Silvia", "Elvira", "Casey", "Delia", "Sophie", "Kate", "Patti", "Lorena", "Kellie", "Sonja", "Lila", "Lana", "Darla", "May", "Mindy", "Essie", "Mandy", "Lorene", "Elsa", "Josefina", "Jeannie", "Miranda", "Dixie", "Lucia", "Marta", "Faith", "Lela", "Johanna", "Shari", "Camille", "Tami", "Shawna", "Elisa", "Ebony", "Melba", "Ora", "Nettie", "Tabitha", "Ollie", "Jaime", "Winifred", "Kristie"];
var je = ["Abigail", "Adele", "Alex", "Alice", "Alisha", "Amber", "Amelia", "Amora", "Anaïs", "Angelou", "Anika", "Anise", "Annabel", "Anne", "Aphrodite", "Aretha", "Arya", "Ashton", "Aster", "Audrey", "Avery", "Bailee", "Bay", "Belle", "Beth", "Billie", "Blair", "Blaise", "Blake", "Blanche", "Blue", "Bree", "Brielle", "Brienne", "Brooke", "Caleen", "Candice", "Caprice", "Carelyn", "Caylen", "Celine", "Cerise", "Cia", "Claire", "Claudia", "Clementine", "Coral", "Coraline", "Dahlia", "Dakota", "Dawn", "Della", "Demi", "Denise", "Denver", "Devine", "Devon", "Diana", "Dylan", "Ebony", "Eden", "Eleanor", "Elein", "Elizabeth", "Ellen", "Elodie", "Eloise", "Ember", "Emma", "Erin", "Eyre", "Faith", "Farrah", "Fawn", "Fayre", "Fern", "France", "Francis", "Frida", "Genisis", "Georgia", "Grace", "Gwen", "Harley", "Harper", "Hazel", "Helen", "Hippolyta", "Holly", "Hope", "Imani", "Iowa", "Ireland", "Irene", "Iris", "Isa", "Isla", "Ivy", "Jade", "Jane", "Jazz", "Jean", "Jess", "Jett", "Jo", "Joan", "Jolie", "Jordan", "Josie", "Journey", "Joy", "Jules", "Julien", "Juliet", "Juniper", "Justice", "Kali", "Karma", "Kat", "Kate", "Kennedy", "Keva", "Kylie", "Lake", "Lane", "Lark", "Layla", "Lee", "Leigh", "Leona", "Lexi", "London", "Lou", "Louise", "Love", "Luna", "Lux", "Lynn", "Lyric", "Maddie", "Mae", "Marie", "Matilda", "Maude", "Maybel", "Meadow", "Medusa", "Mercy", "Michelle", "Mirabel", "Monroe", "Morgan", "Nalia", "Naomi", "Nova", "Olive", "Paige", "Parker", "Pax", "Pearl", "Penelope", "Phoenix", "Quinn", "Rae", "Rain", "Raven", "Ray", "Raye", "Rebel", "Reese", "Reeve", "Regan", "Riley", "River", "Robin", "Rory", "Rose", "Royal", "Ruth", "Rylie", "Sage", "Sam", "Saturn", "Scout", "Serena", "Sky", "Skylar", "Sofia", "Sophia", "Storm", "Sue", "Suzanne", "Sydney", "Taylen", "Taylor", "Teagan", "Tempest", "Tenley", "Thea", "Trinity", "Valerie", "Venus", "Vera", "Violet", "Willow", "Winter", "Xena", "Zaylee", "Zion", "Zoe"];
var e = ["Mrs.", "Ms.", "Miss", "Dr."];
var Ve = ["Aaliyah", "Aaron", "Abagail", "Abbey", "Abbie", "Abbigail", "Abby", "Abdiel", "Abdul", "Abdullah", "Abe", "Abel", "Abelardo", "Abigail", "Abigale", "Abigayle", "Abner", "Abraham", "Ada", "Adah", "Adalberto", "Adaline", "Adam", "Adan", "Addie", "Addison", "Adela", "Adelbert", "Adele", "Adelia", "Adeline", "Adell", "Adella", "Adelle", "Aditya", "Adolf", "Adolfo", "Adolph", "Adolphus", "Adonis", "Adrain", "Adrian", "Adriana", "Adrianna", "Adriel", "Adrien", "Adrienne", "Afton", "Aglae", "Agnes", "Agustin", "Agustina", "Ahmad", "Ahmed", "Aida", "Aidan", "Aiden", "Aileen", "Aimee", "Aisha", "Aiyana", "Akeem", "Al", "Alaina", "Alan", "Alana", "Alanis", "Alanna", "Alayna", "Alba", "Albert", "Alberta", "Albertha", "Alberto", "Albin", "Albina", "Alda", "Alden", "Alec", "Aleen", "Alejandra", "Alejandrin", "Alek", "Alena", "Alene", "Alessandra", "Alessandro", "Alessia", "Aletha", "Alex", "Alexa", "Alexander", "Alexandra", "Alexandre", "Alexandrea", "Alexandria", "Alexandrine", "Alexandro", "Alexane", "Alexanne", "Alexie", "Alexis", "Alexys", "Alexzander", "Alf", "Alfonso", "Alfonzo", "Alford", "Alfred", "Alfreda", "Alfredo", "Ali", "Alia", "Alice", "Alicia", "Alisa", "Alisha", "Alison", "Alivia", "Aliya", "Aliyah", "Aliza", "Alize", "Allan", "Allen", "Allene", "Allie", "Allison", "Ally", "Alphonso", "Alta", "Althea", "Alva", "Alvah", "Alvena", "Alvera", "Alverta", "Alvina", "Alvis", "Alyce", "Alycia", "Alysa", "Alysha", "Alyson", "Alysson", "Amalia", "Amanda", "Amani", "Amara", "Amari", "Amaya", "Amber", "Ambrose", "Amelia", "Amelie", "Amely", "America", "Americo", "Amie", "Amina", "Amir", "Amira", "Amiya", "Amos", "Amparo", "Amy", "Amya", "Ana", "Anabel", "Anabelle", "Anahi", "Anais", "Anastacio", "Anastasia", "Anderson", "Andre", "Andreane", "Andreanne", "Andres", "Andrew", "Andy", "Angel", "Angela", "Angelica", "Angelina", "Angeline", "Angelita", "Angelo", "Angie", "Angus", "Anibal", "Anika", "Anissa", "Anita", "Aniya", "Aniyah", "Anjali", "Anna", "Annabel", "Annabell", "Annabelle", "Annalise", "Annamae", "Annamarie", "Anne", "Annetta", "Annette", "Annie", "Ansel", "Ansley", "Anthony", "Antoinette", "Antone", "Antonetta", "Antonette", "Antonia", "Antonietta", "Antonina", "Antonio", "Antwan", "Antwon", "Anya", "April", "Ara", "Araceli", "Aracely", "Arch", "Archibald", "Ardella", "Arden", "Ardith", "Arely", "Ari", "Ariane", "Arianna", "Aric", "Ariel", "Arielle", "Arjun", "Arlene", "Arlie", "Arlo", "Armand", "Armando", "Armani", "Arnaldo", "Arne", "Arno", "Arnold", "Arnoldo", "Arnulfo", "Aron", "Art", "Arthur", "Arturo", "Arvel", "Arvid", "Arvilla", "Aryanna", "Asa", "Asha", "Ashlee", "Ashleigh", "Ashley", "Ashly", "Ashlynn", "Ashton", "Ashtyn", "Asia", "Assunta", "Astrid", "Athena", "Aubree", "Aubrey", "Audie", "Audra", "Audreanne", "Audrey", "August", "Augusta", "Augustine", "Augustus", "Aurelia", "Aurelie", "Aurelio", "Aurore", "Austen", "Austin", "Austyn", "Autumn", "Ava", "Avery", "Avis", "Axel", "Ayana", "Ayden", "Ayla", "Aylin", "Baby", "Bailee", "Bailey", "Barbara", "Barney", "Baron", "Barrett", "Barry", "Bart", "Bartholome", "Barton", "Baylee", "Beatrice", "Beau", "Beaulah", "Bell", "Bella", "Belle", "Ben", "Benedict", "Benjamin", "Bennett", "Bennie", "Benny", "Benton", "Berenice", "Bernadette", "Bernadine", "Bernard", "Bernardo", "Berneice", "Bernhard", "Bernice", "Bernie", "Berniece", "Bernita", "Berry", "Bert", "Berta", "Bertha", "Bertram", "Bertrand", "Beryl", "Bessie", "Beth", "Bethany", "Bethel", "Betsy", "Bette", "Bettie", "Betty", "Bettye", "Beulah", "Beverly", "Bianka", "Bill", "Billie", "Billy", "Birdie", "Blair", "Blaise", "Blake", "Blanca", "Blanche", "Blaze", "Bo", "Bobbie", "Bobby", "Bonita", "Bonnie", "Boris", "Boyd", "Brad", "Braden", "Bradford", "Bradley", "Bradly", "Brady", "Braeden", "Brain", "Brandi", "Brando", "Brandon", "Brandt", "Brandy", "Brandyn", "Brannon", "Branson", "Brant", "Braulio", "Braxton", "Brayan", "Breana", "Breanna", "Breanne", "Brenda", "Brendan", "Brenden", "Brendon", "Brenna", "Brennan", "Brennon", "Brent", "Bret", "Brett", "Bria", "Brian", "Briana", "Brianne", "Brice", "Bridget", "Bridgette", "Bridie", "Brielle", "Brigitte", "Brionna", "Brisa", "Britney", "Brittany", "Brock", "Broderick", "Brody", "Brook", "Brooke", "Brooklyn", "Brooks", "Brown", "Bruce", "Bryana", "Bryce", "Brycen", "Bryon", "Buck", "Bud", "Buddy", "Buford", "Bulah", "Burdette", "Burley", "Burnice", "Buster", "Cade", "Caden", "Caesar", "Caitlyn", "Cale", "Caleb", "Caleigh", "Cali", "Calista", "Callie", "Camden", "Cameron", "Camila", "Camilla", "Camille", "Camren", "Camron", "Camryn", "Camylle", "Candace", "Candelario", "Candice", "Candida", "Candido", "Cara", "Carey", "Carissa", "Carlee", "Carleton", "Carley", "Carli", "Carlie", "Carlo", "Carlos", "Carlotta", "Carmel", "Carmela", "Carmella", "Carmelo", "Carmen", "Carmine", "Carol", "Carolanne", "Carole", "Carolina", "Caroline", "Carolyn", "Carolyne", "Carrie", "Carroll", "Carson", "Carter", "Cary", "Casandra", "Casey", "Casimer", "Casimir", "Casper", "Cassandra", "Cassandre", "Cassidy", "Cassie", "Catalina", "Caterina", "Catharine", "Catherine", "Cathrine", "Cathryn", "Cathy", "Cayla", "Ceasar", "Cecelia", "Cecil", "Cecile", "Cecilia", "Cedrick", "Celestine", "Celestino", "Celia", "Celine", "Cesar", "Chad", "Chadd", "Chadrick", "Chaim", "Chance", "Chandler", "Chanel", "Chanelle", "Charity", "Charlene", "Charles", "Charley", "Charlie", "Charlotte", "Chase", "Chasity", "Chauncey", "Chaya", "Chaz", "Chelsea", "Chelsey", "Chelsie", "Chesley", "Chester", "Chet", "Cheyanne", "Cheyenne", "Chloe", "Chris", "Christ", "Christa", "Christelle", "Christian", "Christiana", "Christina", "Christine", "Christop", "Christophe", "Christopher", "Christy", "Chyna", "Ciara", "Cicero", "Cielo", "Cierra", "Cindy", "Citlalli", "Clair", "Claire", "Clara", "Clarabelle", "Clare", "Clarissa", "Clark", "Claud", "Claude", "Claudia", "Claudie", "Claudine", "Clay", "Clemens", "Clement", "Clementina", "Clementine", "Clemmie", "Cleo", "Cleora", "Cleta", "Cletus", "Cleve", "Cleveland", "Clifford", "Clifton", "Clint", "Clinton", "Clotilde", "Clovis", "Cloyd", "Clyde", "Coby", "Cody", "Colby", "Cole", "Coleman", "Colin", "Colleen", "Collin", "Colt", "Colten", "Colton", "Columbus", "Concepcion", "Conner", "Connie", "Connor", "Conor", "Conrad", "Constance", "Constantin", "Consuelo", "Cooper", "Cora", "Coralie", "Corbin", "Cordelia", "Cordell", "Cordia", "Cordie", "Corene", "Corine", "Cornelius", "Cornell", "Corrine", "Cortez", "Cortney", "Cory", "Coty", "Courtney", "Coy", "Craig", "Crawford", "Creola", "Cristal", "Cristian", "Cristina", "Cristobal", "Cristopher", "Cruz", "Crystal", "Crystel", "Cullen", "Curt", "Curtis", "Cydney", "Cynthia", "Cyril", "Cyrus", "Dagmar", "Dahlia", "Daija", "Daisha", "Daisy", "Dakota", "Dale", "Dallas", "Dallin", "Dalton", "Damaris", "Dameon", "Damian", "Damien", "Damion", "Damon", "Dan", "Dana", "Dandre", "Dane", "D'angelo", "Dangelo", "Danial", "Daniela", "Daniella", "Danielle", "Danika", "Dannie", "Danny", "Dante", "Danyka", "Daphne", "Daphnee", "Daphney", "Darby", "Daren", "Darian", "Dariana", "Darien", "Dario", "Darion", "Darius", "Darlene", "Daron", "Darrel", "Darrell", "Darren", "Darrick", "Darrin", "Darrion", "Darron", "Darryl", "Darwin", "Daryl", "Dashawn", "Dasia", "Dave", "David", "Davin", "Davion", "Davon", "Davonte", "Dawn", "Dawson", "Dax", "Dayana", "Dayna", "Dayne", "Dayton", "Dean", "Deangelo", "Deanna", "Deborah", "Declan", "Dedric", "Dedrick", "Dee", "Deion", "Deja", "Dejah", "Dejon", "Dejuan", "Delaney", "Delbert", "Delfina", "Delia", "Delilah", "Dell", "Della", "Delmer", "Delores", "Delpha", "Delphia", "Delphine", "Delta", "Demarco", "Demarcus", "Demario", "Demetris", "Demetrius", "Demond", "Dena", "Denis", "Dennis", "Deon", "Deondre", "Deontae", "Deonte", "Dereck", "Derek", "Derick", "Deron", "Derrick", "Deshaun", "Deshawn", "Desiree", "Desmond", "Dessie", "Destany", "Destin", "Destinee", "Destiney", "Destini", "Destiny", "Devan", "Devante", "Deven", "Devin", "Devon", "Devonte", "Devyn", "Dewayne", "Dewitt", "Dexter", "Diamond", "Diana", "Dianna", "Diego", "Dillan", "Dillon", "Dimitri", "Dina", "Dino", "Dion", "Dixie", "Dock", "Dolly", "Dolores", "Domenic", "Domenica", "Domenick", "Domenico", "Domingo", "Dominic", "Dominique", "Don", "Donald", "Donato", "Donavon", "Donna", "Donnell", "Donnie", "Donny", "Dora", "Dorcas", "Dorian", "Doris", "Dorothea", "Dorothy", "Dorris", "Dortha", "Dorthy", "Doug", "Douglas", "Dovie", "Doyle", "Drake", "Drew", "Duane", "Dudley", "Dulce", "Duncan", "Durward", "Dustin", "Dusty", "Dwight", "Dylan", "Earl", "Earlene", "Earline", "Earnest", "Earnestine", "Easter", "Easton", "Ebba", "Ebony", "Ed", "Eda", "Edd", "Eddie", "Eden", "Edgar", "Edgardo", "Edison", "Edmond", "Edmund", "Edna", "Eduardo", "Edward", "Edwardo", "Edwin", "Edwina", "Edyth", "Edythe", "Effie", "Efrain", "Efren", "Eileen", "Einar", "Eino", "Eladio", "Elaina", "Elbert", "Elda", "Eldon", "Eldora", "Eldred", "Eldridge", "Eleanora", "Eleanore", "Eleazar", "Electa", "Elena", "Elenor", "Elenora", "Eleonore", "Elfrieda", "Eli", "Elian", "Eliane", "Elias", "Eliezer", "Elijah", "Elinor", "Elinore", "Elisa", "Elisabeth", "Elise", "Eliseo", "Elisha", "Elissa", "Eliza", "Elizabeth", "Ella", "Ellen", "Ellie", "Elliot", "Elliott", "Ellis", "Ellsworth", "Elmer", "Elmira", "Elmo", "Elmore", "Elna", "Elnora", "Elody", "Eloisa", "Eloise", "Elouise", "Eloy", "Elroy", "Elsa", "Else", "Elsie", "Elta", "Elton", "Elva", "Elvera", "Elvie", "Elvis", "Elwin", "Elwyn", "Elyse", "Elyssa", "Elza", "Emanuel", "Emelia", "Emelie", "Emely", "Emerald", "Emerson", "Emery", "Emie", "Emil", "Emile", "Emilia", "Emiliano", "Emilie", "Emilio", "Emily", "Emma", "Emmalee", "Emmanuel", "Emmanuelle", "Emmet", "Emmett", "Emmie", "Emmitt", "Emmy", "Emory", "Ena", "Enid", "Enoch", "Enola", "Enos", "Enrico", "Enrique", "Ephraim", "Era", "Eriberto", "Eric", "Erica", "Erich", "Erick", "Ericka", "Erik", "Erika", "Erin", "Erling", "Erna", "Ernest", "Ernestina", "Ernestine", "Ernesto", "Ernie", "Ervin", "Erwin", "Eryn", "Esmeralda", "Esperanza", "Esta", "Esteban", "Estefania", "Estel", "Estell", "Estella", "Estelle", "Estevan", "Esther", "Estrella", "Etha", "Ethan", "Ethel", "Ethelyn", "Ethyl", "Ettie", "Eudora", "Eugene", "Eugenia", "Eula", "Eulah", "Eulalia", "Euna", "Eunice", "Eusebio", "Eva", "Evalyn", "Evan", "Evangeline", "Evans", "Eve", "Eveline", "Evelyn", "Everardo", "Everett", "Everette", "Evert", "Evie", "Ewald", "Ewell", "Ezekiel", "Ezequiel", "Ezra", "Fabian", "Fabiola", "Fae", "Fannie", "Fanny", "Fatima", "Faustino", "Fausto", "Favian", "Fay", "Faye", "Federico", "Felicia", "Felicita", "Felicity", "Felipa", "Felipe", "Felix", "Felton", "Fermin", "Fern", "Fernando", "Ferne", "Fidel", "Filiberto", "Filomena", "Finn", "Fiona", "Flavie", "Flavio", "Fleta", "Fletcher", "Flo", "Florence", "Florencio", "Florian", "Florida", "Florine", "Flossie", "Floy", "Floyd", "Ford", "Forest", "Forrest", "Foster", "Frances", "Francesca", "Francesco", "Francis", "Francisca", "Francisco", "Franco", "Frank", "Frankie", "Franz", "Fred", "Freda", "Freddie", "Freddy", "Frederic", "Frederick", "Frederik", "Frederique", "Fredrick", "Fredy", "Freeda", "Freeman", "Freida", "Frida", "Frieda", "Friedrich", "Fritz", "Furman", "Gabe", "Gabriel", "Gabriella", "Gabrielle", "Gaetano", "Gage", "Gail", "Gardner", "Garett", "Garfield", "Garland", "Garnet", "Garnett", "Garret", "Garrett", "Garrick", "Garrison", "Garry", "Garth", "Gaston", "Gavin", "Gayle", "Gene", "General", "Genesis", "Genevieve", "Gennaro", "Genoveva", "Geo", "Geoffrey", "George", "Georgette", "Georgiana", "Georgianna", "Geovanni", "Geovanny", "Geovany", "Gerald", "Geraldine", "Gerard", "Gerardo", "Gerda", "Gerhard", "Germaine", "German", "Gerry", "Gerson", "Gertrude", "Gia", "Gianni", "Gideon", "Gilbert", "Gilberto", "Gilda", "Giles", "Gillian", "Gina", "Gino", "Giovani", "Giovanna", "Giovanni", "Giovanny", "Gisselle", "Giuseppe", "Gladyce", "Gladys", "Glen", "Glenda", "Glenna", "Glennie", "Gloria", "Godfrey", "Golda", "Golden", "Gonzalo", "Gordon", "Grace", "Gracie", "Graciela", "Grady", "Graham", "Grant", "Granville", "Grayce", "Grayson", "Green", "Greg", "Gregg", "Gregoria", "Gregorio", "Gregory", "Greta", "Gretchen", "Greyson", "Griffin", "Grover", "Guadalupe", "Gudrun", "Guido", "Guillermo", "Guiseppe", "Gunnar", "Gunner", "Gus", "Gussie", "Gust", "Gustave", "Guy", "Gwen", "Gwendolyn", "Hadley", "Hailee", "Hailey", "Hailie", "Hal", "Haleigh", "Haley", "Halie", "Halle", "Hallie", "Hank", "Hanna", "Hannah", "Hans", "Hardy", "Harley", "Harmon", "Harmony", "Harold", "Harrison", "Harry", "Harvey", "Haskell", "Hassan", "Hassie", "Hattie", "Haven", "Hayden", "Haylee", "Hayley", "Haylie", "Hazel", "Hazle", "Heath", "Heather", "Heaven", "Heber", "Hector", "Heidi", "Helen", "Helena", "Helene", "Helga", "Hellen", "Helmer", "Heloise", "Henderson", "Henri", "Henriette", "Henry", "Herbert", "Herman", "Hermann", "Hermina", "Herminia", "Herminio", "Hershel", "Herta", "Hertha", "Hester", "Hettie", "Hilario", "Hilbert", "Hilda", "Hildegard", "Hillard", "Hillary", "Hilma", "Hilton", "Hipolito", "Hiram", "Hobart", "Holden", "Hollie", "Hollis", "Holly", "Hope", "Horace", "Horacio", "Hortense", "Hosea", "Houston", "Howard", "Howell", "Hoyt", "Hubert", "Hudson", "Hugh", "Hulda", "Humberto", "Hunter", "Hyman", "Ian", "Ibrahim", "Icie", "Ida", "Idell", "Idella", "Ignacio", "Ignatius", "Ike", "Ila", "Ilene", "Iliana", "Ima", "Imani", "Imelda", "Immanuel", "Imogene", "Ines", "Irma", "Irving", "Irwin", "Isaac", "Isabel", "Isabell", "Isabella", "Isabelle", "Isac", "Isadore", "Isai", "Isaiah", "Isaias", "Isidro", "Ismael", "Isobel", "Isom", "Israel", "Issac", "Itzel", "Iva", "Ivah", "Ivory", "Ivy", "Izabella", "Izaiah", "Jabari", "Jace", "Jacey", "Jacinthe", "Jacinto", "Jack", "Jackeline", "Jackie", "Jacklyn", "Jackson", "Jacky", "Jaclyn", "Jacquelyn", "Jacques", "Jacynthe", "Jada", "Jade", "Jaden", "Jadon", "Jadyn", "Jaeden", "Jaida", "Jaiden", "Jailyn", "Jaime", "Jairo", "Jakayla", "Jake", "Jakob", "Jaleel", "Jalen", "Jalon", "Jalyn", "Jamaal", "Jamal", "Jamar", "Jamarcus", "Jamel", "Jameson", "Jamey", "Jamie", "Jamil", "Jamir", "Jamison", "Jammie", "Jan", "Jana", "Janae", "Jane", "Janelle", "Janessa", "Janet", "Janice", "Janick", "Janie", "Janis", "Janiya", "Jannie", "Jany", "Jaquan", "Jaquelin", "Jaqueline", "Jared", "Jaren", "Jarod", "Jaron", "Jarred", "Jarrell", "Jarret", "Jarrett", "Jarrod", "Jarvis", "Jasen", "Jasmin", "Jason", "Jasper", "Jaunita", "Javier", "Javon", "Javonte", "Jay", "Jayce", "Jaycee", "Jayda", "Jayde", "Jayden", "Jaydon", "Jaylan", "Jaylen", "Jaylin", "Jaylon", "Jayme", "Jayne", "Jayson", "Jazlyn", "Jazmin", "Jazmyn", "Jazmyne", "Jean", "Jeanette", "Jeanie", "Jeanne", "Jed", "Jedediah", "Jedidiah", "Jeff", "Jefferey", "Jeffery", "Jeffrey", "Jeffry", "Jena", "Jenifer", "Jennie", "Jennifer", "Jennings", "Jennyfer", "Jensen", "Jerad", "Jerald", "Jeramie", "Jeramy", "Jerel", "Jeremie", "Jeremy", "Jermain", "Jermaine", "Jermey", "Jerod", "Jerome", "Jeromy", "Jerrell", "Jerrod", "Jerrold", "Jerry", "Jess", "Jesse", "Jessica", "Jessie", "Jessika", "Jessy", "Jessyca", "Jesus", "Jett", "Jettie", "Jevon", "Jewel", "Jewell", "Jillian", "Jimmie", "Jimmy", "Jo", "Joan", "Joana", "Joanie", "Joanne", "Joannie", "Joanny", "Joany", "Joaquin", "Jocelyn", "Jodie", "Jody", "Joe", "Joel", "Joelle", "Joesph", "Joey", "Johan", "Johann", "Johanna", "Johathan", "John", "Johnathan", "Johnathon", "Johnnie", "Johnny", "Johnpaul", "Johnson", "Jolie", "Jon", "Jonas", "Jonatan", "Jonathan", "Jonathon", "Jordan", "Jordane", "Jordi", "Jordon", "Jordy", "Jordyn", "Jorge", "Jose", "Josefa", "Josefina", "Joseph", "Josephine", "Josh", "Joshua", "Joshuah", "Josiah", "Josiane", "Josianne", "Josie", "Josue", "Jovan", "Jovani", "Jovanny", "Jovany", "Joy", "Joyce", "Juana", "Juanita", "Judah", "Judd", "Jude", "Judge", "Judson", "Judy", "Jules", "Julia", "Julian", "Juliana", "Julianne", "Julie", "Julien", "Juliet", "Julio", "Julius", "June", "Junior", "Junius", "Justen", "Justice", "Justina", "Justine", "Juston", "Justus", "Justyn", "Juvenal", "Juwan", "Kacey", "Kaci", "Kacie", "Kade", "Kaden", "Kadin", "Kaela", "Kaelyn", "Kaia", "Kailee", "Kailey", "Kailyn", "Kaitlin", "Kaitlyn", "Kale", "Kaleb", "Kaleigh", "Kaley", "Kali", "Kallie", "Kameron", "Kamille", "Kamren", "Kamron", "Kamryn", "Kane", "Kara", "Kareem", "Karelle", "Karen", "Kari", "Kariane", "Karianne", "Karina", "Karine", "Karl", "Karlee", "Karley", "Karli", "Karlie", "Karolann", "Karson", "Kasandra", "Kasey", "Kassandra", "Katarina", "Katelin", "Katelyn", "Katelynn", "Katharina", "Katherine", "Katheryn", "Kathleen", "Kathlyn", "Kathryn", "Kathryne", "Katlyn", "Katlynn", "Katrina", "Katrine", "Kattie", "Kavon", "Kay", "Kaya", "Kaycee", "Kayden", "Kayla", "Kaylah", "Kaylee", "Kayleigh", "Kayley", "Kayli", "Kaylie", "Kaylin", "Keagan", "Keanu", "Keara", "Keaton", "Keegan", "Keeley", "Keely", "Keenan", "Keira", "Keith", "Kellen", "Kelley", "Kelli", "Kellie", "Kelly", "Kelsi", "Kelsie", "Kelton", "Kelvin", "Ken", "Kendall", "Kendra", "Kendrick", "Kenna", "Kennedi", "Kennedy", "Kenneth", "Kennith", "Kenny", "Kenton", "Kenya", "Kenyatta", "Kenyon", "Keon", "Keshaun", "Keshawn", "Keven", "Kevin", "Kevon", "Keyon", "Keyshawn", "Khalid", "Khalil", "Kian", "Kiana", "Kianna", "Kiara", "Kiarra", "Kiel", "Kiera", "Kieran", "Kiley", "Kim", "Kimberly", "King", "Kip", "Kira", "Kirk", "Kirsten", "Kirstin", "Kitty", "Kobe", "Koby", "Kody", "Kolby", "Kole", "Korbin", "Korey", "Kory", "Kraig", "Kris", "Krista", "Kristian", "Kristin", "Kristina", "Kristofer", "Kristoffer", "Kristopher", "Kristy", "Krystal", "Krystel", "Krystina", "Kurt", "Kurtis", "Kyla", "Kyle", "Kylee", "Kyleigh", "Kyler", "Kylie", "Kyra", "Lacey", "Lacy", "Ladarius", "Lafayette", "Laila", "Laisha", "Lamar", "Lambert", "Lamont", "Lance", "Landen", "Lane", "Laney", "Larissa", "Laron", "Larry", "Larue", "Laura", "Laurel", "Lauren", "Laurence", "Lauretta", "Lauriane", "Laurianne", "Laurie", "Laurine", "Laury", "Lauryn", "Lavada", "Lavern", "Laverna", "Laverne", "Lavina", "Lavinia", "Lavon", "Lavonne", "Lawrence", "Lawson", "Layla", "Layne", "Lazaro", "Lea", "Leann", "Leanna", "Leanne", "Leatha", "Leda", "Lee", "Leif", "Leila", "Leilani", "Lela", "Lelah", "Leland", "Lelia", "Lempi", "Lemuel", "Lenna", "Lennie", "Lenny", "Lenora", "Lenore", "Leo", "Leola", "Leon", "Leonard", "Leonardo", "Leone", "Leonel", "Leonie", "Leonor", "Leonora", "Leopold", "Leopoldo", "Leora", "Lera", "Lesley", "Leslie", "Lesly", "Lessie", "Lester", "Leta", "Letha", "Letitia", "Levi", "Lew", "Lewis", "Lexi", "Lexie", "Lexus", "Lia", "Liam", "Liana", "Libbie", "Libby", "Lila", "Lilian", "Liliana", "Liliane", "Lilla", "Lillian", "Lilliana", "Lillie", "Lilly", "Lily", "Lilyan", "Lina", "Lincoln", "Linda", "Lindsay", "Lindsey", "Linnea", "Linnie", "Linwood", "Lionel", "Lisa", "Lisandro", "Lisette", "Litzy", "Liza", "Lizeth", "Lizzie", "Llewellyn", "Lloyd", "Logan", "Lois", "Lola", "Lolita", "Loma", "Lon", "London", "Lonie", "Lonnie", "Lonny", "Lonzo", "Lora", "Loraine", "Loren", "Lorena", "Lorenz", "Lorenza", "Lorenzo", "Lori", "Lorine", "Lorna", "Lottie", "Lou", "Louie", "Louisa", "Lourdes", "Louvenia", "Lowell", "Loy", "Loyal", "Loyce", "Lucas", "Luciano", "Lucie", "Lucienne", "Lucile", "Lucinda", "Lucio", "Lucious", "Lucius", "Lucy", "Ludie", "Ludwig", "Lue", "Luella", "Luigi", "Luis", "Luisa", "Lukas", "Lula", "Lulu", "Luna", "Lupe", "Lura", "Lurline", "Luther", "Luz", "Lyda", "Lydia", "Lyla", "Lynn", "Lyric", "Lysanne", "Mabel", "Mabelle", "Mable", "Mac", "Macey", "Maci", "Macie", "Mack", "Mackenzie", "Macy", "Madaline", "Madalyn", "Maddison", "Madeline", "Madelyn", "Madelynn", "Madge", "Madie", "Madilyn", "Madisen", "Madison", "Madisyn", "Madonna", "Madyson", "Mae", "Maegan", "Maeve", "Mafalda", "Magali", "Magdalen", "Magdalena", "Maggie", "Magnolia", "Magnus", "Maia", "Maida", "Maiya", "Major", "Makayla", "Makenna", "Makenzie", "Malachi", "Malcolm", "Malika", "Malinda", "Mallie", "Mallory", "Malvina", "Mandy", "Manley", "Manuel", "Manuela", "Mara", "Marc", "Marcel", "Marcelina", "Marcelino", "Marcella", "Marcelle", "Marcellus", "Marcelo", "Marcia", "Marco", "Marcos", "Marcus", "Margaret", "Margarete", "Margarett", "Margaretta", "Margarette", "Margarita", "Marge", "Margie", "Margot", "Margret", "Marguerite", "Maria", "Mariah", "Mariam", "Marian", "Mariana", "Mariane", "Marianna", "Marianne", "Mariano", "Maribel", "Marie", "Mariela", "Marielle", "Marietta", "Marilie", "Marilou", "Marilyne", "Marina", "Mario", "Marion", "Marisa", "Marisol", "Maritza", "Marjolaine", "Marjorie", "Marjory", "Mark", "Markus", "Marlee", "Marlen", "Marlene", "Marley", "Marlin", "Marlon", "Marques", "Marquis", "Marquise", "Marshall", "Marta", "Martin", "Martina", "Martine", "Marty", "Marvin", "Mary", "Maryam", "Maryjane", "Maryse", "Mason", "Mateo", "Mathew", "Mathias", "Mathilde", "Matilda", "Matilde", "Matt", "Matteo", "Mattie", "Maud", "Maude", "Maudie", "Maureen", "Maurice", "Mauricio", "Maurine", "Maverick", "Mavis", "Max", "Maxie", "Maxime", "Maximilian", "Maximillia", "Maximillian", "Maximo", "Maximus", "Maxine", "Maxwell", "May", "Maya", "Maybell", "Maybelle", "Maye", "Maymie", "Maynard", "Mayra", "Mazie", "Mckayla", "Mckenna", "Mckenzie", "Meagan", "Meaghan", "Meda", "Megane", "Meggie", "Meghan", "Mekhi", "Melany", "Melba", "Melisa", "Melissa", "Mellie", "Melody", "Melvin", "Melvina", "Melyna", "Melyssa", "Mercedes", "Meredith", "Merl", "Merle", "Merlin", "Merritt", "Mertie", "Mervin", "Meta", "Mia", "Micaela", "Micah", "Michael", "Michaela", "Michale", "Micheal", "Michel", "Michele", "Michelle", "Miguel", "Mikayla", "Mike", "Mikel", "Milan", "Miles", "Milford", "Miller", "Millie", "Milo", "Milton", "Mina", "Minerva", "Minnie", "Miracle", "Mireille", "Mireya", "Misael", "Missouri", "Misty", "Mitchel", "Mitchell", "Mittie", "Modesta", "Modesto", "Mohamed", "Mohammad", "Mohammed", "Moises", "Mollie", "Molly", "Mona", "Monica", "Monique", "Monroe", "Monserrat", "Monserrate", "Montana", "Monte", "Monty", "Morgan", "Moriah", "Morris", "Mortimer", "Morton", "Mose", "Moses", "Moshe", "Mossie", "Mozell", "Mozelle", "Muhammad", "Muriel", "Murl", "Murphy", "Murray", "Mustafa", "Mya", "Myah", "Mylene", "Myles", "Myra", "Myriam", "Myrl", "Myrna", "Myron", "Myrtice", "Myrtie", "Myrtis", "Myrtle", "Nadia", "Nakia", "Name", "Nannie", "Naomi", "Naomie", "Napoleon", "Narciso", "Nash", "Nasir", "Nat", "Natalia", "Natalie", "Natasha", "Nathan", "Nathanael", "Nathanial", "Nathaniel", "Nathen", "Nayeli", "Neal", "Ned", "Nedra", "Neha", "Neil", "Nelda", "Nella", "Nelle", "Nellie", "Nels", "Nelson", "Neoma", "Nestor", "Nettie", "Neva", "Newell", "Newton", "Nia", "Nicholas", "Nicholaus", "Nichole", "Nick", "Nicklaus", "Nickolas", "Nico", "Nicola", "Nicolas", "Nicole", "Nicolette", "Nigel", "Nikita", "Nikki", "Nikko", "Niko", "Nikolas", "Nils", "Nina", "Noah", "Noble", "Noe", "Noel", "Noelia", "Noemi", "Noemie", "Noemy", "Nola", "Nolan", "Nona", "Nora", "Norbert", "Norberto", "Norene", "Norma", "Norris", "Norval", "Norwood", "Nova", "Novella", "Nya", "Nyah", "Nyasia", "Obie", "Oceane", "Ocie", "Octavia", "Oda", "Odell", "Odessa", "Odie", "Ofelia", "Okey", "Ola", "Olaf", "Ole", "Olen", "Oleta", "Olga", "Olin", "Oliver", "Ollie", "Oma", "Omari", "Omer", "Ona", "Onie", "Opal", "Ophelia", "Ora", "Oral", "Oran", "Oren", "Orie", "Orin", "Orion", "Orland", "Orlando", "Orlo", "Orpha", "Orrin", "Orval", "Orville", "Osbaldo", "Osborne", "Oscar", "Osvaldo", "Oswald", "Oswaldo", "Otha", "Otho", "Otilia", "Otis", "Ottilie", "Ottis", "Otto", "Ova", "Owen", "Ozella", "Pablo", "Paige", "Palma", "Pamela", "Pansy", "Paolo", "Paris", "Parker", "Pascale", "Pasquale", "Pat", "Patience", "Patricia", "Patrick", "Patsy", "Pattie", "Paul", "Paula", "Pauline", "Paxton", "Payton", "Pearl", "Pearlie", "Pearline", "Pedro", "Peggie", "Penelope", "Percival", "Percy", "Perry", "Pete", "Peter", "Petra", "Peyton", "Philip", "Phoebe", "Phyllis", "Pierce", "Pierre", "Pietro", "Pink", "Pinkie", "Piper", "Polly", "Porter", "Precious", "Presley", "Preston", "Price", "Prince", "Princess", "Priscilla", "Providenci", "Prudence", "Queen", "Queenie", "Quentin", "Quincy", "Quinn", "Quinten", "Quinton", "Rachael", "Rachel", "Rachelle", "Rae", "Raegan", "Rafael", "Rafaela", "Raheem", "Rahsaan", "Rahul", "Raina", "Raleigh", "Ralph", "Ramiro", "Ramon", "Ramona", "Randal", "Randall", "Randi", "Randy", "Ransom", "Raoul", "Raphael", "Raphaelle", "Raquel", "Rashad", "Rashawn", "Rasheed", "Raul", "Raven", "Ray", "Raymond", "Raymundo", "Reagan", "Reanna", "Reba", "Rebeca", "Rebecca", "Rebeka", "Rebekah", "Reece", "Reed", "Reese", "Regan", "Reggie", "Reginald", "Reid", "Reilly", "Reina", "Reinhold", "Remington", "Rene", "Renee", "Ressie", "Reta", "Retha", "Retta", "Reuben", "Reva", "Rex", "Rey", "Reyes", "Reymundo", "Reyna", "Reynold", "Rhea", "Rhett", "Rhianna", "Rhiannon", "Rhoda", "Ricardo", "Richard", "Richie", "Richmond", "Rick", "Rickey", "Rickie", "Ricky", "Rico", "Rigoberto", "Riley", "Rita", "River", "Robb", "Robbie", "Robert", "Roberta", "Roberto", "Robin", "Robyn", "Rocio", "Rocky", "Rod", "Roderick", "Rodger", "Rodolfo", "Rodrick", "Rodrigo", "Roel", "Rogelio", "Roger", "Rogers", "Rolando", "Rollin", "Roma", "Romaine", "Roman", "Ron", "Ronaldo", "Ronny", "Roosevelt", "Rory", "Rosa", "Rosalee", "Rosalia", "Rosalind", "Rosalinda", "Rosalyn", "Rosamond", "Rosanna", "Rosario", "Roscoe", "Rose", "Rosella", "Roselyn", "Rosemarie", "Rosemary", "Rosendo", "Rosetta", "Rosie", "Rosina", "Roslyn", "Ross", "Rossie", "Rowan", "Rowena", "Rowland", "Roxane", "Roxanne", "Roy", "Royal", "Royce", "Rozella", "Ruben", "Rubie", "Ruby", "Rubye", "Rudolph", "Rudy", "Rupert", "Russ", "Russel", "Russell", "Rusty", "Ruth", "Ruthe", "Ruthie", "Ryan", "Ryann", "Ryder", "Rylan", "Rylee", "Ryleigh", "Ryley", "Sabina", "Sabrina", "Sabryna", "Sadie", "Sadye", "Sage", "Saige", "Sallie", "Sally", "Salma", "Salvador", "Salvatore", "Sam", "Samanta", "Samantha", "Samara", "Samir", "Sammie", "Sammy", "Samson", "Sandra", "Sandrine", "Sandy", "Sanford", "Santa", "Santiago", "Santina", "Santino", "Santos", "Sarah", "Sarai", "Sarina", "Sasha", "Saul", "Savanah", "Savanna", "Savannah", "Savion", "Scarlett", "Schuyler", "Scot", "Scottie", "Scotty", "Seamus", "Sean", "Sebastian", "Sedrick", "Selena", "Selina", "Selmer", "Serena", "Serenity", "Seth", "Shad", "Shaina", "Shakira", "Shana", "Shane", "Shanel", "Shanelle", "Shania", "Shanie", "Shaniya", "Shanna", "Shannon", "Shanny", "Shanon", "Shany", "Sharon", "Shaun", "Shawn", "Shawna", "Shaylee", "Shayna", "Shayne", "Shea", "Sheila", "Sheldon", "Shemar", "Sheridan", "Sherman", "Sherwood", "Shirley", "Shyann", "Shyanne", "Sibyl", "Sid", "Sidney", "Sienna", "Sierra", "Sigmund", "Sigrid", "Sigurd", "Silas", "Sim", "Simeon", "Simone", "Sincere", "Sister", "Skye", "Skyla", "Skylar", "Sofia", "Soledad", "Solon", "Sonia", "Sonny", "Sonya", "Sophia", "Sophie", "Spencer", "Stacey", "Stacy", "Stan", "Stanford", "Stanley", "Stanton", "Stefan", "Stefanie", "Stella", "Stephan", "Stephania", "Stephanie", "Stephany", "Stephen", "Stephon", "Sterling", "Steve", "Stevie", "Stewart", "Stone", "Stuart", "Summer", "Sunny", "Susan", "Susana", "Susanna", "Susie", "Suzanne", "Sven", "Syble", "Sydnee", "Sydney", "Sydni", "Sydnie", "Sylvan", "Sylvester", "Sylvia", "Tabitha", "Tad", "Talia", "Talon", "Tamara", "Tamia", "Tania", "Tanner", "Tanya", "Tara", "Taryn", "Tate", "Tatum", "Tatyana", "Taurean", "Tavares", "Taya", "Taylor", "Teagan", "Ted", "Telly", "Terence", "Teresa", "Terrance", "Terrell", "Terrence", "Terrill", "Terry", "Tess", "Tessie", "Tevin", "Thad", "Thaddeus", "Thalia", "Thea", "Thelma", "Theo", "Theodora", "Theodore", "Theresa", "Therese", "Theresia", "Theron", "Thomas", "Thora", "Thurman", "Tia", "Tiana", "Tianna", "Tiara", "Tierra", "Tiffany", "Tillman", "Timmothy", "Timmy", "Timothy", "Tina", "Tito", "Titus", "Tobin", "Toby", "Tod", "Tom", "Tomas", "Tomasa", "Tommie", "Toney", "Toni", "Tony", "Torey", "Torrance", "Torrey", "Toy", "Trace", "Tracey", "Tracy", "Travis", "Travon", "Tre", "Tremaine", "Tremayne", "Trent", "Trenton", "Tressa", "Tressie", "Treva", "Trever", "Trevion", "Trevor", "Trey", "Trinity", "Trisha", "Tristian", "Tristin", "Triston", "Troy", "Trudie", "Trycia", "Trystan", "Turner", "Twila", "Tyler", "Tyra", "Tyree", "Tyreek", "Tyrel", "Tyrell", "Tyrese", "Tyrique", "Tyshawn", "Tyson", "Ubaldo", "Ulices", "Ulises", "Una", "Unique", "Urban", "Uriah", "Uriel", "Ursula", "Vada", "Valentin", "Valentina", "Valentine", "Valerie", "Vallie", "Van", "Vance", "Vanessa", "Vaughn", "Veda", "Velda", "Vella", "Velma", "Velva", "Vena", "Verda", "Verdie", "Vergie", "Verla", "Verlie", "Vern", "Verna", "Verner", "Vernice", "Vernie", "Vernon", "Verona", "Veronica", "Vesta", "Vicenta", "Vicente", "Vickie", "Vicky", "Victor", "Victoria", "Vida", "Vidal", "Vilma", "Vince", "Vincent", "Vincenza", "Vincenzo", "Vinnie", "Viola", "Violet", "Violette", "Virgie", "Virgil", "Virginia", "Virginie", "Vita", "Vito", "Viva", "Vivian", "Viviane", "Vivianne", "Vivien", "Vivienne", "Vladimir", "Wade", "Waino", "Waldo", "Walker", "Wallace", "Walter", "Walton", "Wanda", "Ward", "Warren", "Watson", "Wava", "Waylon", "Wayne", "Webster", "Weldon", "Wellington", "Wendell", "Wendy", "Werner", "Westley", "Weston", "Whitney", "Wilber", "Wilbert", "Wilburn", "Wiley", "Wilford", "Wilfred", "Wilfredo", "Wilfrid", "Wilhelm", "Wilhelmine", "Will", "Willa", "Willard", "William", "Willie", "Willis", "Willow", "Willy", "Wilma", "Wilmer", "Wilson", "Wilton", "Winfield", "Winifred", "Winnifred", "Winona", "Winston", "Woodrow", "Wyatt", "Wyman", "Xander", "Xavier", "Xzavier", "Yadira", "Yasmeen", "Yasmin", "Yasmine", "Yazmin", "Yesenia", "Yessenia", "Yolanda", "Yoshiko", "Yvette", "Yvonne", "Zachariah", "Zachary", "Zachery", "Zack", "Zackary", "Zackery", "Zakary", "Zander", "Zane", "Zaria", "Zechariah", "Zelda", "Zella", "Zelma", "Zena", "Zetta", "Zion", "Zita", "Zoe", "Zoey", "Zoie", "Zoila", "Zola", "Zora", "Zula"];
var Ye = ["Agender", "Androgyne", "Androgynous", "Bigender", "Cis female", "Cis male", "Cis man", "Cis woman", "Cis", "Cisgender female", "Cisgender male", "Cisgender man", "Cisgender woman", "Cisgender", "Demi-boy", "Demi-girl", "Demi-man", "Demi-woman", "Demiflux", "Demigender", "F2M", "FTM", "Female to male trans man", "Female to male transgender man", "Female to male transsexual man", "Female to male", "Gender fluid", "Gender neutral", "Gender nonconforming", "Gender questioning", "Gender variant", "Genderflux", "Genderqueer", "Hermaphrodite", "Intersex man", "Intersex person", "Intersex woman", "Intersex", "M2F", "MTF", "Male to female trans woman", "Male to female transgender woman", "Male to female transsexual woman", "Male to female", "Man", "Multigender", "Neither", "Neutrois", "Non-binary", "Omnigender", "Other", "Pangender", "Polygender", "T* man", "T* woman", "Trans female", "Trans male", "Trans man", "Trans person", "Trans woman", "Trans", "Transexual female", "Transexual male", "Transexual man", "Transexual person", "Transexual woman", "Transexual", "Transgender female", "Transgender person", "Transmasculine", "Trigender", "Two* person", "Two-spirit person", "Two-spirit", "Woman", "Xenogender"];
var Ue = ["{{person.jobDescriptor}} {{person.jobArea}} {{person.jobType}}"];
var _e = ["Abbott", "Abernathy", "Abshire", "Adams", "Altenwerth", "Anderson", "Ankunding", "Armstrong", "Auer", "Aufderhar", "Bahringer", "Bailey", "Balistreri", "Barrows", "Bartell", "Bartoletti", "Barton", "Bashirian", "Batz", "Bauch", "Baumbach", "Bayer", "Beahan", "Beatty", "Bechtelar", "Becker", "Bednar", "Beer", "Beier", "Berge", "Bergnaum", "Bergstrom", "Bernhard", "Bernier", "Bins", "Blanda", "Blick", "Block", "Bode", "Boehm", "Bogan", "Bogisich", "Borer", "Bosco", "Botsford", "Boyer", "Boyle", "Bradtke", "Brakus", "Braun", "Breitenberg", "Brekke", "Brown", "Bruen", "Buckridge", "Carroll", "Carter", "Cartwright", "Casper", "Cassin", "Champlin", "Christiansen", "Cole", "Collier", "Collins", "Conn", "Connelly", "Conroy", "Considine", "Corkery", "Cormier", "Corwin", "Cremin", "Crist", "Crona", "Cronin", "Crooks", "Cruickshank", "Cummerata", "Cummings", "Dach", "D'Amore", "Daniel", "Dare", "Daugherty", "Davis", "Deckow", "Denesik", "Dibbert", "Dickens", "Dicki", "Dickinson", "Dietrich", "Donnelly", "Dooley", "Douglas", "Doyle", "DuBuque", "Durgan", "Ebert", "Effertz", "Emard", "Emmerich", "Erdman", "Ernser", "Fadel", "Fahey", "Farrell", "Fay", "Feeney", "Feest", "Feil", "Ferry", "Fisher", "Flatley", "Frami", "Franecki", "Franey", "Friesen", "Fritsch", "Funk", "Gerhold", "Gerlach", "Gibson", "Gislason", "Gleason", "Gleichner", "Glover", "Goldner", "Goodwin", "Gorczany", "Gottlieb", "Goyette", "Grady", "Graham", "Grant", "Green", "Greenfelder", "Greenholt", "Grimes", "Gulgowski", "Gusikowski", "Gutkowski", "Gutmann", "Haag", "Hackett", "Hagenes", "Hahn", "Haley", "Halvorson", "Hamill", "Hammes", "Hand", "Hane", "Hansen", "Harber", "Harris", "Hartmann", "Harvey", "Hauck", "Hayes", "Heaney", "Heathcote", "Hegmann", "Heidenreich", "Heller", "Herman", "Hermann", "Hermiston", "Herzog", "Hessel", "Hettinger", "Hickle", "Hilll", "Hills", "Hilpert", "Hintz", "Hirthe", "Hodkiewicz", "Hoeger", "Homenick", "Hoppe", "Howe", "Howell", "Hudson", "Huel", "Huels", "Hyatt", "Jacobi", "Jacobs", "Jacobson", "Jakubowski", "Jaskolski", "Jast", "Jenkins", "Jerde", "Johns", "Johnson", "Johnston", "Jones", "Kassulke", "Kautzer", "Keebler", "Keeling", "Kemmer", "Kerluke", "Kertzmann", "Kessler", "Kiehn", "Kihn", "Kilback", "King", "Kirlin", "Klein", "Kling", "Klocko", "Koch", "Koelpin", "Koepp", "Kohler", "Konopelski", "Koss", "Kovacek", "Kozey", "Krajcik", "Kreiger", "Kris", "Kshlerin", "Kub", "Kuhic", "Kuhlman", "Kuhn", "Kulas", "Kunde", "Kunze", "Kuphal", "Kutch", "Kuvalis", "Labadie", "Lakin", "Lang", "Langosh", "Langworth", "Larkin", "Larson", "Leannon", "Lebsack", "Ledner", "Leffler", "Legros", "Lehner", "Lemke", "Lesch", "Leuschke", "Lind", "Lindgren", "Littel", "Little", "Lockman", "Lowe", "Lubowitz", "Lueilwitz", "Luettgen", "Lynch", "Macejkovic", "MacGyver", "Maggio", "Mann", "Mante", "Marks", "Marquardt", "Marvin", "Mayer", "Mayert", "McClure", "McCullough", "McDermott", "McGlynn", "McKenzie", "McLaughlin", "Medhurst", "Mertz", "Metz", "Miller", "Mills", "Mitchell", "Moen", "Mohr", "Monahan", "Moore", "Morar", "Morissette", "Mosciski", "Mraz", "Mueller", "Muller", "Murazik", "Murphy", "Murray", "Nader", "Nicolas", "Nienow", "Nikolaus", "Nitzsche", "Nolan", "Oberbrunner", "O'Connell", "O'Conner", "O'Hara", "O'Keefe", "O'Kon", "Okuneva", "Olson", "Ondricka", "O'Reilly", "Orn", "Ortiz", "Osinski", "Pacocha", "Padberg", "Pagac", "Parisian", "Parker", "Paucek", "Pfannerstill", "Pfeffer", "Pollich", "Pouros", "Powlowski", "Predovic", "Price", "Prohaska", "Prosacco", "Purdy", "Quigley", "Quitzon", "Rath", "Ratke", "Rau", "Raynor", "Reichel", "Reichert", "Reilly", "Reinger", "Rempel", "Renner", "Reynolds", "Rice", "Rippin", "Ritchie", "Robel", "Roberts", "Rodriguez", "Rogahn", "Rohan", "Rolfson", "Romaguera", "Roob", "Rosenbaum", "Rowe", "Ruecker", "Runolfsdottir", "Runolfsson", "Runte", "Russel", "Rutherford", "Ryan", "Sanford", "Satterfield", "Sauer", "Sawayn", "Schaden", "Schaefer", "Schamberger", "Schiller", "Schimmel", "Schinner", "Schmeler", "Schmidt", "Schmitt", "Schneider", "Schoen", "Schowalter", "Schroeder", "Schulist", "Schultz", "Schumm", "Schuppe", "Schuster", "Senger", "Shanahan", "Shields", "Simonis", "Sipes", "Skiles", "Smith", "Smitham", "Spencer", "Spinka", "Sporer", "Stamm", "Stanton", "Stark", "Stehr", "Steuber", "Stiedemann", "Stokes", "Stoltenberg", "Stracke", "Streich", "Stroman", "Strosin", "Swaniawski", "Swift", "Terry", "Thiel", "Thompson", "Tillman", "Torp", "Torphy", "Towne", "Toy", "Trantow", "Tremblay", "Treutel", "Tromp", "Turcotte", "Turner", "Ullrich", "Upton", "Vandervort", "Veum", "Volkman", "Von", "VonRueden", "Waelchi", "Walker", "Walsh", "Walter", "Ward", "Waters", "Watsica", "Weber", "Wehner", "Weimann", "Weissnat", "Welch", "West", "White", "Wiegand", "Wilderman", "Wilkinson", "Will", "Williamson", "Willms", "Windler", "Wintheiser", "Wisoky", "Wisozk", "Witting", "Wiza", "Wolf", "Wolff", "Wuckert", "Wunsch", "Wyman", "Yost", "Yundt", "Zboncak", "Zemlak", "Ziemann", "Zieme", "Zulauf"];
var Ze = [{ value: "{{person.last_name}}", weight: 95 }, { value: "{{person.last_name}}-{{person.last_name}}", weight: 5 }];
var Qe = ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Charles", "Joseph", "Thomas", "Christopher", "Daniel", "Paul", "Mark", "Donald", "George", "Kenneth", "Steven", "Edward", "Brian", "Ronald", "Anthony", "Kevin", "Jason", "Matthew", "Gary", "Timothy", "Jose", "Larry", "Jeffrey", "Frank", "Scott", "Eric", "Stephen", "Andrew", "Raymond", "Gregory", "Joshua", "Jerry", "Dennis", "Walter", "Patrick", "Peter", "Harold", "Douglas", "Henry", "Carl", "Arthur", "Ryan", "Roger", "Joe", "Juan", "Jack", "Albert", "Jonathan", "Justin", "Terry", "Gerald", "Keith", "Samuel", "Willie", "Ralph", "Lawrence", "Nicholas", "Roy", "Benjamin", "Bruce", "Brandon", "Adam", "Harry", "Fred", "Wayne", "Billy", "Steve", "Louis", "Jeremy", "Aaron", "Randy", "Howard", "Eugene", "Carlos", "Russell", "Bobby", "Victor", "Martin", "Ernest", "Phillip", "Todd", "Jesse", "Craig", "Alan", "Shawn", "Clarence", "Sean", "Philip", "Chris", "Johnny", "Earl", "Jimmy", "Antonio", "Danny", "Bryan", "Tony", "Luis", "Mike", "Stanley", "Leonard", "Nathan", "Dale", "Manuel", "Rodney", "Curtis", "Norman", "Allen", "Marvin", "Vincent", "Glenn", "Jeffery", "Travis", "Jeff", "Chad", "Jacob", "Lee", "Melvin", "Alfred", "Kyle", "Francis", "Bradley", "Jesus", "Herbert", "Frederick", "Ray", "Joel", "Edwin", "Don", "Eddie", "Ricky", "Troy", "Randall", "Barry", "Alexander", "Bernard", "Mario", "Leroy", "Francisco", "Marcus", "Micheal", "Theodore", "Clifford", "Miguel", "Oscar", "Jay", "Jim", "Tom", "Calvin", "Alex", "Jon", "Ronnie", "Bill", "Lloyd", "Tommy", "Leon", "Derek", "Warren", "Darrell", "Jerome", "Floyd", "Leo", "Alvin", "Tim", "Wesley", "Gordon", "Dean", "Greg", "Jorge", "Dustin", "Pedro", "Derrick", "Dan", "Lewis", "Zachary", "Corey", "Herman", "Maurice", "Vernon", "Roberto", "Clyde", "Glen", "Hector", "Shane", "Ricardo", "Sam", "Rick", "Lester", "Brent", "Ramon", "Charlie", "Tyler", "Gilbert", "Gene", "Marc", "Reginald", "Ruben", "Brett", "Angel", "Nathaniel", "Rafael", "Leslie", "Edgar", "Milton", "Raul", "Ben", "Chester", "Cecil", "Duane", "Franklin", "Andre", "Elmer", "Brad", "Gabriel", "Ron", "Mitchell", "Roland", "Arnold", "Harvey", "Jared", "Adrian", "Karl", "Cory", "Claude", "Erik", "Darryl", "Jamie", "Neil", "Jessie", "Christian", "Javier", "Fernando", "Clinton", "Ted", "Mathew", "Tyrone", "Darren", "Lonnie", "Lance", "Cody", "Julio", "Kelly", "Kurt", "Allan", "Nelson", "Guy", "Clayton", "Hugh", "Max", "Dwayne", "Dwight", "Armando", "Felix", "Jimmie", "Everett", "Jordan", "Ian", "Wallace", "Ken", "Bob", "Jaime", "Casey", "Alfredo", "Alberto", "Dave", "Ivan", "Johnnie", "Sidney", "Byron", "Julian", "Isaac", "Morris", "Clifton", "Willard", "Daryl", "Ross", "Virgil", "Andy", "Marshall", "Salvador", "Perry", "Kirk", "Sergio", "Marion", "Tracy", "Seth", "Kent", "Terrance", "Rene", "Eduardo", "Terrence", "Enrique", "Freddie", "Wade", "Austin", "Stuart", "Fredrick", "Arturo", "Alejandro", "Jackie", "Joey", "Nick", "Luther", "Wendell", "Jeremiah", "Evan", "Julius", "Dana", "Donnie", "Otis", "Shannon", "Trevor", "Oliver", "Luke", "Homer", "Gerard", "Doug", "Kenny", "Hubert", "Angelo", "Shaun", "Lyle", "Matt", "Lynn", "Alfonso", "Orlando", "Rex", "Carlton", "Ernesto", "Cameron", "Neal", "Pablo", "Lorenzo", "Omar", "Wilbur", "Blake", "Grant", "Horace", "Roderick", "Kerry", "Abraham", "Willis", "Rickey", "Jean", "Ira", "Andres", "Cesar", "Johnathan", "Malcolm", "Rudolph", "Damon", "Kelvin", "Rudy", "Preston", "Alton", "Archie", "Marco", "Wm", "Pete", "Randolph", "Garry", "Geoffrey", "Jonathon", "Felipe", "Bennie", "Gerardo", "Ed", "Dominic", "Robin", "Loren", "Delbert", "Colin", "Guillermo", "Earnest", "Lucas", "Benny", "Noel", "Spencer", "Rodolfo", "Myron", "Edmund", "Garrett", "Salvatore", "Cedric", "Lowell", "Gregg", "Sherman", "Wilson", "Devin", "Sylvester", "Kim", "Roosevelt", "Israel", "Jermaine", "Forrest", "Wilbert", "Leland", "Simon", "Guadalupe", "Clark", "Irving", "Carroll", "Bryant", "Owen", "Rufus", "Woodrow", "Sammy", "Kristopher", "Mack", "Levi", "Marcos", "Gustavo", "Jake", "Lionel", "Marty", "Taylor", "Ellis", "Dallas", "Gilberto", "Clint", "Nicolas", "Laurence", "Ismael", "Orville", "Drew", "Jody", "Ervin", "Dewey", "Al", "Wilfred", "Josh", "Hugo", "Ignacio", "Caleb", "Tomas", "Sheldon", "Erick", "Frankie", "Stewart", "Doyle", "Darrel", "Rogelio", "Terence", "Santiago", "Alonzo", "Elias", "Bert", "Elbert", "Ramiro", "Conrad", "Pat", "Noah", "Grady", "Phil", "Cornelius", "Lamar", "Rolando", "Clay", "Percy", "Dexter", "Bradford", "Merle", "Darin", "Amos", "Terrell", "Moses", "Irvin", "Saul", "Roman", "Darnell", "Randal", "Tommie", "Timmy", "Darrin", "Winston", "Brendan", "Toby", "Van", "Abel", "Dominick", "Boyd", "Courtney", "Jan", "Emilio", "Elijah", "Cary", "Domingo", "Santos", "Aubrey", "Emmett", "Marlon", "Emanuel", "Jerald", "Edmond"];
var Xe = ["Ace", "Aiden", "Alexander", "Ander", "Anthony", "Asher", "August", "Aziel", "Bear", "Beckham", "Benjamin", "Buddy", "Calvin", "Carter", "Charles", "Christopher", "Clyde", "Cooper", "Daniel", "David", "Dior", "Dylan", "Elijah", "Ellis", "Emerson", "Ethan", "Ezra", "Fletcher", "Flynn", "Gabriel", "Grayson", "Gus", "Hank", "Harrison", "Hendrix", "Henry", "Houston", "Hudson", "Hugh", "Isaac", "Jack", "Jackson", "Jacob", "Jakobe", "James", "Jaxon", "Jaxtyn", "Jayden", "John", "Joseph", "Josiah", "Jude", "Julian", "Karsyn", "Kenji", "Kobe", "Kylo", "Lennon", "Leo", "Levi", "Liam", "Lincoln", "Logan", "Louis", "Lucas", "Lucky", "Luke", "Mason", "Mateo", "Matthew", "Maverick", "Michael", "Monroe", "Nixon", "Ocean", "Oliver", "Otis", "Otto", "Owen", "Ozzy", "Parker", "Rocky", "Samuel", "Sebastian", "Sonny", "Teddy", "Theo", "Theodore", "Thomas", "Truett", "Walter", "Warren", "Watson", "William", "Wison", "Wyatt", "Ziggy", "Zyair"];
var a = ["Mr.", "Dr."];
var $e = ["Addison", "Alex", "Anderson", "Angel", "Arden", "August", "Austin", "Avery", "Bailey", "Billie", "Blake", "Bowie", "Brooklyn", "Cameron", "Charlie", "Corey", "Dakota", "Drew", "Elliott", "Ellis", "Emerson", "Finley", "Gray", "Greer", "Harper", "Hayden", "Jaden", "James", "Jamie", "Jordan", "Jules", "Kai", "Kendall", "Kennedy", "Kyle", "Leslie", "Logan", "London", "Marlowe", "Micah", "Nico", "Noah", "North", "Parker", "Phoenix", "Quinn", "Reagan", "Reese", "Reign", "Riley", "River", "Robin", "Rory", "Rowan", "Ryan", "Sage", "Sasha", "Sawyer", "Shawn", "Shiloh", "Skyler", "Taylor"];
var ea = [{ value: "{{person.firstName}} {{person.lastName}}", weight: 49 }, { value: "{{person.prefix}} {{person.firstName}} {{person.lastName}}", weight: 7 }, { value: "{{person.firstName}} {{person.lastName}} {{person.suffix}}", weight: 7 }, { value: "{{person.prefix}} {{person.firstName}} {{person.lastName}} {{person.suffix}}", weight: 1 }];
function aa(...Da) {
  return [...new Set(Da.flat())].sort();
}
var ra = aa(e, a);
var ia = ["female", "male"];
var oa = ["Jr.", "Sr.", "I", "II", "III", "IV", "V", "MD", "DDS", "PhD", "DVM"];
var na = { descriptor: ["Lead", "Senior", "Direct", "Corporate", "Dynamic", "Future", "Product", "National", "Regional", "District", "Central", "Global", "Customer", "Investor", "International", "Legacy", "Forward", "Internal", "Human", "Chief", "Principal"], level: ["Solutions", "Program", "Brand", "Security", "Research", "Marketing", "Directives", "Implementation", "Integration", "Functionality", "Response", "Paradigm", "Tactics", "Identity", "Markets", "Group", "Division", "Applications", "Optimization", "Operations", "Infrastructure", "Intranet", "Communications", "Web", "Branding", "Quality", "Assurance", "Mobility", "Accounts", "Data", "Creative", "Configuration", "Accountability", "Interactions", "Factors", "Usability", "Metrics"], job: ["Supervisor", "Associate", "Executive", "Liaison", "Officer", "Manager", "Engineer", "Specialist", "Director", "Coordinator", "Administrator", "Architect", "Analyst", "Designer", "Planner", "Orchestrator", "Technician", "Developer", "Producer", "Consultant", "Assistant", "Facilitator", "Agent", "Representative", "Strategist"] };
var ta = ["Aquarius", "Pisces", "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn"];
var Ua = { bio_part: Ke, bio_pattern: Ie, bio_supporter: Oe, female_first_name: qe, female_middle_name: je, female_prefix: e, first_name: Ve, gender: Ye, job_title_pattern: Ue, last_name: _e, last_name_pattern: Ze, male_first_name: Qe, male_middle_name: Xe, male_prefix: a, middle_name: $e, name: ea, prefix: ra, sex: ia, suffix: oa, title: na, western_zodiac_sign: ta };
var la = Ua;
var sa = ["!##-!##-####", "(!##) !##-####", "1-!##-!##-####", "!##.!##.####", "!##-!##-#### x###", "(!##) !##-#### x###", "1-!##-!##-#### x###", "!##.!##.#### x###", "!##-!##-#### x####", "(!##) !##-#### x####", "1-!##-!##-#### x####", "!##.!##.#### x####", "!##-!##-#### x#####", "(!##) !##-#### x#####", "1-!##-!##-#### x#####", "!##.!##.#### x#####"];
var _a = { formats: sa };
var da = _a;
var ca = Object.freeze([{ symbol: "H", name: "Hydrogen", atomicNumber: 1 }, { symbol: "He", name: "Helium", atomicNumber: 2 }, { symbol: "Li", name: "Lithium", atomicNumber: 3 }, { symbol: "Be", name: "Beryllium", atomicNumber: 4 }, { symbol: "B", name: "Boron", atomicNumber: 5 }, { symbol: "C", name: "Carbon", atomicNumber: 6 }, { symbol: "N", name: "Nitrogen", atomicNumber: 7 }, { symbol: "O", name: "Oxygen", atomicNumber: 8 }, { symbol: "F", name: "Fluorine", atomicNumber: 9 }, { symbol: "Ne", name: "Neon", atomicNumber: 10 }, { symbol: "Na", name: "Sodium", atomicNumber: 11 }, { symbol: "Mg", name: "Magnesium", atomicNumber: 12 }, { symbol: "Al", name: "Aluminium", atomicNumber: 13 }, { symbol: "Si", name: "Silicon", atomicNumber: 14 }, { symbol: "P", name: "Phosphorus", atomicNumber: 15 }, { symbol: "S", name: "Sulfur", atomicNumber: 16 }, { symbol: "Cl", name: "Chlorine", atomicNumber: 17 }, { symbol: "Ar", name: "Argon", atomicNumber: 18 }, { symbol: "K", name: "Potassium", atomicNumber: 19 }, { symbol: "Ca", name: "Calcium", atomicNumber: 20 }, { symbol: "Sc", name: "Scandium", atomicNumber: 21 }, { symbol: "Ti", name: "Titanium", atomicNumber: 22 }, { symbol: "V", name: "Vanadium", atomicNumber: 23 }, { symbol: "Cr", name: "Chromium", atomicNumber: 24 }, { symbol: "Mn", name: "Manganese", atomicNumber: 25 }, { symbol: "Fe", name: "Iron", atomicNumber: 26 }, { symbol: "Co", name: "Cobalt", atomicNumber: 27 }, { symbol: "Ni", name: "Nickel", atomicNumber: 28 }, { symbol: "Cu", name: "Copper", atomicNumber: 29 }, { symbol: "Zn", name: "Zinc", atomicNumber: 30 }, { symbol: "Ga", name: "Gallium", atomicNumber: 31 }, { symbol: "Ge", name: "Germanium", atomicNumber: 32 }, { symbol: "As", name: "Arsenic", atomicNumber: 33 }, { symbol: "Se", name: "Selenium", atomicNumber: 34 }, { symbol: "Br", name: "Bromine", atomicNumber: 35 }, { symbol: "Kr", name: "Krypton", atomicNumber: 36 }, { symbol: "Rb", name: "Rubidium", atomicNumber: 37 }, { symbol: "Sr", name: "Strontium", atomicNumber: 38 }, { symbol: "Y", name: "Yttrium", atomicNumber: 39 }, { symbol: "Zr", name: "Zirconium", atomicNumber: 40 }, { symbol: "Nb", name: "Niobium", atomicNumber: 41 }, { symbol: "Mo", name: "Molybdenum", atomicNumber: 42 }, { symbol: "Tc", name: "Technetium", atomicNumber: 43 }, { symbol: "Ru", name: "Ruthenium", atomicNumber: 44 }, { symbol: "Rh", name: "Rhodium", atomicNumber: 45 }, { symbol: "Pd", name: "Palladium", atomicNumber: 46 }, { symbol: "Ag", name: "Silver", atomicNumber: 47 }, { symbol: "Cd", name: "Cadmium", atomicNumber: 48 }, { symbol: "In", name: "Indium", atomicNumber: 49 }, { symbol: "Sn", name: "Tin", atomicNumber: 50 }, { symbol: "Sb", name: "Antimony", atomicNumber: 51 }, { symbol: "Te", name: "Tellurium", atomicNumber: 52 }, { symbol: "I", name: "Iodine", atomicNumber: 53 }, { symbol: "Xe", name: "Xenon", atomicNumber: 54 }, { symbol: "Cs", name: "Caesium", atomicNumber: 55 }, { symbol: "Ba", name: "Barium", atomicNumber: 56 }, { symbol: "La", name: "Lanthanum", atomicNumber: 57 }, { symbol: "Ce", name: "Cerium", atomicNumber: 58 }, { symbol: "Pr", name: "Praseodymium", atomicNumber: 59 }, { symbol: "Nd", name: "Neodymium", atomicNumber: 60 }, { symbol: "Pm", name: "Promethium", atomicNumber: 61 }, { symbol: "Sm", name: "Samarium", atomicNumber: 62 }, { symbol: "Eu", name: "Europium", atomicNumber: 63 }, { symbol: "Gd", name: "Gadolinium", atomicNumber: 64 }, { symbol: "Tb", name: "Terbium", atomicNumber: 65 }, { symbol: "Dy", name: "Dysprosium", atomicNumber: 66 }, { symbol: "Ho", name: "Holmium", atomicNumber: 67 }, { symbol: "Er", name: "Erbium", atomicNumber: 68 }, { symbol: "Tm", name: "Thulium", atomicNumber: 69 }, { symbol: "Yb", name: "Ytterbium", atomicNumber: 70 }, { symbol: "Lu", name: "Lutetium", atomicNumber: 71 }, { symbol: "Hf", name: "Hafnium", atomicNumber: 72 }, { symbol: "Ta", name: "Tantalum", atomicNumber: 73 }, { symbol: "W", name: "Tungsten", atomicNumber: 74 }, { symbol: "Re", name: "Rhenium", atomicNumber: 75 }, { symbol: "Os", name: "Osmium", atomicNumber: 76 }, { symbol: "Ir", name: "Iridium", atomicNumber: 77 }, { symbol: "Pt", name: "Platinum", atomicNumber: 78 }, { symbol: "Au", name: "Gold", atomicNumber: 79 }, { symbol: "Hg", name: "Mercury", atomicNumber: 80 }, { symbol: "Tl", name: "Thallium", atomicNumber: 81 }, { symbol: "Pb", name: "Lead", atomicNumber: 82 }, { symbol: "Bi", name: "Bismuth", atomicNumber: 83 }, { symbol: "Po", name: "Polonium", atomicNumber: 84 }, { symbol: "At", name: "Astatine", atomicNumber: 85 }, { symbol: "Rn", name: "Radon", atomicNumber: 86 }, { symbol: "Fr", name: "Francium", atomicNumber: 87 }, { symbol: "Ra", name: "Radium", atomicNumber: 88 }, { symbol: "Ac", name: "Actinium", atomicNumber: 89 }, { symbol: "Th", name: "Thorium", atomicNumber: 90 }, { symbol: "Pa", name: "Protactinium", atomicNumber: 91 }, { symbol: "U", name: "Uranium", atomicNumber: 92 }, { symbol: "Np", name: "Neptunium", atomicNumber: 93 }, { symbol: "Pu", name: "Plutonium", atomicNumber: 94 }, { symbol: "Am", name: "Americium", atomicNumber: 95 }, { symbol: "Cm", name: "Curium", atomicNumber: 96 }, { symbol: "Bk", name: "Berkelium", atomicNumber: 97 }, { symbol: "Cf", name: "Californium", atomicNumber: 98 }, { symbol: "Es", name: "Einsteinium", atomicNumber: 99 }, { symbol: "Fm", name: "Fermium", atomicNumber: 100 }, { symbol: "Md", name: "Mendelevium", atomicNumber: 101 }, { symbol: "No", name: "Nobelium", atomicNumber: 102 }, { symbol: "Lr", name: "Lawrencium", atomicNumber: 103 }, { symbol: "Rf", name: "Rutherfordium", atomicNumber: 104 }, { symbol: "Db", name: "Dubnium", atomicNumber: 105 }, { symbol: "Sg", name: "Seaborgium", atomicNumber: 106 }, { symbol: "Bh", name: "Bohrium", atomicNumber: 107 }, { symbol: "Hs", name: "Hassium", atomicNumber: 108 }, { symbol: "Mt", name: "Meitnerium", atomicNumber: 109 }, { symbol: "Ds", name: "Darmstadtium", atomicNumber: 110 }, { symbol: "Rg", name: "Roentgenium", atomicNumber: 111 }, { symbol: "Cn", name: "Copernicium", atomicNumber: 112 }, { symbol: "Nh", name: "Nihonium", atomicNumber: 113 }, { symbol: "Fl", name: "Flerovium", atomicNumber: 114 }, { symbol: "Mc", name: "Moscovium", atomicNumber: 115 }, { symbol: "Lv", name: "Livermorium", atomicNumber: 116 }, { symbol: "Ts", name: "Tennessine", atomicNumber: 117 }, { symbol: "Og", name: "Oganesson", atomicNumber: 118 }]);
var ua = Object.freeze([{ name: "meter", symbol: "m" }, { name: "second", symbol: "s" }, { name: "mole", symbol: "mol" }, { name: "ampere", symbol: "A" }, { name: "kelvin", symbol: "K" }, { name: "candela", symbol: "cd" }, { name: "kilogram", symbol: "kg" }, { name: "radian", symbol: "rad" }, { name: "hertz", symbol: "Hz" }, { name: "newton", symbol: "N" }, { name: "pascal", symbol: "Pa" }, { name: "joule", symbol: "J" }, { name: "watt", symbol: "W" }, { name: "coulomb", symbol: "C" }, { name: "volt", symbol: "V" }, { name: "ohm", symbol: "Ω" }, { name: "tesla", symbol: "T" }, { name: "degree Celsius", symbol: "°C" }, { name: "lumen", symbol: "lm" }, { name: "becquerel", symbol: "Bq" }, { name: "gray", symbol: "Gy" }, { name: "sievert", symbol: "Sv" }, { name: "steradian", symbol: "sr" }, { name: "farad", symbol: "F" }, { name: "siemens", symbol: "S" }, { name: "weber", symbol: "Wb" }, { name: "henry", symbol: "H" }, { name: "lux", symbol: "lx" }, { name: "katal", symbol: "kat" }]);
var Za = { chemicalElement: ca, unit: ua };
var ma = Za;
var ha = ["ants", "bats", "bears", "bees", "birds", "buffalo", "cats", "chickens", "cattle", "dogs", "dolphins", "ducks", "elephants", "fishes", "foxes", "frogs", "geese", "goats", "horses", "kangaroos", "lions", "monkeys", "owls", "oxen", "penguins", "people", "pigs", "rabbits", "sheep", "tigers", "whales", "wolves", "zebras", "banshees", "crows", "black cats", "chimeras", "ghosts", "conspirators", "dragons", "dwarves", "elves", "enchanters", "exorcists", "sons", "foes", "giants", "gnomes", "goblins", "gooses", "griffins", "lycanthropes", "nemesis", "ogres", "oracles", "prophets", "sorcerors", "spiders", "spirits", "vampires", "warlocks", "vixens", "werewolves", "witches", "worshipers", "zombies", "druids"];
var pa = ["{{location.state}} {{team.creature}}"];
var Qa = { creature: ha, name: pa };
var ga = Qa;
var ya = ["Adventure Road Bicycle", "BMX Bicycle", "City Bicycle", "Cruiser Bicycle", "Cyclocross Bicycle", "Dual-Sport Bicycle", "Fitness Bicycle", "Flat-Foot Comfort Bicycle", "Folding Bicycle", "Hybrid Bicycle", "Mountain Bicycle", "Recumbent Bicycle", "Road Bicycle", "Tandem Bicycle", "Touring Bicycle", "Track/Fixed-Gear Bicycle", "Triathlon/Time Trial Bicycle", "Tricycle"];
var ba = ["Diesel", "Electric", "Gasoline", "Hybrid"];
var fa = ["Aston Martin", "Audi", "Bentley", "BMW", "Bugatti", "Cadillac", "Chevrolet", "Chrysler", "Dodge", "Ferrari", "Fiat", "Ford", "Honda", "Hyundai", "Jaguar", "Jeep", "Kia", "Lamborghini", "Land Rover", "Maserati", "Mazda", "Mercedes Benz", "Mini", "Nissan", "Polestar", "Porsche", "Rolls Royce", "Smart", "Tesla", "Toyota", "Volkswagen", "Volvo"];
var ka = ["Fiesta", "Focus", "Taurus", "Mustang", "Explorer", "Expedition", "F-150", "Model T", "Ranchero", "Volt", "Cruze", "Malibu", "Impala", "Camaro", "Corvette", "Colorado", "Silverado", "El Camino", "CTS", "XTS", "ATS", "Escalade", "Alpine", "Charger", "LeBaron", "PT Cruiser", "Challenger", "Durango", "Grand Caravan", "Wrangler", "Grand Cherokee", "Roadster", "Model S", "Model 3", "Model X", "Model Y", "Camry", "Prius", "Land Cruiser", "Accord", "Civic", "Element", "Sentra", "Altima", "A8", "A4", "Beetle", "Jetta", "Golf", "911", "Spyder", "Countach", "Mercielago", "Aventador", "1", "2", "Fortwo", "V90", "XC90", "CX-9"];
var va = ["Cargo Van", "Convertible", "Coupe", "Crew Cab Pickup", "Extended Cab Pickup", "Hatchback", "Minivan", "Passenger Van", "SUV", "Sedan", "Wagon"];
var Xa = { bicycle_type: ya, fuel: ba, manufacturer: fa, model: ka, type: va };
var wa = Xa;
var Ca = ["abandoned", "able", "absolute", "adorable", "adventurous", "academic", "acceptable", "acclaimed", "accomplished", "accurate", "aching", "acidic", "acrobatic", "active", "actual", "adept", "admirable", "admired", "adolescent", "adored", "advanced", "afraid", "affectionate", "aged", "aggravating", "aggressive", "agile", "agitated", "agonizing", "agreeable", "ajar", "alarmed", "alarming", "alert", "alienated", "alive", "all", "altruistic", "amazing", "ambitious", "ample", "amused", "amusing", "anchored", "ancient", "angelic", "angry", "anguished", "animated", "annual", "another", "antique", "anxious", "any", "apprehensive", "appropriate", "apt", "arctic", "arid", "aromatic", "artistic", "ashamed", "assured", "astonishing", "athletic", "attached", "attentive", "attractive", "austere", "authentic", "authorized", "automatic", "avaricious", "average", "aware", "awesome", "awful", "awkward", "babyish", "bad", "back", "baggy", "bare", "barren", "basic", "beautiful", "belated", "beloved", "beneficial", "better", "best", "bewitched", "big", "big-hearted", "biodegradable", "bite-sized", "bitter", "black", "black-and-white", "bland", "blank", "blaring", "bleak", "blind", "blissful", "blond", "blue", "blushing", "bogus", "boiling", "bold", "bony", "boring", "bossy", "both", "bouncy", "bountiful", "bowed", "brave", "breakable", "brief", "bright", "brilliant", "brisk", "broken", "bronze", "brown", "bruised", "bubbly", "bulky", "bumpy", "buoyant", "burdensome", "burly", "bustling", "busy", "buttery", "buzzing", "calculating", "calm", "candid", "canine", "capital", "carefree", "careful", "careless", "caring", "cautious", "cavernous", "celebrated", "charming", "cheap", "cheerful", "cheery", "chief", "chilly", "chubby", "circular", "classic", "clean", "clear", "clear-cut", "clever", "close", "closed", "cloudy", "clueless", "clumsy", "cluttered", "coarse", "cold", "colorful", "colorless", "colossal", "comfortable", "common", "compassionate", "competent", "complete", "complex", "complicated", "composed", "concerned", "concrete", "confused", "conscious", "considerate", "constant", "content", "conventional", "cooked", "cool", "cooperative", "coordinated", "corny", "corrupt", "costly", "courageous", "courteous", "crafty", "crazy", "creamy", "creative", "creepy", "criminal", "crisp", "critical", "crooked", "crowded", "cruel", "crushing", "cuddly", "cultivated", "cultured", "cumbersome", "curly", "curvy", "cute", "cylindrical", "damaged", "damp", "dangerous", "dapper", "daring", "darling", "dark", "dazzling", "dead", "deadly", "deafening", "dear", "dearest", "decent", "decimal", "decisive", "deep", "defenseless", "defensive", "defiant", "deficient", "definite", "definitive", "delayed", "delectable", "delicious", "delightful", "delirious", "demanding", "dense", "dental", "dependable", "dependent", "descriptive", "deserted", "detailed", "determined", "devoted", "different", "difficult", "digital", "diligent", "dim", "dimpled", "direct", "disastrous", "discrete", "disgusting", "disloyal", "dismal", "distant", "downright", "dreary", "dirty", "disguised", "dishonest", "distinct", "distorted", "dizzy", "doting", "double", "drab", "drafty", "dramatic", "droopy", "dry", "dual", "dull", "dutiful", "each", "eager", "earnest", "early", "easy", "easy-going", "ecstatic", "edible", "educated", "elaborate", "elastic", "elated", "elderly", "electric", "elegant", "elementary", "elliptical", "embarrassed", "embellished", "eminent", "emotional", "empty", "enchanted", "enchanting", "energetic", "enlightened", "enormous", "enraged", "entire", "envious", "equal", "equatorial", "essential", "esteemed", "ethical", "euphoric", "even", "evergreen", "everlasting", "every", "evil", "exalted", "excellent", "exemplary", "exhausted", "excitable", "excited", "exciting", "exotic", "expensive", "experienced", "expert", "extraneous", "extroverted", "extra-large", "extra-small", "fabulous", "failing", "faint", "fair", "faithful", "fake", "false", "familiar", "famous", "fancy", "fantastic", "far", "faraway", "far-flung", "far-off", "fast", "fat", "fatal", "fatherly", "favorable", "favorite", "fearful", "fearless", "feisty", "feline", "female", "feminine", "few", "fickle", "filthy", "fine", "finished", "firm", "first", "firsthand", "fitting", "fixed", "flaky", "flamboyant", "flashy", "flat", "flawed", "flawless", "flickering", "flimsy", "flippant", "flowery", "fluffy", "fluid", "flustered", "focused", "fond", "foolhardy", "foolish", "forceful", "forked", "formal", "forsaken", "forthright", "fortunate", "fragrant", "frail", "frank", "frayed", "free", "french", "fresh", "frequent", "friendly", "frightened", "frightening", "frigid", "frilly", "frizzy", "frivolous", "front", "frosty", "frozen", "frugal", "fruitful", "full", "fumbling", "functional", "funny", "fussy", "fuzzy", "gargantuan", "gaseous", "general", "generous", "gentle", "genuine", "giant", "giddy", "gigantic", "gifted", "giving", "glamorous", "glaring", "glass", "gleaming", "gleeful", "glistening", "glittering", "gloomy", "glorious", "glossy", "glum", "golden", "good", "good-natured", "gorgeous", "graceful", "gracious", "grand", "grandiose", "granular", "grateful", "grave", "gray", "great", "greedy", "green", "gregarious", "grim", "grimy", "gripping", "grizzled", "grotesque", "grouchy", "grounded", "growing", "growling", "grown", "grubby", "gruesome", "grumpy", "guilty", "gullible", "gummy", "hairy", "half", "handmade", "handsome", "handy", "happy", "happy-go-lucky", "hard", "hard-to-find", "harmful", "harmless", "harmonious", "harsh", "hasty", "hateful", "haunting", "healthy", "heartfelt", "hearty", "heavenly", "heavy", "hefty", "helpful", "helpless", "hidden", "hideous", "high", "high-level", "hilarious", "hoarse", "hollow", "homely", "honest", "honorable", "honored", "hopeful", "horrible", "hospitable", "hot", "huge", "humble", "humiliating", "humming", "humongous", "hungry", "hurtful", "husky", "icky", "icy", "ideal", "idealistic", "identical", "idle", "idolized", "ignorant", "ill", "ill-fated", "ill-informed", "illiterate", "illustrious", "imaginary", "imaginative", "immaculate", "immaterial", "immediate", "immense", "impassioned", "impeccable", "impartial", "imperfect", "imperturbable", "impish", "impolite", "important", "impossible", "impractical", "impressionable", "impressive", "improbable", "impure", "inborn", "incomparable", "incompatible", "incomplete", "inconsequential", "incredible", "indelible", "inexperienced", "indolent", "infamous", "infantile", "infatuated", "inferior", "infinite", "informal", "innocent", "insecure", "insidious", "insignificant", "insistent", "instructive", "insubstantial", "intelligent", "intent", "intentional", "interesting", "internal", "international", "intrepid", "ironclad", "irresponsible", "irritating", "itchy", "jaded", "jagged", "jam-packed", "jaunty", "jealous", "jittery", "joint", "jolly", "jovial", "joyful", "joyous", "jubilant", "judicious", "juicy", "jumbo", "junior", "jumpy", "juvenile", "kaleidoscopic", "keen", "key", "kind", "kindhearted", "kindly", "klutzy", "knobby", "knotty", "knowledgeable", "knowing", "known", "kooky", "kosher", "lanky", "large", "last", "lasting", "late", "lavish", "lawful", "lazy", "leading", "lean", "leafy", "left", "legal", "legitimate", "light", "lighthearted", "likable", "likely", "limited", "limp", "limping", "linear", "lined", "liquid", "little", "live", "lively", "livid", "loathsome", "lone", "lonely", "long", "long-term", "loose", "lopsided", "lost", "loud", "lovable", "lovely", "loving", "low", "loyal", "lucky", "lumbering", "luminous", "lumpy", "lustrous", "luxurious", "mad", "made-up", "magnificent", "majestic", "major", "male", "mammoth", "married", "marvelous", "masculine", "massive", "mature", "meager", "mealy", "mean", "measly", "meaty", "medical", "mediocre", "medium", "meek", "mellow", "melodic", "memorable", "menacing", "merry", "messy", "metallic", "mild", "milky", "mindless", "miniature", "minor", "minty", "miserable", "miserly", "misguided", "misty", "mixed", "modern", "modest", "moist", "monstrous", "monthly", "monumental", "moral", "mortified", "motherly", "motionless", "mountainous", "muddy", "muffled", "multicolored", "mundane", "murky", "mushy", "musty", "muted", "mysterious", "naive", "narrow", "natural", "naughty", "nautical", "near", "neat", "necessary", "needy", "negative", "neglected", "negligible", "neighboring", "nervous", "new", "next", "nice", "nifty", "nimble", "nippy", "nocturnal", "noisy", "nonstop", "normal", "notable", "noted", "noteworthy", "novel", "noxious", "numb", "nutritious", "nutty", "obedient", "oblong", "oily", "obvious", "occasional", "odd", "oddball", "offbeat", "offensive", "official", "old", "old-fashioned", "only", "open", "optimal", "optimistic", "opulent", "orange", "orderly", "organic", "ornate", "ornery", "ordinary", "original", "other", "our", "outlying", "outgoing", "outlandish", "outrageous", "outstanding", "oval", "overcooked", "overdue", "overjoyed", "overlooked", "palatable", "pale", "paltry", "parallel", "parched", "partial", "passionate", "past", "pastel", "peaceful", "peppery", "perfect", "perfumed", "periodic", "perky", "personal", "pertinent", "pesky", "pessimistic", "petty", "phony", "physical", "piercing", "pink", "pitiful", "plain", "plaintive", "plastic", "playful", "pleasant", "pleased", "pleasing", "plump", "plush", "polished", "polite", "political", "pointed", "pointless", "poised", "poor", "popular", "portly", "posh", "positive", "possible", "potable", "powerful", "powerless", "practical", "precious", "present", "prestigious", "pretty", "previous", "pricey", "prickly", "primary", "prime", "pristine", "private", "prize", "probable", "productive", "profitable", "profuse", "proper", "proud", "prudent", "punctual", "pungent", "puny", "pure", "purple", "pushy", "putrid", "puzzled", "puzzling", "quaint", "qualified", "quarrelsome", "quarterly", "queasy", "querulous", "questionable", "quick", "quick-witted", "quiet", "quintessential", "quirky", "quixotic", "quizzical", "radiant", "ragged", "rapid", "rare", "rash", "raw", "recent", "reckless", "rectangular", "ready", "real", "realistic", "reasonable", "red", "reflecting", "regal", "regular", "reliable", "relieved", "remarkable", "remorseful", "remote", "repentant", "required", "respectful", "responsible", "repulsive", "revolving", "rewarding", "rich", "rigid", "right", "ringed", "ripe", "roasted", "robust", "rosy", "rotating", "rotten", "rough", "round", "rowdy", "royal", "rubbery", "rundown", "ruddy", "rude", "runny", "rural", "rusty", "sad", "safe", "salty", "same", "sandy", "sane", "sarcastic", "sardonic", "satisfied", "scaly", "scarce", "scared", "scary", "scented", "scholarly", "scientific", "scornful", "scratchy", "scrawny", "second", "secondary", "second-hand", "secret", "self-assured", "self-reliant", "selfish", "sentimental", "separate", "serene", "serious", "serpentine", "several", "severe", "shabby", "shadowy", "shady", "shallow", "shameful", "shameless", "sharp", "shimmering", "shiny", "shocked", "shocking", "shoddy", "short", "short-term", "showy", "shrill", "shy", "sick", "silent", "silky", "silly", "silver", "similar", "simple", "simplistic", "sinful", "single", "sizzling", "skeletal", "skinny", "sleepy", "slight", "slim", "slimy", "slippery", "slow", "slushy", "small", "smart", "smoggy", "smooth", "smug", "snappy", "snarling", "sneaky", "sniveling", "snoopy", "sociable", "soft", "soggy", "solid", "somber", "some", "spherical", "sophisticated", "sore", "sorrowful", "soulful", "soupy", "sour", "spanish", "sparkling", "sparse", "specific", "spectacular", "speedy", "spicy", "spiffy", "spirited", "spiteful", "splendid", "spotless", "spotted", "spry", "square", "squeaky", "squiggly", "stable", "staid", "stained", "stale", "standard", "starchy", "stark", "starry", "steep", "sticky", "stiff", "stimulating", "stingy", "stormy", "straight", "strange", "steel", "strict", "strident", "striking", "striped", "strong", "studious", "stunning", "stupendous", "sturdy", "stylish", "subdued", "submissive", "substantial", "subtle", "suburban", "sudden", "sugary", "sunny", "super", "superb", "superficial", "superior", "supportive", "sure-footed", "surprised", "suspicious", "svelte", "sweaty", "sweet", "sweltering", "swift", "sympathetic", "tall", "talkative", "tame", "tan", "tangible", "tart", "tasty", "tattered", "taut", "tedious", "teeming", "tempting", "tender", "tense", "tepid", "terrible", "terrific", "testy", "thankful", "that", "these", "thick", "thin", "third", "thirsty", "this", "thorough", "thorny", "those", "thoughtful", "threadbare", "thrifty", "thunderous", "tidy", "tight", "timely", "tinted", "tiny", "tired", "torn", "total", "tough", "traumatic", "treasured", "tremendous", "tragic", "trained", "triangular", "tricky", "trifling", "trim", "trivial", "troubled", "true", "trusting", "trustworthy", "trusty", "truthful", "turbulent", "twin", "ugly", "ultimate", "unacceptable", "unaware", "uncomfortable", "uncommon", "unconscious", "understated", "unequaled", "uneven", "unfinished", "unfit", "unfolded", "unfortunate", "unhappy", "unhealthy", "uniform", "unimportant", "unique", "united", "unkempt", "unknown", "unlawful", "unlined", "unlucky", "unnatural", "unpleasant", "unrealistic", "unripe", "unruly", "unselfish", "unsightly", "unsteady", "unsung", "untidy", "untimely", "untried", "untrue", "unused", "unusual", "unwelcome", "unwieldy", "unwilling", "unwitting", "unwritten", "upbeat", "upright", "upset", "urban", "usable", "used", "useful", "useless", "utilized", "utter", "vacant", "vague", "vain", "valid", "valuable", "vapid", "variable", "vast", "velvety", "venerated", "vengeful", "verifiable", "vibrant", "vicious", "victorious", "vigilant", "vigorous", "villainous", "violet", "violent", "virtual", "virtuous", "visible", "vital", "vivacious", "vivid", "voluminous", "wan", "warlike", "warm", "warmhearted", "warped", "wary", "wasteful", "watchful", "waterlogged", "watery", "wavy", "wealthy", "weak", "weary", "webbed", "wee", "weekly", "weepy", "weighty", "weird", "welcome", "well-documented", "well-groomed", "well-informed", "well-lit", "well-made", "well-off", "well-to-do", "well-worn", "wet", "which", "whimsical", "whirlwind", "whispered", "white", "whole", "whopping", "wicked", "wide", "wide-eyed", "wiggly", "wild", "willing", "wilted", "winding", "windy", "winged", "wiry", "wise", "witty", "wobbly", "woeful", "wonderful", "wooden", "woozy", "wordy", "worldly", "worn", "worried", "worrisome", "worse", "worst", "worthless", "worthwhile", "worthy", "wrathful", "wretched", "writhing", "wrong", "wry", "yawning", "yearly", "yellow", "yellowish", "young", "youthful", "yummy", "zany", "zealous", "zesty", "zigzag"];
var Sa = ["abnormally", "absentmindedly", "accidentally", "acidly", "actually", "adventurously", "afterwards", "almost", "always", "angrily", "annually", "anxiously", "arrogantly", "awkwardly", "badly", "bashfully", "beautifully", "bitterly", "bleakly", "blindly", "blissfully", "boastfully", "boldly", "bravely", "briefly", "brightly", "briskly", "broadly", "busily", "calmly", "carefully", "carelessly", "cautiously", "certainly", "cheerfully", "clearly", "cleverly", "closely", "coaxingly", "colorfully", "commonly", "continually", "coolly", "correctly", "courageously", "crossly", "cruelly", "curiously", "daily", "daintily", "dearly", "deceivingly", "deeply", "defiantly", "deliberately", "delightfully", "diligently", "dimly", "doubtfully", "dreamily", "easily", "elegantly", "energetically", "enormously", "enthusiastically", "equally", "especially", "even", "evenly", "eventually", "exactly", "excitedly", "extremely", "fairly", "faithfully", "famously", "far", "fast", "fatally", "ferociously", "fervently", "fiercely", "fondly", "foolishly", "fortunately", "frankly", "frantically", "freely", "frenetically", "frightfully", "fully", "furiously", "generally", "generously", "gently", "gladly", "gleefully", "gracefully", "gratefully", "greatly", "greedily", "happily", "hastily", "healthily", "heavily", "helpfully", "helplessly", "highly", "honestly", "hopelessly", "hourly", "hungrily", "immediately", "innocently", "inquisitively", "instantly", "intensely", "intently", "interestingly", "inwardly", "irritably", "jaggedly", "jealously", "joshingly", "jovially", "joyfully", "joyously", "jubilantly", "judgementally", "justly", "keenly", "kiddingly", "kindheartedly", "kindly", "kissingly", "knavishly", "knottily", "knowingly", "knowledgeably", "kookily", "lazily", "less", "lightly", "likely", "limply", "lively", "loftily", "longingly", "loosely", "loudly", "lovingly", "loyally", "madly", "majestically", "meaningfully", "mechanically", "merrily", "miserably", "mockingly", "monthly", "more", "mortally", "mostly", "mysteriously", "naturally", "nearly", "neatly", "needily", "nervously", "never", "nicely", "noisily", "not", "obediently", "obnoxiously", "oddly", "offensively", "officially", "often", "only", "openly", "optimistically", "overconfidently", "owlishly", "painfully", "partially", "patiently", "perfectly", "physically", "playfully", "politely", "poorly", "positively", "potentially", "powerfully", "promptly", "properly", "punctually", "quaintly", "quarrelsomely", "queasily", "questionably", "questioningly", "quicker", "quickly", "quietly", "quirkily", "quizzically", "rapidly", "rarely", "readily", "really", "reassuringly", "recklessly", "regularly", "reluctantly", "repeatedly", "reproachfully", "restfully", "righteously", "rightfully", "rigidly", "roughly", "rudely", "sadly", "safely", "scarcely", "scarily", "searchingly", "sedately", "seemingly", "seldom", "selfishly", "separately", "seriously", "shakily", "sharply", "sheepishly", "shrilly", "shyly", "silently", "sleepily", "slowly", "smoothly", "softly", "solemnly", "solidly", "sometimes", "soon", "speedily", "stealthily", "sternly", "strictly", "successfully", "suddenly", "surprisingly", "suspiciously", "sweetly", "swiftly", "sympathetically", "tenderly", "tensely", "terribly", "thankfully", "thoroughly", "thoughtfully", "tightly", "tomorrow", "too", "tremendously", "triumphantly", "truly", "truthfully", "ultimately", "unabashedly", "unaccountably", "unbearably", "unethically", "unexpectedly", "unfortunately", "unimpressively", "unnaturally", "unnecessarily", "upbeat", "upliftingly", "upright", "upside-down", "upward", "upwardly", "urgently", "usefully", "uselessly", "usually", "utterly", "vacantly", "vaguely", "vainly", "valiantly", "vastly", "verbally", "very", "viciously", "victoriously", "violently", "vivaciously", "voluntarily", "warmly", "weakly", "wearily", "well", "wetly", "wholly", "wildly", "willfully", "wisely", "woefully", "wonderfully", "worriedly", "wrongly", "yawningly", "yearly", "yearningly", "yesterday", "yieldingly", "youthfully"];
var Aa = ["after", "although", "and", "as", "because", "before", "but", "consequently", "even", "finally", "for", "furthermore", "hence", "how", "however", "if", "inasmuch", "incidentally", "indeed", "instead", "lest", "likewise", "meanwhile", "nor", "now", "once", "or", "provided", "since", "so", "supposing", "than", "that", "though", "till", "unless", "until", "what", "when", "whenever", "where", "whereas", "wherever", "whether", "which", "while", "who", "whoever", "whose", "why", "yet"];
var Ba = ["yuck", "oh", "phooey", "blah", "boo", "whoa", "yowza", "huzzah", "boohoo", "fooey", "geez", "pfft", "ew", "ah", "yum", "brr", "hm", "yahoo", "aha", "woot", "drat", "gah", "meh", "psst", "aw", "ugh", "yippee", "eek", "gee", "bah", "gadzooks", "duh", "ha", "mmm", "ouch", "phew", "ack", "uh-huh", "gosh", "hmph", "pish", "zowie", "er", "ick", "oof", "um"];
var Ma = ["ATM", "CD", "SUV", "TV", "aardvark", "abacus", "abbey", "abbreviation", "abdomen", "ability", "abnormality", "abolishment", "abrogation", "absence", "abundance", "academics", "academy", "accelerant", "accelerator", "accent", "acceptance", "access", "accessory", "accident", "accommodation", "accompanist", "accomplishment", "accord", "accordance", "accordion", "account", "accountability", "accountant", "accounting", "accuracy", "accusation", "acetate", "achievement", "achiever", "acid", "acknowledgment", "acorn", "acoustics", "acquaintance", "acquisition", "acre", "acrylic", "act", "action", "activation", "activist", "activity", "actor", "actress", "acupuncture", "ad", "adaptation", "adapter", "addiction", "addition", "address", "adjective", "adjustment", "admin", "administration", "administrator", "admire", "admission", "adobe", "adoption", "adrenalin", "adrenaline", "adult", "adulthood", "advance", "advancement", "advantage", "advent", "adverb", "advertisement", "advertising", "advice", "adviser", "advocacy", "advocate", "affair", "affect", "affidavit", "affiliate", "affinity", "afoul", "afterlife", "aftermath", "afternoon", "aftershave", "aftershock", "afterthought", "age", "agency", "agenda", "agent", "aggradation", "aggression", "aglet", "agony", "agreement", "agriculture", "aid", "aide", "aim", "air", "airbag", "airbus", "aircraft", "airfare", "airfield", "airforce", "airline", "airmail", "airman", "airplane", "airport", "airship", "airspace", "alarm", "alb", "albatross", "album", "alcohol", "alcove", "alder", "ale", "alert", "alfalfa", "algebra", "algorithm", "alias", "alibi", "alien", "allegation", "allergist", "alley", "alliance", "alligator", "allocation", "allowance", "alloy", "alluvium", "almanac", "almighty", "almond", "alpaca", "alpenglow", "alpenhorn", "alpha", "alphabet", "altar", "alteration", "alternative", "altitude", "alto", "aluminium", "aluminum", "amazement", "amazon", "ambassador", "amber", "ambience", "ambiguity", "ambition", "ambulance", "amendment", "amenity", "ammunition", "amnesty", "amount", "amusement", "anagram", "analgesia", "analog", "analogue", "analogy", "analysis", "analyst", "analytics", "anarchist", "anarchy", "anatomy", "ancestor", "anchovy", "android", "anesthesiologist", "anesthesiology", "angel", "anger", "angina", "angle", "angora", "angstrom", "anguish", "animal", "anime", "anise", "ankle", "anklet", "anniversary", "announcement", "annual", "anorak", "answer", "ant", "anteater", "antecedent", "antechamber", "antelope", "antennae", "anterior", "anthropology", "antibody", "anticipation", "anticodon", "antigen", "antique", "antiquity", "antler", "antling", "anxiety", "anybody", "anyone", "anything", "anywhere", "apartment", "ape", "aperitif", "apology", "app", "apparatus", "apparel", "appeal", "appearance", "appellation", "appendix", "appetiser", "appetite", "appetizer", "applause", "apple", "applewood", "appliance", "application", "appointment", "appreciation", "apprehension", "approach", "appropriation", "approval", "apricot", "apron", "apse", "aquarium", "aquifer", "arcade", "arch", "arch-rival", "archaeologist", "archaeology", "archeology", "archer", "architect", "architecture", "archives", "area", "arena", "argument", "arithmetic", "ark", "arm", "arm-rest", "armadillo", "armament", "armchair", "armoire", "armor", "armour", "armpit", "armrest", "army", "arrangement", "array", "arrest", "arrival", "arrogance", "arrow", "art", "artery", "arthur", "artichoke", "article", "artifact", "artificer", "artist", "ascend", "ascent", "ascot", "ash", "ashram", "ashtray", "aside", "asparagus", "aspect", "asphalt", "aspic", "assassination", "assault", "assembly", "assertion", "assessment", "asset", "assignment", "assist", "assistance", "assistant", "associate", "association", "assumption", "assurance", "asterisk", "astrakhan", "astrolabe", "astrologer", "astrology", "astronomy", "asymmetry", "atelier", "atheist", "athlete", "athletics", "atmosphere", "atom", "atrium", "attachment", "attack", "attacker", "attainment", "attempt", "attendance", "attendant", "attention", "attenuation", "attic", "attitude", "attorney", "attraction", "attribute", "auction", "audience", "audit", "auditorium", "aunt", "authentication", "authenticity", "author", "authorisation", "authority", "authorization", "auto", "autoimmunity", "automation", "automaton", "autumn", "availability", "avalanche", "avenue", "average", "avocado", "award", "awareness", "awe", "axis", "azimuth", "baboon", "babushka", "baby", "bachelor", "back", "back-up", "backbone", "backburn", "backdrop", "background", "backpack", "backup", "backyard", "bacon", "bacterium", "badge", "badger", "bafflement", "bag", "bagel", "baggage", "baggie", "baggy", "bagpipe", "bail", "bait", "bake", "baker", "bakery", "bakeware", "balaclava", "balalaika", "balance", "balcony", "ball", "ballet", "balloon", "balloonist", "ballot", "ballpark", "bamboo", "ban", "banana", "band", "bandana", "bandanna", "bandolier", "bandwidth", "bangle", "banjo", "bank", "bankbook", "banker", "banking", "bankruptcy", "banner", "banquette", "banyan", "baobab", "bar", "barbecue", "barbeque", "barber", "bargain", "barge", "baritone", "barium", "bark", "barley", "barn", "barometer", "barracks", "barrage", "barrel", "barrier", "barstool", "bartender", "base", "baseball", "baseboard", "baseline", "basement", "basics", "basil", "basin", "basis", "basket", "basketball", "bass", "bassinet", "bassoon", "bat", "bath", "bather", "bathhouse", "bathrobe", "bathroom", "bathtub", "battalion", "batter", "battery", "batting", "battle", "battleship", "bay", "bayou", "beach", "bead", "beak", "beam", "bean", "beancurd", "beanie", "beanstalk", "bear", "beard", "beast", "beastie", "beat", "beating", "beauty", "beck", "bed", "bedrock", "bedroom", "bee", "beech", "beef", "beet", "beetle", "beggar", "beginner", "beginning", "begonia", "behalf", "behavior", "behaviour", "behest", "behold", "being", "belfry", "belief", "believer", "bell", "belligerency", "bellows", "belly", "belt", "bench", "bend", "beneficiary", "benefit", "beret", "berry", "best-seller", "bestseller", "bet", "beverage", "beyond", "bias", "bibliography", "bicycle", "bid", "bidder", "bidding", "bidet", "bifocals", "bijou", "bike", "bikini", "bill", "billboard", "billing", "billion", "bin", "binoculars", "biology", "biopsy", "biosphere", "biplane", "birch", "bird", "bird-watcher", "birdbath", "birdcage", "birdhouse", "birth", "birthday", "biscuit", "bit", "bite", "bitten", "bitter", "blackberry", "blackbird", "blackboard", "blackfish", "blackness", "bladder", "blade", "blame", "blank", "blanket", "blast", "blazer", "blend", "blessing", "blight", "blind", "blinker", "blister", "blizzard", "block", "blocker", "blog", "blogger", "blood", "bloodflow", "bloom", "bloomer", "blossom", "blouse", "blow", "blowgun", "blowhole", "blueberry", "blush", "boar", "board", "boat", "boatload", "boatyard", "bob", "bobcat", "body", "bog", "bolero", "bolt", "bond", "bonding", "bondsman", "bone", "bonfire", "bongo", "bonnet", "bonsai", "bonus", "boogeyman", "book", "bookcase", "bookend", "booking", "booklet", "bookmark", "boolean", "boom", "boon", "boost", "booster", "boot", "bootie", "border", "bore", "borrower", "borrowing", "boss", "botany", "bother", "bottle", "bottling", "bottom", "bottom-line", "boudoir", "bough", "boulder", "boulevard", "boundary", "bouquet", "bourgeoisie", "bout", "boutique", "bow", "bower", "bowl", "bowler", "bowling", "bowtie", "box", "boxer", "boxspring", "boy", "boycott", "boyfriend", "boyhood", "boysenberry", "brace", "bracelet", "bracket", "brain", "brake", "bran", "branch", "brand", "brass", "bratwurst", "bread", "breadcrumb", "breadfruit", "break", "breakdown", "breakfast", "breakpoint", "breakthrough", "breastplate", "breath", "breeze", "brewer", "bribery", "brick", "bricklaying", "bride", "bridge", "brief", "briefing", "briefly", "brilliant", "brink", "brisket", "broad", "broadcast", "broccoli", "brochure", "brocolli", "broiler", "broker", "bronchitis", "bronco", "bronze", "brooch", "brood", "brook", "broom", "brother", "brother-in-law", "brow", "brownie", "browser", "browsing", "brunch", "brush", "brushfire", "brushing", "bubble", "buck", "bucket", "buckle", "buckwheat", "bud", "buddy", "budget", "buffalo", "buffer", "buffet", "bug", "buggy", "bugle", "builder", "building", "bulb", "bulk", "bull", "bull-fighter", "bulldozer", "bullet", "bump", "bumper", "bun", "bunch", "bungalow", "bunkhouse", "burden", "bureau", "burglar", "burial", "burn", "burn-out", "burning", "burrito", "burro", "burrow", "burst", "bus", "bush", "business", "businessman", "bust", "bustle", "butane", "butcher", "butler", "butter", "butterfly", "button", "buy", "buyer", "buying", "buzz", "buzzard", "c-clamp", "cabana", "cabbage", "cabin", "cabinet", "cable", "caboose", "cacao", "cactus", "caddy", "cadet", "cafe", "caffeine", "caftan", "cage", "cake", "calcification", "calculation", "calculator", "calculus", "calendar", "calf", "caliber", "calibre", "calico", "call", "calm", "calorie", "camel", "cameo", "camera", "camp", "campaign", "campaigning", "campanile", "camper", "campus", "can", "canal", "candelabra", "candidacy", "candidate", "candle", "candy", "cane", "cannibal", "cannon", "canoe", "canon", "canopy", "cantaloupe", "canteen", "canvas", "cap", "capability", "capacity", "cape", "caper", "capital", "capitalism", "capitulation", "capon", "cappelletti", "cappuccino", "captain", "caption", "captor", "car", "carabao", "caramel", "caravan", "carbohydrate", "carbon", "carboxyl", "card", "cardboard", "cardigan", "care", "career", "cargo", "caribou", "carload", "carnation", "carnival", "carol", "carotene", "carp", "carpenter", "carpet", "carpeting", "carport", "carriage", "carrier", "carrot", "carry", "cart", "cartel", "carter", "cartilage", "cartload", "cartoon", "cartridge", "carving", "cascade", "case", "casement", "cash", "cashew", "cashier", "casino", "casket", "cassava", "casserole", "cassock", "cast", "castanet", "castle", "casualty", "cat", "catacomb", "catalogue", "catalysis", "catalyst", "catamaran", "catastrophe", "catch", "catcher", "category", "caterpillar", "cathedral", "cation", "catsup", "cattle", "cauliflower", "causal", "cause", "causeway", "caution", "cave", "caviar", "cayenne", "ceiling", "celebration", "celebrity", "celeriac", "celery", "cell", "cellar", "cello", "celsius", "cement", "cemetery", "cenotaph", "census", "cent", "center", "centimeter", "centre", "centurion", "century", "cephalopod", "ceramic", "ceramics", "cereal", "ceremony", "certainty", "certificate", "certification", "cesspool", "chafe", "chain", "chainstay", "chair", "chairlift", "chairman", "chairperson", "chaise", "chalet", "chalice", "chalk", "challenge", "chamber", "champagne", "champion", "championship", "chance", "chandelier", "change", "channel", "chaos", "chap", "chapel", "chaplain", "chapter", "character", "characteristic", "characterization", "chard", "charge", "charger", "charity", "charlatan", "charm", "charset", "chart", "charter", "chasm", "chassis", "chastity", "chasuble", "chateau", "chatter", "chauffeur", "chauvinist", "check", "checkbook", "checking", "checkout", "checkroom", "cheddar", "cheek", "cheer", "cheese", "cheesecake", "cheetah", "chef", "chem", "chemical", "chemistry", "chemotaxis", "cheque", "cherry", "chess", "chest", "chestnut", "chick", "chicken", "chicory", "chief", "chiffonier", "child", "childbirth", "childhood", "chili", "chill", "chime", "chimpanzee", "chin", "chinchilla", "chino", "chip", "chipmunk", "chit-chat", "chivalry", "chive", "chives", "chocolate", "choice", "choir", "choker", "cholesterol", "choosing", "chop", "chops", "chopstick", "chopsticks", "chord", "chorus", "chow", "chowder", "chrome", "chromolithograph", "chronicle", "chronograph", "chronometer", "chrysalis", "chub", "chuck", "church", "churn", "chutney", "cicada", "cigarette", "cilantro", "cinder", "cinema", "cinnamon", "circadian", "circle", "circuit", "circulation", "circumference", "circumstance", "cirrus", "citizen", "citizenship", "citron", "citrus", "city", "civilian", "civilisation", "civilization", "claim", "clam", "clamp", "clan", "clank", "clapboard", "clarification", "clarinet", "clarity", "clasp", "class", "classic", "classification", "classmate", "classroom", "clause", "clave", "clavicle", "clavier", "claw", "clay", "cleaner", "clearance", "clearing", "cleat", "clef", "cleft", "clergyman", "cleric", "clerk", "click", "client", "cliff", "climate", "climb", "clinic", "clip", "clipboard", "clipper", "cloak", "cloakroom", "clock", "clockwork", "clogs", "cloister", "clone", "close", "closet", "closing", "closure", "cloth", "clothes", "clothing", "cloud", "cloudburst", "clove", "clover", "cloves", "club", "clue", "cluster", "clutch", "co-producer", "coach", "coal", "coalition", "coast", "coaster", "coat", "cob", "cobbler", "cobweb", "cockpit", "cockroach", "cocktail", "cocoa", "coconut", "cod", "code", "codepage", "codling", "codon", "coevolution", "cofactor", "coffee", "coffin", "cohesion", "cohort", "coil", "coin", "coincidence", "coinsurance", "coke", "cold", "coleslaw", "coliseum", "collaboration", "collagen", "collapse", "collar", "collard", "collateral", "colleague", "collection", "collectivisation", "collectivization", "collector", "college", "collision", "colloquy", "colon", "colonial", "colonialism", "colonisation", "colonization", "colony", "color", "colorlessness", "colt", "column", "columnist", "comb", "combat", "combination", "combine", "comeback", "comedy", "comestible", "comfort", "comfortable", "comic", "comics", "comma", "command", "commander", "commandment", "comment", "commerce", "commercial", "commission", "commitment", "committee", "commodity", "common", "commonsense", "commotion", "communicant", "communication", "communion", "communist", "community", "commuter", "company", "comparison", "compass", "compassion", "compassionate", "compensation", "competence", "competition", "competitor", "complaint", "complement", "completion", "complex", "complexity", "compliance", "complication", "complicity", "compliment", "component", "comportment", "composer", "composite", "composition", "compost", "comprehension", "compress", "compromise", "comptroller", "compulsion", "computer", "comradeship", "con", "concentrate", "concentration", "concept", "conception", "concern", "concert", "conclusion", "concrete", "condition", "conditioner", "condominium", "condor", "conduct", "conductor", "cone", "confectionery", "conference", "confidence", "confidentiality", "configuration", "confirmation", "conflict", "conformation", "confusion", "conga", "congo", "congregation", "congress", "congressman", "congressperson", "conifer", "connection", "connotation", "conscience", "consciousness", "consensus", "consent", "consequence", "conservation", "conservative", "consideration", "consignment", "consist", "consistency", "console", "consonant", "conspiracy", "conspirator", "constant", "constellation", "constitution", "constraint", "construction", "consul", "consulate", "consulting", "consumer", "consumption", "contact", "contagion", "container", "content", "contention", "contest", "context", "continent", "contingency", "continuity", "contour", "contract", "contractor", "contrail", "contrary", "contrast", "contribution", "contributor", "control", "controller", "controversy", "convection", "convenience", "convention", "conversation", "conversion", "convert", "convertible", "conviction", "cook", "cookbook", "cookie", "cooking", "cooperation", "coordination", "coordinator", "cop", "cop-out", "cope", "copper", "copy", "copying", "copyright", "copywriter", "coral", "cord", "corduroy", "core", "cork", "cormorant", "corn", "corner", "cornerstone", "cornet", "cornflakes", "cornmeal", "corporal", "corporation", "corporatism", "corps", "corral", "correspondence", "correspondent", "corridor", "corruption", "corsage", "cosset", "cost", "costume", "cot", "cottage", "cotton", "couch", "cougar", "cough", "council", "councilman", "councilor", "councilperson", "counsel", "counseling", "counselling", "counsellor", "counselor", "count", "counter", "counter-force", "counterpart", "countess", "country", "countryside", "county", "couple", "coupon", "courage", "course", "court", "courthouse", "courtroom", "cousin", "covariate", "cover", "coverage", "coverall", "cow", "cowbell", "cowboy", "coyote", "crab", "cradle", "craft", "craftsman", "cranberry", "crane", "cranky", "crate", "cravat", "craw", "crawdad", "crayfish", "crayon", "crazy", "cream", "creation", "creative", "creativity", "creator", "creature", "creche", "credential", "credenza", "credibility", "credit", "creditor", "creek", "crepe", "crest", "crew", "crewman", "crewmate", "crewmember", "crewmen", "cria", "crib", "cribbage", "cricket", "cricketer", "crime", "criminal", "crinoline", "crisis", "crisp", "criteria", "criterion", "critic", "criticism", "crocodile", "crocus", "croissant", "crook", "crop", "cross", "cross-contamination", "cross-stitch", "croup", "crow", "crowd", "crown", "crude", "cruelty", "cruise", "crumb", "crunch", "crusader", "crush", "crust", "cry", "crystal", "crystallography", "cub", "cube", "cuckoo", "cucumber", "cue", "cuff-link", "cuisine", "cultivar", "cultivator", "culture", "culvert", "cummerbund", "cup", "cupboard", "cupcake", "cupola", "curd", "cure", "curio", "curiosity", "curl", "curler", "currant", "currency", "current", "curriculum", "curry", "curse", "cursor", "curtailment", "curtain", "curve", "cushion", "custard", "custody", "custom", "customer", "cut", "cuticle", "cutlet", "cutover", "cutting", "cyclamen", "cycle", "cyclone", "cyclooxygenase", "cygnet", "cylinder", "cymbal", "cynic", "cyst", "cytokine", "cytoplasm", "dad", "daddy", "daffodil", "dagger", "dahlia", "daikon", "daily", "dairy", "daisy", "dam", "damage", "dame", "dance", "dancer", "dancing", "dandelion", "danger", "dare", "dark", "darkness", "darn", "dart", "dash", "dashboard", "data", "database", "date", "daughter", "dawn", "day", "daybed", "daylight", "dead", "deadline", "deal", "dealer", "dealing", "dearest", "death", "deathwatch", "debate", "debris", "debt", "debtor", "decade", "decadence", "decency", "decimal", "decision", "decision-making", "deck", "declaration", "declination", "decline", "decoder", "decongestant", "decoration", "decrease", "decryption", "dedication", "deduce", "deduction", "deed", "deep", "deer", "default", "defeat", "defendant", "defender", "defense", "deficit", "definition", "deformation", "degradation", "degree", "delay", "deliberation", "delight", "delivery", "demand", "democracy", "democrat", "demur", "den", "denim", "denominator", "density", "dentist", "deodorant", "department", "departure", "dependency", "dependent", "deployment", "deposit", "deposition", "depot", "depression", "depressive", "depth", "deputy", "derby", "derivation", "derivative", "derrick", "descendant", "descent", "description", "desert", "design", "designation", "designer", "desire", "desk", "desktop", "dessert", "destination", "destiny", "destroyer", "destruction", "detail", "detainee", "detainment", "detection", "detective", "detector", "detention", "determination", "detour", "devastation", "developer", "developing", "development", "developmental", "deviance", "deviation", "device", "devil", "dew", "dhow", "diabetes", "diadem", "diagnosis", "diagram", "dial", "dialect", "dialogue", "diam", "diamond", "diaper", "diaphragm", "diarist", "diary", "dibble", "dickey", "dictaphone", "dictator", "diction", "dictionary", "die", "diesel", "diet", "difference", "differential", "difficulty", "diffuse", "dig", "digestion", "digestive", "digger", "digging", "digit", "dignity", "dilapidation", "dill", "dilution", "dime", "dimension", "dimple", "diner", "dinghy", "dining", "dinner", "dinosaur", "dioxide", "dip", "diploma", "diplomacy", "direction", "directive", "director", "directory", "dirndl", "dirt", "disability", "disadvantage", "disagreement", "disappointment", "disarmament", "disaster", "discharge", "discipline", "disclaimer", "disclosure", "disco", "disconnection", "discount", "discourse", "discovery", "discrepancy", "discretion", "discrimination", "discussion", "disdain", "disease", "disembodiment", "disengagement", "disguise", "disgust", "dish", "dishwasher", "disk", "disparity", "dispatch", "displacement", "display", "disposal", "disposer", "disposition", "dispute", "disregard", "disruption", "dissemination", "dissonance", "distance", "distinction", "distortion", "distribution", "distributor", "district", "divalent", "divan", "diver", "diversity", "divide", "dividend", "divider", "divine", "diving", "division", "divorce", "doc", "dock", "doctor", "doctorate", "doctrine", "document", "documentary", "documentation", "doe", "dog", "dogsled", "dogwood", "doing", "doll", "dollar", "dollop", "dolman", "dolor", "dolphin", "domain", "dome", "donation", "donkey", "donor", "donut", "door", "doorbell", "doorknob", "doorpost", "doorway", "dory", "dose", "dot", "double", "doubling", "doubt", "doubter", "dough", "doughnut", "down", "downfall", "downforce", "downgrade", "download", "downstairs", "downtown", "downturn", "dozen", "draft", "drag", "dragon", "dragonfly", "dragonfruit", "dragster", "drain", "drainage", "drake", "drama", "dramaturge", "drapes", "draw", "drawbridge", "drawer", "drawing", "dream", "dreamer", "dredger", "dress", "dresser", "dressing", "drill", "drink", "drinking", "drive", "driver", "driveway", "driving", "drizzle", "dromedary", "drop", "drudgery", "drug", "drum", "drummer", "dryer", "duck", "duckling", "dud", "dude", "due", "duel", "dueling", "duffel", "dugout", "dulcimer", "dumbwaiter", "dump", "dune", "dungarees", "dungeon", "duplexer", "duration", "durian", "dusk", "dust", "duster", "duty", "dwell", "dwelling", "dynamics", "dynamite", "dynamo", "dynasty", "dysfunction", "e-book", "e-mail", "e-reader", "eagle", "eaglet", "ear", "eardrum", "earmuffs", "earnings", "earplug", "earring", "earrings", "earth", "earthquake", "earthworm", "ease", "easel", "east", "eating", "eaves", "eavesdropper", "ecclesia", "echidna", "eclipse", "ecliptic", "ecology", "economics", "economy", "ecosystem", "ectoderm", "ectodermal", "ecumenist", "eddy", "edge", "edger", "edible", "editing", "edition", "editor", "editorial", "education", "eel", "effacement", "effect", "effective", "effectiveness", "effector", "efficacy", "efficiency", "effort", "egg", "egghead", "eggnog", "eggplant", "ego", "eicosanoid", "ejector", "elbow", "elderberry", "election", "electricity", "electrocardiogram", "electronics", "element", "elephant", "elevation", "elevator", "eleventh", "elf", "elicit", "eligibility", "elimination", "elite", "elixir", "elk", "ellipse", "elm", "elongation", "elver", "email", "emanate", "embarrassment", "embassy", "embellishment", "embossing", "embryo", "emerald", "emergence", "emergency", "emergent", "emery", "emission", "emitter", "emotion", "emphasis", "empire", "employ", "employee", "employer", "employment", "empowerment", "emu", "enactment", "encirclement", "enclave", "enclosure", "encounter", "encouragement", "encyclopedia", "end", "endive", "endoderm", "endorsement", "endothelium", "endpoint", "enemy", "energy", "enforcement", "engagement", "engine", "engineer", "engineering", "enigma", "enjoyment", "enquiry", "enrollment", "enterprise", "entertainment", "enthusiasm", "entirety", "entity", "entrance", "entree", "entrepreneur", "entry", "envelope", "environment", "envy", "enzyme", "epauliere", "epee", "ephemera", "ephemeris", "ephyra", "epic", "episode", "epithelium", "epoch", "eponym", "epoxy", "equal", "equality", "equation", "equinox", "equipment", "equity", "equivalent", "era", "eraser", "erosion", "error", "escalator", "escape", "espadrille", "espalier", "essay", "essence", "essential", "establishment", "estate", "estimate", "estrogen", "estuary", "eternity", "ethernet", "ethics", "ethnicity", "ethyl", "euphonium", "eurocentrism", "evaluation", "evaluator", "evaporation", "eve", "evening", "evening-wear", "event", "everybody", "everyone", "everything", "eviction", "evidence", "evil", "evocation", "evolution", "ex-husband", "ex-wife", "exaggeration", "exam", "examination", "examiner", "example", "exasperation", "excellence", "exception", "excerpt", "excess", "exchange", "excitement", "exclamation", "excursion", "excuse", "execution", "executive", "executor", "exercise", "exhaust", "exhaustion", "exhibit", "exhibition", "exile", "existence", "exit", "exocrine", "expansion", "expansionism", "expectancy", "expectation", "expedition", "expense", "experience", "experiment", "experimentation", "expert", "expertise", "explanation", "exploration", "explorer", "export", "expose", "exposition", "exposure", "expression", "extension", "extent", "exterior", "external", "extinction", "extreme", "extremist", "eye", "eyeball", "eyebrow", "eyebrows", "eyeglasses", "eyelash", "eyelashes", "eyelid", "eyelids", "eyeliner", "eyestrain", "eyrie", "fabric", "face", "facelift", "facet", "facility", "facsimile", "fact", "factor", "factory", "faculty", "fahrenheit", "fail", "failure", "fairness", "fairy", "faith", "faithful", "fall", "fallacy", "falling-out", "fame", "familiar", "familiarity", "family", "fan", "fang", "fanlight", "fanny-pack", "fantasy", "farm", "farmer", "farming", "farmland", "farrow", "fascia", "fashion", "fat", "fate", "father", "father-in-law", "fatigue", "fatigues", "faucet", "fault", "fav", "fava", "favor", "favorite", "fawn", "fax", "fear", "feast", "feather", "feature", "fedelini", "federation", "fedora", "fee", "feed", "feedback", "feeding", "feel", "feeling", "fellow", "felony", "female", "fen", "fence", "fencing", "fender", "feng", "fennel", "ferret", "ferry", "ferryboat", "fertilizer", "festival", "fetus", "few", "fiber", "fiberglass", "fibre", "fibroblast", "fibrosis", "ficlet", "fiction", "fiddle", "field", "fiery", "fiesta", "fifth", "fig", "fight", "fighter", "figure", "figurine", "file", "filing", "fill", "fillet", "filly", "film", "filter", "filth", "final", "finance", "financing", "finding", "fine", "finer", "finger", "fingerling", "fingernail", "finish", "finisher", "fir", "fire", "fireman", "fireplace", "firewall", "firm", "first", "fish", "fishbone", "fisherman", "fishery", "fishing", "fishmonger", "fishnet", "fit", "fitness", "fix", "fixture", "flag", "flair", "flame", "flan", "flanker", "flare", "flash", "flat", "flatboat", "flavor", "flax", "fleck", "fledgling", "fleece", "flesh", "flexibility", "flick", "flicker", "flight", "flint", "flintlock", "flip-flops", "flock", "flood", "floodplain", "floor", "floozie", "flour", "flow", "flower", "flu", "flugelhorn", "fluke", "flume", "flung", "flute", "fly", "flytrap", "foal", "foam", "fob", "focus", "fog", "fold", "folder", "folk", "folklore", "follower", "following", "fondue", "font", "food", "foodstuffs", "fool", "foot", "footage", "football", "footnote", "footprint", "footrest", "footstep", "footstool", "footwear", "forage", "forager", "foray", "force", "ford", "forearm", "forebear", "forecast", "forehead", "foreigner", "forelimb", "forest", "forestry", "forever", "forgery", "fork", "form", "formal", "formamide", "format", "formation", "former", "formicarium", "formula", "fort", "forte", "fortnight", "fortress", "fortune", "forum", "foundation", "founder", "founding", "fountain", "fourths", "fowl", "fox", "foxglove", "fraction", "fragrance", "frame", "framework", "fratricide", "fraud", "fraudster", "freak", "freckle", "freedom", "freelance", "freezer", "freezing", "freight", "freighter", "frenzy", "freon", "frequency", "fresco", "friction", "fridge", "friend", "friendship", "fries", "frigate", "fright", "fringe", "fritter", "frock", "frog", "front", "frontier", "frost", "frosting", "frown", "fruit", "frustration", "fry", "fuel", "fugato", "fulfillment", "full", "fun", "function", "functionality", "fund", "funding", "fundraising", "fur", "furnace", "furniture", "fusarium", "futon", "future", "gadget", "gaffe", "gaffer", "gain", "gaiters", "gale", "gall-bladder", "gallery", "galley", "gallon", "galoshes", "gambling", "game", "gamebird", "gaming", "gamma-ray", "gander", "gang", "gap", "garage", "garb", "garbage", "garden", "garlic", "garment", "garter", "gas", "gasket", "gasoline", "gasp", "gastronomy", "gastropod", "gate", "gateway", "gather", "gathering", "gator", "gauge", "gauntlet", "gavel", "gazebo", "gazelle", "gear", "gearshift", "geek", "gel", "gelatin", "gelding", "gem", "gemsbok", "gender", "gene", "general", "generation", "generator", "generosity", "genetics", "genie", "genius", "genre", "gentleman", "geography", "geology", "geometry", "geranium", "gerbil", "gesture", "geyser", "gherkin", "ghost", "giant", "gift", "gig", "gigantism", "giggle", "ginger", "gingerbread", "ginseng", "giraffe", "girdle", "girl", "girlfriend", "glacier", "gladiolus", "glance", "gland", "glass", "glasses", "glee", "glen", "glider", "gliding", "glimpse", "globe", "glockenspiel", "gloom", "glory", "glove", "glow", "glucose", "glue", "glut", "glutamate", "gnat", "gnu", "go-kart", "goal", "goat", "gobbler", "god", "goddess", "godfather", "godmother", "godparent", "goggles", "going", "gold", "goldfish", "golf", "gondola", "gong", "good", "good-bye", "goodbye", "goodie", "goodness", "goodnight", "goodwill", "goose", "gopher", "gorilla", "gosling", "gossip", "governance", "government", "governor", "gown", "grab-bag", "grace", "grade", "gradient", "graduate", "graduation", "graffiti", "graft", "grain", "gram", "grammar", "gran", "grand", "grandchild", "granddaughter", "grandfather", "grandma", "grandmom", "grandmother", "grandpa", "grandparent", "grandson", "granny", "granola", "grant", "grape", "grapefruit", "graph", "graphic", "grasp", "grass", "grasshopper", "grassland", "gratitude", "gravel", "gravitas", "gravity", "gravy", "gray", "grease", "great-grandfather", "great-grandmother", "greatness", "greed", "green", "greenhouse", "greens", "grenade", "grey", "grid", "grief", "grill", "grin", "grip", "gripper", "grit", "grocery", "ground", "group", "grouper", "grouse", "grove", "growth", "grub", "guacamole", "guarantee", "guard", "guava", "guerrilla", "guess", "guest", "guestbook", "guidance", "guide", "guideline", "guilder", "guilt", "guilty", "guinea", "guitar", "guitarist", "gum", "gumshoe", "gun", "gunpowder", "gutter", "guy", "gym", "gymnast", "gymnastics", "gynaecology", "gyro", "habit", "habitat", "hacienda", "hacksaw", "hackwork", "hail", "hair", "haircut", "hake", "half", "half-brother", "half-sister", "halibut", "hall", "halloween", "hallway", "halt", "ham", "hamburger", "hammer", "hammock", "hamster", "hand", "hand-holding", "handball", "handful", "handgun", "handicap", "handle", "handlebar", "handmaiden", "handover", "handrail", "handsaw", "hanger", "happening", "happiness", "harald", "harbor", "harbour", "hard-hat", "hardboard", "hardcover", "hardening", "hardhat", "hardship", "hardware", "hare", "harm", "harmonica", "harmonise", "harmonize", "harmony", "harp", "harpooner", "harpsichord", "harvest", "harvester", "hash", "hashtag", "hassock", "haste", "hat", "hatbox", "hatchet", "hatchling", "hate", "hatred", "haunt", "haven", "haversack", "havoc", "hawk", "hay", "haze", "hazel", "hazelnut", "head", "headache", "headlight", "headline", "headphones", "headquarters", "headrest", "health", "health-care", "hearing", "hearsay", "heart", "heart-throb", "heartache", "heartbeat", "hearth", "hearthside", "heartwood", "heat", "heater", "heating", "heaven", "heavy", "hectare", "hedge", "hedgehog", "heel", "heifer", "height", "heir", "heirloom", "helicopter", "helium", "hellcat", "hello", "helmet", "helo", "help", "hemisphere", "hemp", "hen", "hepatitis", "herb", "herbs", "heritage", "hermit", "hero", "heroine", "heron", "herring", "hesitation", "hexagon", "heyday", "hiccups", "hide", "hierarchy", "high", "high-rise", "highland", "highlight", "highway", "hike", "hiking", "hill", "hint", "hip", "hippodrome", "hippopotamus", "hire", "hiring", "historian", "history", "hit", "hive", "hobbit", "hobby", "hockey", "hog", "hold", "holder", "hole", "holiday", "home", "homeland", "homeownership", "hometown", "homework", "homogenate", "homonym", "honesty", "honey", "honeybee", "honeydew", "honor", "honoree", "hood", "hoof", "hook", "hop", "hope", "hops", "horde", "horizon", "hormone", "horn", "hornet", "horror", "horse", "horseradish", "horst", "hose", "hosiery", "hospice", "hospital", "hospitalisation", "hospitality", "hospitalization", "host", "hostel", "hostess", "hotdog", "hotel", "hound", "hour", "hourglass", "house", "houseboat", "household", "housewife", "housework", "housing", "hovel", "hovercraft", "howard", "howitzer", "hub", "hubcap", "hubris", "hug", "hugger", "hull", "human", "humanity", "humidity", "hummus", "humor", "humour", "hundred", "hunger", "hunt", "hunter", "hunting", "hurdle", "hurdler", "hurricane", "hurry", "hurt", "husband", "hut", "hutch", "hyacinth", "hybridisation", "hybridization", "hydrant", "hydraulics", "hydrocarb", "hydrocarbon", "hydrofoil", "hydrogen", "hydrolyse", "hydrolysis", "hydrolyze", "hydroxyl", "hyena", "hygienic", "hype", "hyphenation", "hypochondria", "hypothermia", "hypothesis", "ice", "ice-cream", "iceberg", "icebreaker", "icecream", "icicle", "icing", "icon", "icy", "id", "idea", "ideal", "identification", "identity", "ideology", "idiom", "igloo", "ignorance", "ignorant", "ikebana", "illiteracy", "illness", "illusion", "illustration", "image", "imagination", "imbalance", "imitation", "immigrant", "immigration", "immortal", "impact", "impairment", "impala", "impediment", "implement", "implementation", "implication", "import", "importance", "impostor", "impress", "impression", "imprisonment", "impropriety", "improvement", "impudence", "impulse", "in-joke", "in-laws", "inability", "inauguration", "inbox", "incandescence", "incarnation", "incense", "incentive", "inch", "incidence", "incident", "incision", "inclusion", "income", "incompetence", "inconvenience", "increase", "incubation", "independence", "independent", "index", "indication", "indicator", "indigence", "individual", "industrialisation", "industrialization", "industry", "inequality", "inevitable", "infancy", "infant", "infarction", "infection", "infiltration", "infinite", "infix", "inflammation", "inflation", "influence", "influx", "info", "information", "infrastructure", "infusion", "inglenook", "ingrate", "ingredient", "inhabitant", "inheritance", "inhibition", "inhibitor", "initial", "initialise", "initialize", "initiative", "injunction", "injury", "injustice", "ink", "inlay", "inn", "innervation", "innocence", "innocent", "innovation", "input", "inquiry", "inscription", "insect", "insectarium", "insert", "inside", "insight", "insolence", "insomnia", "inspection", "inspector", "inspiration", "installation", "instance", "instant", "instinct", "institute", "institution", "instruction", "instructor", "instrument", "instrumentalist", "instrumentation", "insulation", "insurance", "insurgence", "insurrection", "integer", "integral", "integration", "integrity", "intellect", "intelligence", "intensity", "intent", "intention", "intentionality", "interaction", "interchange", "interconnection", "interest", "interface", "interferometer", "interior", "interject", "interloper", "internet", "interpretation", "interpreter", "interval", "intervenor", "intervention", "interview", "interviewer", "intestine", "introduction", "intuition", "invader", "invasion", "invention", "inventor", "inventory", "inverse", "inversion", "investigation", "investigator", "investment", "investor", "invitation", "invite", "invoice", "involvement", "iridescence", "iris", "iron", "ironclad", "irony", "irrigation", "ischemia", "island", "isogloss", "isolation", "issue", "item", "itinerary", "ivory", "jack", "jackal", "jacket", "jackfruit", "jade", "jaguar", "jail", "jailhouse", "jalapeño", "jam", "jar", "jasmine", "jaw", "jazz", "jealousy", "jeans", "jeep", "jelly", "jellybeans", "jellyfish", "jet", "jewel", "jeweller", "jewellery", "jewelry", "jicama", "jiffy", "job", "jockey", "jodhpurs", "joey", "jogging", "joint", "joke", "jot", "journal", "journalism", "journalist", "journey", "joy", "judge", "judgment", "judo", "jug", "juggernaut", "juice", "julienne", "jumbo", "jump", "jumper", "jumpsuit", "jungle", "junior", "junk", "junker", "junket", "jury", "justice", "justification", "jute", "kale", "kangaroo", "karate", "kayak", "kazoo", "kebab", "keep", "keeper", "kendo", "kennel", "ketch", "ketchup", "kettle", "kettledrum", "key", "keyboard", "keyboarding", "keystone", "kick", "kick-off", "kid", "kidney", "kielbasa", "kill", "killer", "killing", "kilogram", "kilometer", "kilt", "kimono", "kinase", "kind", "kindness", "king", "kingdom", "kingfish", "kiosk", "kiss", "kit", "kitchen", "kite", "kitsch", "kitten", "kitty", "kiwi", "knee", "kneejerk", "knickers", "knife", "knife-edge", "knight", "knitting", "knock", "knot", "know-how", "knowledge", "knuckle", "koala", "kohlrabi", "lab", "label", "labor", "laboratory", "laborer", "labour", "labourer", "lace", "lack", "lacquerware", "lad", "ladder", "ladle", "lady", "ladybug", "lag", "lake", "lamb", "lambkin", "lament", "lamp", "lanai", "land", "landform", "landing", "landmine", "landscape", "lane", "language", "lantern", "lap", "laparoscope", "lapdog", "laptop", "larch", "lard", "larder", "lark", "larva", "laryngitis", "lasagna", "lashes", "last", "latency", "latex", "lathe", "latitude", "latte", "latter", "laugh", "laughter", "laundry", "lava", "law", "lawmaker", "lawn", "lawsuit", "lawyer", "lay", "layer", "layout", "lead", "leader", "leadership", "leading", "leaf", "league", "leaker", "leap", "learning", "leash", "leather", "leave", "leaver", "lecture", "leek", "leeway", "left", "leg", "legacy", "legal", "legend", "legging", "legislation", "legislator", "legislature", "legitimacy", "legume", "leisure", "lemon", "lemonade", "lemur", "lender", "lending", "length", "lens", "lentil", "leopard", "leprosy", "leptocephalus", "lesson", "letter", "lettuce", "level", "lever", "leverage", "leveret", "liability", "liar", "liberty", "library", "licence", "license", "licensing", "licorice", "lid", "lie", "lieu", "lieutenant", "life", "lifestyle", "lifetime", "lift", "ligand", "light", "lighting", "lightning", "lightscreen", "ligula", "likelihood", "likeness", "lilac", "lily", "limb", "lime", "limestone", "limit", "limitation", "limo", "line", "linen", "liner", "linguist", "linguistics", "lining", "link", "linkage", "linseed", "lion", "lip", "lipid", "lipoprotein", "lipstick", "liquid", "liquidity", "liquor", "list", "listening", "listing", "literate", "literature", "litigation", "litmus", "litter", "littleneck", "liver", "livestock", "living", "lizard", "llama", "load", "loading", "loaf", "loafer", "loan", "lobby", "lobotomy", "lobster", "local", "locality", "location", "lock", "locker", "locket", "locomotive", "locust", "lode", "loft", "log", "loggia", "logic", "login", "logistics", "logo", "loincloth", "lollipop", "loneliness", "longboat", "longitude", "look", "lookout", "loop", "loophole", "loquat", "lord", "loss", "lot", "lotion", "lottery", "lounge", "louse", "lout", "love", "lover", "lox", "loyalty", "luck", "luggage", "lumber", "lumberman", "lunch", "luncheonette", "lunchmeat", "lunchroom", "lung", "lunge", "lute", "luxury", "lychee", "lycra", "lye", "lymphocyte", "lynx", "lyocell", "lyre", "lyrics", "lysine", "mRNA", "macadamia", "macaroni", "macaroon", "macaw", "machine", "machinery", "macrame", "macro", "macrofauna", "madam", "maelstrom", "maestro", "magazine", "maggot", "magic", "magnet", "magnitude", "maid", "maiden", "mail", "mailbox", "mailer", "mailing", "mailman", "main", "mainland", "mainstream", "maintainer", "maintenance", "maize", "major", "major-league", "majority", "makeover", "maker", "makeup", "making", "male", "malice", "mall", "mallard", "mallet", "malnutrition", "mama", "mambo", "mammoth", "man", "manacle", "management", "manager", "manatee", "mandarin", "mandate", "mandolin", "mangle", "mango", "mangrove", "manhunt", "maniac", "manicure", "manifestation", "manipulation", "mankind", "manner", "manor", "mansard", "manservant", "mansion", "mantel", "mantle", "mantua", "manufacturer", "manufacturing", "many", "map", "maple", "mapping", "maracas", "marathon", "marble", "march", "mare", "margarine", "margin", "mariachi", "marimba", "marines", "marionberry", "mark", "marker", "market", "marketer", "marketing", "marketplace", "marksman", "markup", "marmalade", "marriage", "marsh", "marshland", "marshmallow", "marten", "marxism", "mascara", "mask", "masonry", "mass", "massage", "mast", "masterpiece", "mastication", "mastoid", "mat", "match", "matchmaker", "mate", "material", "maternity", "math", "mathematics", "matrix", "matter", "mattock", "mattress", "max", "maximum", "maybe", "mayonnaise", "mayor", "meadow", "meal", "mean", "meander", "meaning", "means", "meantime", "measles", "measure", "measurement", "meat", "meatball", "meatloaf", "mecca", "mechanic", "mechanism", "med", "medal", "media", "median", "medication", "medicine", "medium", "meet", "meeting", "melatonin", "melody", "melon", "member", "membership", "membrane", "meme", "memo", "memorial", "memory", "men", "menopause", "menorah", "mention", "mentor", "menu", "merchandise", "merchant", "mercury", "meridian", "meringue", "merit", "mesenchyme", "mess", "message", "messenger", "messy", "metabolite", "metal", "metallurgist", "metaphor", "meteor", "meteorology", "meter", "methane", "method", "methodology", "metric", "metro", "metronome", "mezzanine", "microlending", "micronutrient", "microphone", "microwave", "mid-course", "midden", "middle", "middleman", "midline", "midnight", "midwife", "might", "migrant", "migration", "mile", "mileage", "milepost", "milestone", "military", "milk", "milkshake", "mill", "millennium", "millet", "millimeter", "million", "millisecond", "millstone", "mime", "mimosa", "min", "mincemeat", "mind", "mine", "mineral", "mineshaft", "mini", "mini-skirt", "minibus", "minimalism", "minimum", "mining", "minion", "minister", "mink", "minnow", "minor", "minor-league", "minority", "mint", "minute", "miracle", "mirror", "miscommunication", "misfit", "misnomer", "misplacement", "misreading", "misrepresentation", "miss", "missile", "mission", "mist", "mistake", "mister", "misunderstand", "miter", "mitten", "mix", "mixer", "mixture", "moai", "moat", "mob", "mobile", "mobility", "mobster", "moccasins", "mocha", "mochi", "mode", "model", "modeling", "modem", "modernist", "modernity", "modification", "molar", "molasses", "molding", "mole", "molecule", "mom", "moment", "monastery", "monasticism", "money", "monger", "monitor", "monitoring", "monk", "monkey", "monocle", "monopoly", "monotheism", "monsoon", "monster", "month", "monument", "mood", "moody", "moon", "moonlight", "moonscape", "moose", "mop", "morale", "morbid", "morbidity", "morning", "morphology", "morsel", "mortal", "mortality", "mortgage", "mortise", "mosque", "mosquito", "most", "motel", "moth", "mother", "mother-in-law", "motion", "motivation", "motive", "motor", "motorboat", "motorcar", "motorcycle", "mound", "mountain", "mouse", "mouser", "mousse", "moustache", "mouth", "mouton", "movement", "mover", "movie", "mower", "mozzarella", "mud", "muffin", "mug", "mukluk", "mule", "multimedia", "muscat", "muscatel", "muscle", "musculature", "museum", "mushroom", "music", "music-box", "music-making", "musician", "muskrat", "mussel", "mustache", "mustard", "mutation", "mutt", "mutton", "mycoplasma", "mystery", "myth", "mythology", "nail", "name", "naming", "nanoparticle", "napkin", "narrative", "nasal", "nation", "nationality", "native", "naturalisation", "nature", "navigation", "necessity", "neck", "necklace", "necktie", "nectar", "nectarine", "need", "needle", "neglect", "negligee", "negotiation", "neighbor", "neighborhood", "neighbour", "neighbourhood", "neologism", "neon", "neonate", "nephew", "nerve", "nest", "nestling", "nestmate", "net", "netball", "netbook", "netsuke", "network", "networking", "neurobiologist", "neuron", "neuropathologist", "neuropsychiatry", "news", "newsletter", "newspaper", "newsprint", "newsstand", "nexus", "nibble", "nicety", "niche", "nick", "nickel", "nickname", "niece", "night", "nightclub", "nightgown", "nightingale", "nightlife", "nightlight", "nightmare", "ninja", "nit", "nitrogen", "nobody", "nod", "node", "noir", "noise", "nonbeliever", "nonconformist", "nondisclosure", "nonsense", "noodle", "noodles", "noon", "norm", "normal", "normalisation", "normalization", "north", "nose", "notation", "note", "notebook", "notepad", "nothing", "notice", "notion", "notoriety", "nougat", "noun", "nourishment", "novel", "nucleotidase", "nucleotide", "nudge", "nuke", "number", "numeracy", "numeric", "numismatist", "nun", "nurse", "nursery", "nursing", "nurture", "nut", "nutmeg", "nutrient", "nutrition", "nylon", "oak", "oar", "oasis", "oat", "oatmeal", "oats", "obedience", "obesity", "obi", "object", "objection", "objective", "obligation", "oboe", "observation", "observatory", "obsession", "obsidian", "obstacle", "occasion", "occupation", "occurrence", "ocean", "ocelot", "octagon", "octave", "octavo", "octet", "octopus", "odometer", "odyssey", "oeuvre", "off-ramp", "offence", "offense", "offer", "offering", "office", "officer", "official", "offset", "oil", "okra", "oldie", "oleo", "olive", "omega", "omelet", "omission", "omnivore", "oncology", "onion", "online", "onset", "opening", "opera", "operating", "operation", "operator", "ophthalmologist", "opinion", "opossum", "opponent", "opportunist", "opportunity", "opposite", "opposition", "optimal", "optimisation", "optimist", "optimization", "option", "orange", "orangutan", "orator", "orchard", "orchestra", "orchid", "order", "ordinary", "ordination", "ore", "oregano", "organ", "organisation", "organising", "organization", "organizing", "orient", "orientation", "origin", "original", "originality", "ornament", "osmosis", "osprey", "ostrich", "other", "otter", "ottoman", "ounce", "outback", "outcome", "outfielder", "outfit", "outhouse", "outlaw", "outlay", "outlet", "outline", "outlook", "output", "outrage", "outrigger", "outrun", "outset", "outside", "oval", "ovary", "oven", "overcharge", "overclocking", "overcoat", "overexertion", "overflight", "overhead", "overheard", "overload", "overnighter", "overshoot", "oversight", "overview", "overweight", "owl", "owner", "ownership", "ox", "oxford", "oxygen", "oyster", "ozone", "pace", "pacemaker", "pack", "package", "packaging", "packet", "pad", "paddle", "paddock", "pagan", "page", "pagoda", "pail", "pain", "paint", "painter", "painting", "paintwork", "pair", "pajamas", "palace", "palate", "palm", "pamphlet", "pan", "pancake", "pancreas", "panda", "panel", "panic", "pannier", "panpipe", "panther", "pantologist", "pantology", "pantry", "pants", "pantsuit", "pantyhose", "papa", "papaya", "paper", "paperback", "paperwork", "parable", "parachute", "parade", "paradise", "paragraph", "parallelogram", "paramecium", "paramedic", "parameter", "paranoia", "parcel", "parchment", "pard", "pardon", "parent", "parenthesis", "parenting", "park", "parka", "parking", "parliament", "parole", "parrot", "parser", "parsley", "parsnip", "part", "participant", "participation", "particle", "particular", "partner", "partnership", "partridge", "party", "pass", "passage", "passbook", "passenger", "passing", "passion", "passive", "passport", "password", "past", "pasta", "paste", "pastor", "pastoralist", "pastry", "pasture", "pat", "patch", "pate", "patent", "patentee", "path", "pathogenesis", "pathology", "pathway", "patience", "patient", "patina", "patio", "patriarch", "patrimony", "patriot", "patrol", "patroller", "patrolling", "patron", "pattern", "patty", "pattypan", "pause", "pavement", "pavilion", "paw", "pawnshop", "pay", "payee", "payment", "payoff", "pea", "peace", "peach", "peacoat", "peacock", "peak", "peanut", "pear", "pearl", "peasant", "pecan", "pedal", "peek", "peen", "peer", "peer-to-peer", "pegboard", "pelican", "pelt", "pen", "penalty", "pence", "pencil", "pendant", "pendulum", "penguin", "penicillin", "peninsula", "pennant", "penny", "pension", "pentagon", "peony", "people", "pepper", "pepperoni", "percent", "percentage", "perception", "perch", "perennial", "perfection", "performance", "perfume", "period", "periodical", "peripheral", "permafrost", "permission", "permit", "perp", "perpendicular", "persimmon", "person", "personal", "personality", "personnel", "perspective", "pest", "pet", "petal", "petition", "petitioner", "petticoat", "pew", "pharmacist", "pharmacopoeia", "phase", "pheasant", "phenomenon", "phenotype", "pheromone", "philanthropy", "philosopher", "philosophy", "phone", "phosphate", "photo", "photodiode", "photograph", "photographer", "photography", "photoreceptor", "phrase", "phrasing", "physical", "physics", "physiology", "pianist", "piano", "piccolo", "pick", "pickax", "pickaxe", "picket", "pickle", "pickup", "picnic", "picture", "picturesque", "pie", "piece", "pier", "piety", "pig", "pigeon", "piglet", "pigpen", "pigsty", "pike", "pilaf", "pile", "pilgrim", "pilgrimage", "pill", "pillar", "pillbox", "pillow", "pilot", "pimple", "pin", "pinafore", "pince-nez", "pine", "pineapple", "pinecone", "ping", "pinkie", "pinot", "pinstripe", "pint", "pinto", "pinworm", "pioneer", "pipe", "pipeline", "piracy", "pirate", "pit", "pita", "pitch", "pitcher", "pitching", "pith", "pizza", "place", "placebo", "placement", "placode", "plagiarism", "plain", "plaintiff", "plan", "plane", "planet", "planning", "plant", "plantation", "planter", "planula", "plaster", "plasterboard", "plastic", "plate", "platelet", "platform", "platinum", "platter", "platypus", "play", "player", "playground", "playroom", "playwright", "plea", "pleasure", "pleat", "pledge", "plenty", "plier", "pliers", "plight", "plot", "plough", "plover", "plow", "plowman", "plug", "plugin", "plum", "plumber", "plume", "plunger", "plywood", "pneumonia", "pocket", "pocket-watch", "pocketbook", "pod", "podcast", "poem", "poet", "poetry", "poignance", "point", "poison", "poisoning", "poker", "polarisation", "polarization", "pole", "polenta", "police", "policeman", "policy", "polish", "politician", "politics", "poll", "polliwog", "pollutant", "pollution", "polo", "polyester", "polyp", "pomegranate", "pomelo", "pompom", "poncho", "pond", "pony", "pool", "poor", "pop", "popcorn", "poppy", "popsicle", "popularity", "population", "populist", "porcelain", "porch", "porcupine", "pork", "porpoise", "port", "porter", "portfolio", "porthole", "portion", "portrait", "position", "possession", "possibility", "possible", "post", "postage", "postbox", "poster", "posterior", "postfix", "pot", "potato", "potential", "pottery", "potty", "pouch", "poultry", "pound", "pounding", "poverty", "powder", "power", "practice", "practitioner", "prairie", "praise", "pray", "prayer", "precedence", "precedent", "precipitation", "precision", "predecessor", "preface", "preference", "prefix", "pregnancy", "prejudice", "prelude", "premeditation", "premier", "premise", "premium", "preoccupation", "preparation", "prescription", "presence", "present", "presentation", "preservation", "preserves", "presidency", "president", "press", "pressroom", "pressure", "pressurisation", "pressurization", "prestige", "presume", "pretzel", "prevalence", "prevention", "prey", "price", "pricing", "pride", "priest", "priesthood", "primary", "primate", "prince", "princess", "principal", "principle", "print", "printer", "printing", "prior", "priority", "prison", "prisoner", "privacy", "private", "privilege", "prize", "prizefight", "probability", "probation", "probe", "problem", "procedure", "proceedings", "process", "processing", "processor", "proctor", "procurement", "produce", "producer", "product", "production", "productivity", "profession", "professional", "professor", "profile", "profit", "progenitor", "program", "programme", "programming", "progress", "progression", "prohibition", "project", "proliferation", "promenade", "promise", "promotion", "prompt", "pronoun", "pronunciation", "proof", "proof-reader", "propane", "property", "prophet", "proponent", "proportion", "proposal", "proposition", "proprietor", "prose", "prosecution", "prosecutor", "prospect", "prosperity", "prostacyclin", "prostanoid", "prostrate", "protection", "protein", "protest", "protocol", "providence", "provider", "province", "provision", "prow", "proximal", "proximity", "prune", "pruner", "pseudocode", "pseudoscience", "psychiatrist", "psychoanalyst", "psychologist", "psychology", "ptarmigan", "pub", "public", "publication", "publicity", "publisher", "publishing", "pudding", "puddle", "puffin", "pug", "puggle", "pulley", "pulse", "puma", "pump", "pumpernickel", "pumpkin", "pumpkinseed", "pun", "punch", "punctuation", "punishment", "pup", "pupa", "pupil", "puppet", "puppy", "purchase", "puritan", "purity", "purpose", "purr", "purse", "pursuit", "push", "pusher", "put", "puzzle", "pyramid", "pyridine", "quadrant", "quail", "qualification", "quality", "quantity", "quart", "quarter", "quartet", "quartz", "queen", "query", "quest", "question", "questioner", "questionnaire", "quiche", "quicksand", "quiet", "quill", "quilt", "quince", "quinoa", "quit", "quiver", "quota", "quotation", "quote", "rabbi", "rabbit", "raccoon", "race", "racer", "racing", "rack", "radar", "radiator", "radio", "radiosonde", "radish", "raffle", "raft", "rag", "rage", "raid", "rail", "railing", "railroad", "railway", "raiment", "rain", "rainbow", "raincoat", "rainmaker", "rainstorm", "rainy", "raise", "raisin", "rake", "rally", "ram", "rambler", "ramen", "ramie", "ranch", "rancher", "randomisation", "randomization", "range", "ranger", "rank", "rap", "raspberry", "rat", "rate", "ratepayer", "rating", "ratio", "rationale", "rations", "raven", "ravioli", "rawhide", "ray", "rayon", "razor", "reach", "reactant", "reaction", "read", "reader", "readiness", "reading", "real", "reality", "realization", "realm", "reamer", "rear", "reason", "reasoning", "rebel", "rebellion", "reboot", "recall", "recapitulation", "receipt", "receiver", "reception", "receptor", "recess", "recession", "recipe", "recipient", "reciprocity", "reclamation", "recliner", "recognition", "recollection", "recommendation", "reconsideration", "record", "recorder", "recording", "recovery", "recreation", "recruit", "rectangle", "redesign", "redhead", "redirect", "rediscovery", "reduction", "reef", "refectory", "reference", "referendum", "reflection", "reform", "refreshments", "refrigerator", "refuge", "refund", "refusal", "refuse", "regard", "regime", "region", "regionalism", "register", "registration", "registry", "regret", "regulation", "regulator", "rehospitalisation", "rehospitalization", "reindeer", "reinscription", "reject", "relation", "relationship", "relative", "relaxation", "relay", "release", "reliability", "relief", "religion", "relish", "reluctance", "remains", "remark", "reminder", "remnant", "remote", "removal", "renaissance", "rent", "reorganisation", "reorganization", "repair", "reparation", "repayment", "repeat", "replacement", "replica", "replication", "reply", "report", "reporter", "reporting", "repository", "representation", "representative", "reprocessing", "republic", "republican", "reputation", "request", "requirement", "resale", "rescue", "research", "researcher", "resemblance", "reservation", "reserve", "reservoir", "reset", "residence", "resident", "residue", "resist", "resistance", "resolution", "resolve", "resort", "resource", "respect", "respite", "response", "responsibility", "rest", "restaurant", "restoration", "restriction", "restroom", "restructuring", "result", "resume", "retailer", "retention", "rethinking", "retina", "retirement", "retouching", "retreat", "retrospect", "retrospective", "retrospectivity", "return", "reunion", "revascularisation", "revascularization", "reveal", "revelation", "revenant", "revenge", "revenue", "reversal", "reverse", "review", "revitalisation", "revitalization", "revival", "revolution", "revolver", "reward", "rhetoric", "rheumatism", "rhinoceros", "rhubarb", "rhyme", "rhythm", "rib", "ribbon", "rice", "riddle", "ride", "rider", "ridge", "riding", "rifle", "right", "rim", "ring", "ringworm", "riot", "rip", "ripple", "rise", "riser", "risk", "rite", "ritual", "river", "riverbed", "rivulet", "road", "roadway", "roar", "roast", "robe", "robin", "robot", "robotics", "rock", "rocker", "rocket", "rocket-ship", "rod", "role", "roll", "roller", "romaine", "romance", "roof", "room", "roommate", "rooster", "root", "rope", "rose", "rosemary", "roster", "rostrum", "rotation", "round", "roundabout", "route", "router", "routine", "row", "rowboat", "rowing", "rubber", "rubbish", "rubric", "ruby", "ruckus", "rudiment", "ruffle", "rug", "rugby", "ruin", "rule", "ruler", "ruling", "rumor", "run", "runaway", "runner", "running", "runway", "rush", "rust", "rutabaga", "rye", "sabre", "sack", "saddle", "sadness", "safari", "safe", "safeguard", "safety", "saffron", "sage", "sail", "sailboat", "sailing", "sailor", "saint", "sake", "salad", "salami", "salary", "sale", "salesman", "salmon", "salon", "saloon", "salsa", "salt", "salute", "samovar", "sampan", "sample", "samurai", "sanction", "sanctity", "sanctuary", "sand", "sandal", "sandbar", "sandpaper", "sandwich", "sanity", "sardine", "sari", "sarong", "sash", "satellite", "satin", "satire", "satisfaction", "sauce", "saucer", "sauerkraut", "sausage", "savage", "savannah", "saving", "savings", "savior", "saviour", "savory", "saw", "saxophone", "scaffold", "scale", "scallion", "scallops", "scalp", "scam", "scanner", "scarecrow", "scarf", "scarification", "scenario", "scene", "scenery", "scent", "schedule", "scheduling", "schema", "scheme", "schnitzel", "scholar", "scholarship", "school", "schoolhouse", "schooner", "science", "scientist", "scimitar", "scissors", "scooter", "scope", "score", "scorn", "scorpion", "scotch", "scout", "scow", "scrambled", "scrap", "scraper", "scratch", "screamer", "screen", "screening", "screenwriting", "screw", "screw-up", "screwdriver", "scrim", "scrip", "script", "scripture", "scrutiny", "sculpting", "sculptural", "sculpture", "sea", "seabass", "seafood", "seagull", "seal", "seaplane", "search", "seashore", "seaside", "season", "seat", "seaweed", "second", "secrecy", "secret", "secretariat", "secretary", "secretion", "section", "sectional", "sector", "security", "sediment", "seed", "seeder", "seeker", "seep", "segment", "seizure", "selection", "self", "self-confidence", "self-control", "self-esteem", "seller", "selling", "semantics", "semester", "semicircle", "semicolon", "semiconductor", "seminar", "senate", "senator", "sender", "senior", "sense", "sensibility", "sensitive", "sensitivity", "sensor", "sentence", "sentencing", "sentiment", "sepal", "separation", "septicaemia", "sequel", "sequence", "serial", "series", "sermon", "serum", "serval", "servant", "server", "service", "servitude", "sesame", "session", "set", "setback", "setting", "settlement", "settler", "severity", "sewer", "shack", "shackle", "shade", "shadow", "shadowbox", "shakedown", "shaker", "shallot", "shallows", "shame", "shampoo", "shanty", "shape", "share", "shareholder", "shark", "shaw", "shawl", "shear", "shearling", "sheath", "shed", "sheep", "sheet", "shelf", "shell", "shelter", "sherbet", "sherry", "shield", "shift", "shin", "shine", "shingle", "ship", "shipper", "shipping", "shipyard", "shirt", "shirtdress", "shoat", "shock", "shoe", "shoe-horn", "shoehorn", "shoelace", "shoemaker", "shoes", "shoestring", "shofar", "shoot", "shootdown", "shop", "shopper", "shopping", "shore", "shoreline", "short", "shortage", "shorts", "shortwave", "shot", "shoulder", "shout", "shovel", "show", "show-stopper", "shower", "shred", "shrimp", "shrine", "shutdown", "sibling", "sick", "sickness", "side", "sideboard", "sideburns", "sidecar", "sidestream", "sidewalk", "siding", "siege", "sigh", "sight", "sightseeing", "sign", "signal", "signature", "signet", "significance", "signify", "signup", "silence", "silica", "silicon", "silk", "silkworm", "sill", "silly", "silo", "silver", "similarity", "simple", "simplicity", "simplification", "simvastatin", "sin", "singer", "singing", "singular", "sink", "sinuosity", "sip", "sir", "sister", "sister-in-law", "sitar", "site", "situation", "size", "skate", "skating", "skean", "skeleton", "ski", "skiing", "skill", "skin", "skirt", "skull", "skullcap", "skullduggery", "skunk", "sky", "skylight", "skyline", "skyscraper", "skywalk", "slang", "slapstick", "slash", "slate", "slaw", "sled", "sledge", "sleep", "sleepiness", "sleeping", "sleet", "sleuth", "slice", "slide", "slider", "slime", "slip", "slipper", "slippers", "slope", "slot", "sloth", "slump", "smell", "smelting", "smile", "smith", "smock", "smog", "smoke", "smoking", "smolt", "smuggling", "snack", "snail", "snake", "snakebite", "snap", "snarl", "sneaker", "sneakers", "sneeze", "sniffle", "snob", "snorer", "snow", "snowboarding", "snowflake", "snowman", "snowmobiling", "snowplow", "snowstorm", "snowsuit", "snuck", "snug", "snuggle", "soap", "soccer", "socialism", "socialist", "society", "sociology", "sock", "socks", "soda", "sofa", "softball", "softdrink", "softening", "software", "soil", "soldier", "sole", "solicitation", "solicitor", "solidarity", "solidity", "soliloquy", "solitaire", "solution", "solvency", "sombrero", "somebody", "someone", "someplace", "somersault", "something", "somewhere", "son", "sonar", "sonata", "song", "songbird", "sonnet", "soot", "sophomore", "soprano", "sorbet", "sorghum", "sorrel", "sorrow", "sort", "soul", "soulmate", "sound", "soundness", "soup", "source", "sourwood", "sousaphone", "south", "southeast", "souvenir", "sovereignty", "sow", "soy", "soybean", "space", "spacing", "spaghetti", "span", "spandex", "sparerib", "spark", "sparrow", "spasm", "spat", "spatula", "spawn", "speaker", "speakerphone", "speaking", "spear", "spec", "special", "specialist", "specialty", "species", "specification", "spectacle", "spectacles", "spectrograph", "spectrum", "speculation", "speech", "speed", "speedboat", "spell", "spelling", "spelt", "spending", "sphere", "sphynx", "spice", "spider", "spiderling", "spike", "spill", "spinach", "spine", "spiral", "spirit", "spiritual", "spirituality", "spit", "spite", "spleen", "splendor", "split", "spokesman", "spokeswoman", "sponge", "sponsor", "sponsorship", "spool", "spoon", "spork", "sport", "sportsman", "spot", "spotlight", "spouse", "sprag", "sprat", "spray", "spread", "spreadsheet", "spree", "spring", "sprinkles", "sprinter", "sprout", "spruce", "spud", "spume", "spur", "spy", "spyglass", "square", "squash", "squatter", "squeegee", "squid", "squirrel", "stab", "stability", "stable", "stack", "stacking", "stadium", "staff", "stag", "stage", "stain", "stair", "staircase", "stake", "stalk", "stall", "stallion", "stamen", "stamina", "stamp", "stance", "stand", "standard", "standardisation", "standardization", "standing", "standoff", "standpoint", "star", "starboard", "start", "starter", "state", "statement", "statin", "station", "station-wagon", "statistic", "statistics", "statue", "status", "statute", "stay", "steak", "stealth", "steam", "steamroller", "steel", "steeple", "stem", "stench", "stencil", "step", "step-aunt", "step-brother", "step-daughter", "step-father", "step-grandfather", "step-grandmother", "step-mother", "step-sister", "step-son", "step-uncle", "stepdaughter", "stepmother", "stepping-stone", "stepson", "stereo", "stew", "steward", "stick", "sticker", "stiletto", "still", "stimulation", "stimulus", "sting", "stinger", "stir-fry", "stitch", "stitcher", "stock", "stock-in-trade", "stockings", "stole", "stomach", "stone", "stonework", "stool", "stop", "stopsign", "stopwatch", "storage", "store", "storey", "storm", "story", "story-telling", "storyboard", "stot", "stove", "strait", "strand", "stranger", "strap", "strategy", "straw", "strawberry", "strawman", "stream", "street", "streetcar", "strength", "stress", "stretch", "strife", "strike", "string", "strip", "stripe", "strobe", "structure", "strudel", "struggle", "stucco", "stud", "student", "studio", "study", "stuff", "stumbling", "stump", "stupidity", "sturgeon", "sty", "style", "styling", "stylus", "sub", "subcomponent", "subconscious", "subcontractor", "subexpression", "subgroup", "subject", "submarine", "submitter", "subprime", "subroutine", "subscription", "subsection", "subset", "subsidence", "subsidiary", "subsidy", "substance", "substitution", "subtitle", "suburb", "subway", "success", "succotash", "suede", "suet", "suffocation", "sugar", "suggestion", "suit", "suitcase", "suite", "sulfur", "sultan", "sum", "summary", "summer", "summit", "sun", "sunbeam", "sunbonnet", "sundae", "sunday", "sundial", "sunflower", "sunglasses", "sunlamp", "sunlight", "sunrise", "sunroom", "sunset", "sunshine", "superiority", "supermarket", "supernatural", "supervision", "supervisor", "supper", "supplement", "supplier", "supply", "support", "supporter", "suppression", "supreme", "surface", "surfboard", "surge", "surgeon", "surgery", "surname", "surplus", "surprise", "surround", "surroundings", "surrounds", "survey", "survival", "survivor", "sushi", "suspect", "suspenders", "suspension", "sustainment", "sustenance", "swamp", "swan", "swanling", "swath", "sweat", "sweater", "sweatshirt", "sweatshop", "sweatsuit", "sweets", "swell", "swim", "swimming", "swimsuit", "swine", "swing", "switch", "switchboard", "switching", "swivel", "sword", "swordfight", "swordfish", "sycamore", "symbol", "symmetry", "sympathy", "symptom", "syndicate", "syndrome", "synergy", "synod", "synonym", "synthesis", "syrup", "system", "t-shirt", "tab", "tabby", "tabernacle", "table", "tablecloth", "tablet", "tabletop", "tachometer", "tackle", "taco", "tactics", "tactile", "tadpole", "tag", "tail", "tailbud", "tailor", "tailspin", "take-out", "takeover", "tale", "talent", "talk", "talking", "tam-o'-shanter", "tamale", "tambour", "tambourine", "tan", "tandem", "tangerine", "tank", "tank-top", "tanker", "tankful", "tap", "tape", "tapioca", "target", "taro", "tarragon", "tart", "task", "tassel", "taste", "tatami", "tattler", "tattoo", "tavern", "tax", "taxi", "taxicab", "taxpayer", "tea", "teacher", "teaching", "team", "teammate", "teapot", "tear", "tech", "technician", "technique", "technologist", "technology", "tectonics", "teen", "teenager", "teepee", "telephone", "telescreen", "teletype", "television", "tell", "teller", "temp", "temper", "temperature", "temple", "tempo", "temporariness", "temporary", "temptation", "temptress", "tenant", "tendency", "tender", "tenement", "tenet", "tennis", "tenor", "tension", "tensor", "tent", "tentacle", "tenth", "tepee", "teriyaki", "term", "terminal", "termination", "terminology", "termite", "terrace", "terracotta", "terrapin", "terrarium", "territory", "test", "testament", "testimonial", "testimony", "testing", "text", "textbook", "textual", "texture", "thanks", "thaw", "theater", "theft", "theism", "theme", "theology", "theory", "therapist", "therapy", "thermals", "thermometer", "thermostat", "thesis", "thickness", "thief", "thigh", "thing", "thinking", "thirst", "thistle", "thong", "thongs", "thorn", "thought", "thousand", "thread", "threat", "threshold", "thrift", "thrill", "throne", "thrush", "thumb", "thump", "thunder", "thunderbolt", "thunderhead", "thunderstorm", "thyme", "tiara", "tic", "tick", "ticket", "tide", "tie", "tiger", "tights", "tile", "till", "tilt", "timbale", "timber", "time", "timeline", "timeout", "timer", "timetable", "timing", "timpani", "tin", "tinderbox", "tintype", "tip", "tire", "tissue", "titanium", "title", "toad", "toast", "toaster", "tobacco", "today", "toe", "toenail", "toffee", "tofu", "tog", "toga", "toilet", "tolerance", "tolerant", "toll", "tom-tom", "tomatillo", "tomato", "tomb", "tomography", "tomorrow", "ton", "tonality", "tone", "tongue", "tonic", "tonight", "tool", "toot", "tooth", "toothbrush", "toothpaste", "toothpick", "top", "top-hat", "topic", "topsail", "toque", "toreador", "tornado", "torso", "torte", "tortellini", "tortilla", "tortoise", "total", "tote", "touch", "tough-guy", "tour", "tourism", "tourist", "tournament", "tow-truck", "towel", "tower", "town", "townhouse", "township", "toy", "trace", "trachoma", "track", "tracking", "tracksuit", "tract", "tractor", "trade", "trader", "trading", "tradition", "traditionalism", "traffic", "trafficker", "tragedy", "trail", "trailer", "trailpatrol", "train", "trainer", "training", "trait", "tram", "trance", "transaction", "transcript", "transfer", "transformation", "transit", "transition", "translation", "transmission", "transom", "transparency", "transplantation", "transport", "transportation", "trap", "trapdoor", "trapezium", "trapezoid", "trash", "travel", "traveler", "tray", "treasure", "treasury", "treat", "treatment", "treaty", "tree", "trek", "trellis", "tremor", "trench", "trend", "triad", "trial", "triangle", "tribe", "tributary", "trick", "trigger", "trigonometry", "trillion", "trim", "trinket", "trip", "tripod", "tritone", "triumph", "trolley", "troop", "trooper", "trophy", "trouble", "trousers", "trout", "trove", "trowel", "truck", "trumpet", "trunk", "trust", "trustee", "truth", "try", "tsunami", "tub", "tuba", "tube", "tuber", "tug", "tugboat", "tuition", "tulip", "tumbler", "tummy", "tuna", "tune", "tune-up", "tunic", "tunnel", "turban", "turf", "turkey", "turmeric", "turn", "turning", "turnip", "turnover", "turnstile", "turret", "turtle", "tusk", "tussle", "tutu", "tuxedo", "tweet", "tweezers", "twig", "twilight", "twine", "twins", "twist", "twister", "twitter", "type", "typeface", "typewriter", "typhoon", "ukulele", "ultimatum", "umbrella", "unblinking", "uncertainty", "uncle", "underclothes", "underestimate", "underground", "underneath", "underpants", "underpass", "undershirt", "understanding", "understatement", "undertaker", "underwear", "underweight", "underwire", "underwriting", "unemployment", "unibody", "uniform", "uniformity", "union", "unique", "unit", "unity", "universe", "university", "update", "upgrade", "uplift", "upper", "upstairs", "upward", "urge", "urgency", "urn", "usage", "use", "user", "usher", "usual", "utensil", "utilisation", "utility", "utilization", "vacation", "vaccine", "vacuum", "vagrant", "valance", "valentine", "validate", "validity", "valley", "valuable", "value", "vampire", "van", "vanadyl", "vane", "vanilla", "vanity", "variability", "variable", "variant", "variation", "variety", "vascular", "vase", "vault", "vaulting", "veal", "vector", "vegetable", "vegetarian", "vegetarianism", "vegetation", "vehicle", "veil", "vein", "veldt", "vellum", "velocity", "velodrome", "velvet", "vendor", "veneer", "vengeance", "venison", "venom", "venti", "venture", "venue", "veranda", "verb", "verdict", "verification", "vermicelli", "vernacular", "verse", "version", "vertigo", "verve", "vessel", "vest", "vestment", "vet", "veteran", "veterinarian", "veto", "viability", "vibraphone", "vibration", "vibrissae", "vice", "vicinity", "victim", "victory", "video", "view", "viewer", "vignette", "villa", "village", "vine", "vinegar", "vineyard", "vintage", "vintner", "vinyl", "viola", "violation", "violence", "violet", "violin", "virtue", "virus", "visa", "viscose", "vise", "vision", "visit", "visitor", "visor", "vista", "visual", "vitality", "vitamin", "vitro", "vivo", "vogue", "voice", "void", "vol", "volatility", "volcano", "volleyball", "volume", "volunteer", "volunteering", "vote", "voter", "voting", "voyage", "vulture", "wafer", "waffle", "wage", "wagon", "waist", "waistband", "wait", "waiter", "waiting", "waitress", "waiver", "wake", "walk", "walker", "walking", "walkway", "wall", "wallaby", "wallet", "walnut", "walrus", "wampum", "wannabe", "want", "war", "warden", "wardrobe", "warfare", "warlock", "warlord", "warm-up", "warming", "warmth", "warning", "warrant", "warren", "warrior", "wasabi", "wash", "washbasin", "washcloth", "washer", "washtub", "wasp", "waste", "wastebasket", "wasting", "watch", "watcher", "watchmaker", "water", "waterbed", "watercress", "waterfall", "waterfront", "watermelon", "waterskiing", "waterspout", "waterwheel", "wave", "waveform", "wax", "way", "weakness", "wealth", "weapon", "wear", "weasel", "weather", "web", "webinar", "webmail", "webpage", "website", "wedding", "wedge", "weeder", "weedkiller", "week", "weekend", "weekender", "weight", "weird", "welcome", "welfare", "well", "well-being", "west", "western", "wet-bar", "wetland", "wetsuit", "whack", "whale", "wharf", "wheat", "wheel", "whelp", "whey", "whip", "whirlpool", "whirlwind", "whisker", "whisper", "whistle", "whole", "wholesale", "wholesaler", "whorl", "wick", "widget", "widow", "width", "wife", "wifi", "wild", "wildebeest", "wilderness", "wildlife", "will", "willingness", "willow", "win", "wind", "wind-chime", "windage", "window", "windscreen", "windshield", "winery", "wing", "wingman", "wingtip", "wink", "winner", "winter", "wire", "wiretap", "wiring", "wisdom", "wiseguy", "wish", "wisteria", "wit", "witch", "witch-hunt", "withdrawal", "witness", "wok", "wolf", "woman", "wombat", "wonder", "wont", "wood", "woodchuck", "woodland", "woodshed", "woodwind", "wool", "woolens", "word", "wording", "work", "workbench", "worker", "workforce", "workhorse", "working", "workout", "workplace", "workshop", "world", "worm", "worry", "worship", "worshiper", "worth", "wound", "wrap", "wraparound", "wrapper", "wrapping", "wreck", "wrecker", "wren", "wrench", "wrestler", "wriggler", "wrinkle", "wrist", "writer", "writing", "wrong", "xylophone", "yacht", "yahoo", "yak", "yam", "yang", "yard", "yarmulke", "yarn", "yawl", "year", "yeast", "yellowjacket", "yesterday", "yew", "yin", "yoga", "yogurt", "yoke", "yolk", "young", "youngster", "yourself", "youth", "yoyo", "yurt", "zampone", "zebra", "zebrafish", "zen", "zephyr", "zero", "ziggurat", "zinc", "zipper", "zither", "zombie", "zone", "zoo", "zoologist", "zoology", "zoot-suit", "zucchini"];
var Ta = ["a", "abaft", "aboard", "about", "above", "absent", "across", "afore", "after", "against", "along", "alongside", "amid", "amidst", "among", "amongst", "an", "anenst", "anti", "apropos", "apud", "around", "as", "aside", "astride", "at", "athwart", "atop", "barring", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "circa", "concerning", "considering", "despite", "down", "during", "except", "excepting", "excluding", "failing", "following", "for", "forenenst", "from", "given", "in", "including", "inside", "into", "lest", "like", "mid", "midst", "minus", "modulo", "near", "next", "notwithstanding", "of", "off", "on", "onto", "opposite", "out", "outside", "over", "pace", "past", "per", "plus", "pro", "qua", "regarding", "round", "sans", "save", "since", "than", "the", "through", "throughout", "till", "times", "to", "toward", "towards", "under", "underneath", "unlike", "until", "unto", "up", "upon", "versus", "via", "vice", "with", "within", "without", "worth"];
var La = ["abandon", "abase", "abate", "abbreviate", "abdicate", "abduct", "abet", "abhor", "abide", "abjure", "abnegate", "abolish", "abominate", "abort", "abound", "abrade", "abridge", "abrogate", "abscond", "abseil", "absent", "absolve", "absorb", "abstain", "abstract", "abut", "accede", "accelerate", "accent", "accentuate", "accept", "access", "accessorise", "accessorize", "acclaim", "acclimate", "acclimatise", "acclimatize", "accommodate", "accompany", "accomplish", "accord", "accost", "account", "accouter", "accoutre", "accredit", "accrue", "acculturate", "accumulate", "accuse", "accustom", "ace", "ache", "achieve", "acidify", "acknowledge", "acquaint", "acquiesce", "acquire", "acquit", "act", "action", "activate", "actualise", "actualize", "actuate", "adapt", "add", "addle", "address", "adduce", "adhere", "adjoin", "adjourn", "adjudge", "adjudicate", "adjure", "adjust", "administer", "admire", "admit", "admonish", "adopt", "adore", "adorn", "adsorb", "adulterate", "adumbrate", "advance", "advantage", "advertise", "advise", "advocate", "aerate", "affect", "affiliate", "affirm", "affix", "afflict", "afford", "afforest", "affront", "age", "agglomerate", "aggravate", "aggregate", "agitate", "agonise", "agonize", "agree", "aid", "ail", "aim", "air", "airbrush", "airdrop", "airfreight", "airlift", "alarm", "alert", "alienate", "alight", "align", "allay", "allege", "alleviate", "allocate", "allot", "allow", "alloy", "allude", "ally", "alphabetise", "alphabetize", "alter", "alternate", "amalgamate", "amass", "amaze", "amble", "ambush", "ameliorate", "amend", "amortise", "amortize", "amount", "amplify", "amputate", "amuse", "anaesthetise", "anaesthetize", "analyse", "anchor", "anesthetize", "anger", "angle", "anglicise", "anglicize", "animate", "anneal", "annex", "annihilate", "annotate", "announce", "annoy", "annul", "anodise", "anodize", "anoint", "anonymise", "anonymize", "answer", "antagonise", "antagonize", "antedate", "anthologise", "anthologize", "anticipate", "ape", "apologise", "apologize", "apostrophise", "apostrophize", "appal", "appall", "appeal", "appear", "appease", "append", "appertain", "applaud", "apply", "appoint", "apportion", "appraise", "appreciate", "apprehend", "apprentice", "apprise", "approach", "appropriate", "approve", "approximate", "aquaplane", "arbitrate", "arc", "arch", "archive", "argue", "arise", "arm", "arraign", "arrange", "array", "arrest", "arrive", "arrogate", "art", "articulate", "ascend", "ascertain", "ascribe", "ask", "asphyxiate", "aspirate", "aspire", "assail", "assassinate", "assault", "assay", "assemble", "assent", "assert", "assess", "assign", "assimilate", "assist", "associate", "assuage", "assume", "assure", "asterisk", "astonish", "astound", "atomise", "atomize", "atone", "atrophy", "attach", "attack", "attain", "attempt", "attend", "attenuate", "attest", "attract", "attribute", "auction", "audit", "audition", "augment", "augur", "authenticate", "author", "authorise", "authorize", "autograph", "automate", "autosave", "autowind", "avail", "avenge", "aver", "average", "avert", "avoid", "avow", "await", "awake", "awaken", "award", "awe", "ax", "axe", "baa", "babble", "baby", "babysit", "back", "backcomb", "backdate", "backfill", "backfire", "backlight", "backpack", "backspace", "backtrack", "badger", "baffle", "bag", "bail", "bait", "bake", "balance", "bale", "ball", "balloon", "ballot", "balls", "bamboozle", "ban", "band", "bandage", "bandy", "banish", "bank", "bankroll", "bankrupt", "banter", "baptise", "baptize", "bar", "barbecue", "bare", "bargain", "barge", "bark", "barnstorm", "barrack", "barrel", "barricade", "barter", "base", "bash", "bask", "baste", "bat", "batch", "bath", "bathe", "batten", "batter", "battle", "baulk", "bawl", "bay", "bayonet", "be", "beach", "beam", "bean", "bear", "beard", "beat", "beatbox", "beatboxer", "beatify", "beautify", "beckon", "become", "bedazzle", "bedeck", "bedevil", "beef", "beep", "beetle", "befall", "befit", "befog", "befriend", "beg", "beget", "beggar", "begin", "begrudge", "beguile", "behave", "behold", "behoove", "behove", "belabor", "belabour", "belay", "belch", "belie", "believe", "belittle", "bellow", "belly", "bellyache", "belong", "belt", "bemoan", "bemuse", "benchmark", "bend", "benefit", "bequeath", "berate", "bereave", "berth", "beseech", "beset", "besiege", "besmirch", "bespatter", "bespeak", "best", "bestir", "bestow", "bestride", "bet", "betake", "betide", "betoken", "betray", "better", "bewail", "beware", "bewilder", "bewitch", "bias", "bicker", "bicycle", "bid", "bide", "biff", "bifurcate", "big", "bike", "bilk", "bill", "billet", "billow", "bin", "bind", "binge", "biodegrade", "bird", "bisect", "bite", "bitmap", "bivouac", "bivvy", "blab", "blabber", "blacken", "blackmail", "blag", "blame", "blanch", "blank", "blanket", "blare", "blaspheme", "blast", "blather", "blaze", "blazon", "bleach", "bleat", "bleed", "bleep", "blemish", "blench", "blend", "bless", "blight", "blind", "blindfold", "blindfolded", "blindside", "blink", "bliss", "blister", "blitz", "bloat", "block", "blockade", "blog", "blood", "bloom", "bloop", "blossom", "blot", "blow", "blub", "blubber", "bludge", "bludgeon", "bluff", "blunder", "blunt", "blur", "blurt", "blush", "bluster", "board", "boast", "bob", "bobble", "bode", "bodge", "bog", "boggle", "boil", "bolster", "bolt", "bomb", "bombard", "bond", "bonk", "boo", "boogie", "book", "bookmark", "boom", "boomerang", "boost", "boot", "bootleg", "bop", "border", "bore", "born", "borrow", "boss", "botch", "bother", "bottle", "bottleful", "bottom", "bounce", "bound", "bow", "bowdlerise", "bowdlerize", "bowl", "bowlful", "box", "boycott", "braai", "brace", "braces", "bracket", "brag", "braid", "brain", "brainstorm", "brainwash", "braise", "brake", "branch", "brand", "brandish", "brave", "brawl", "bray", "brazen", "breach", "break", "breakfast", "breathalyse", "breathalyze", "breathe", "breed", "breeze", "brew", "bribe", "brick", "bridge", "bridle", "brief", "brighten", "brim", "bring", "bristle", "broach", "broadcast", "broaden", "broadside", "broil", "broker", "brood", "brook", "browbeat", "browse", "bruise", "bruit", "brush", "brutalise", "brutalize", "bubble", "buck", "bucket", "bucketful", "buckle", "bud", "buddy", "budge", "budget", "buff", "buffer", "buffet", "bug", "build", "bulge", "bulk", "bulldoze", "bully", "bum", "bumble", "bump", "bunch", "bundle", "bungle", "bunk", "bunker", "bunt", "buoy", "burble", "burden", "burgeon", "burglarize", "burgle", "burn", "burnish", "burp", "burrow", "burst", "bury", "bus", "bushwhack", "busk", "bust", "bustle", "busy", "butcher", "butt", "butter", "button", "buttonhole", "buttress", "buy", "buzz", "buzzing", "bypass", "cable", "cache", "cackle", "caddie", "cadge", "cage", "cajole", "cake", "calcify", "calculate", "calibrate", "call", "calm", "calve", "camouflage", "camp", "campaign", "can", "canalise", "canalize", "cancel", "cane", "cannibalise", "cannibalize", "cannon", "cannulate", "canoe", "canonise", "canonize", "canst", "cant", "canter", "canvass", "cap", "caper", "capitalise", "capitalize", "capitulate", "capsize", "captain", "caption", "captivate", "capture", "caramelise", "caramelize", "carbonise", "carbonize", "carburise", "carburize", "card", "care", "careen", "career", "caress", "caricature", "carjack", "carol", "carom", "carouse", "carp", "carpet", "carpool", "carry", "cart", "cartwheel", "carve", "cascade", "case", "cash", "cashier", "casserole", "cast", "castigate", "catalog", "catalogue", "catalyse", "catalyze", "catapult", "catch", "categorise", "categorize", "cater", "caterwaul", "catnap", "caucus", "caulk", "cause", "cauterise", "cauterize", "caution", "cave", "cavil", "cavort", "caw", "cc", "cease", "cede", "celebrate", "cement", "censor", "censure", "centralise", "centralize", "centre", "certificate", "certify", "chafe", "chaff", "chain", "chair", "chalk", "challenge", "champ", "champion", "chance", "change", "channel", "chant", "chaperon", "chaperone", "char", "characterise", "characterize", "charbroil", "charge", "chargesheet", "chargrill", "charm", "chart", "charter", "chase", "chasten", "chastise", "chat", "chatter", "chauffeur", "cheapen", "cheat", "cheater", "check", "checkmate", "cheek", "cheep", "cheer", "cherish", "chew", "chicken", "chide", "chill", "chillax", "chime", "chip", "chirp", "chisel", "chivvy", "chlorinate", "choke", "chomp", "choose", "chop", "choreograph", "chortle", "chorus", "christen", "chromakey", "chronicle", "chuck", "chuckle", "chunder", "chunter", "churn", "cinch", "circle", "circulate", "circumnavigate", "circumscribe", "circumvent", "cite", "civilise", "civilize", "clack", "claim", "clam", "clamber", "clamor", "clamour", "clamp", "clang", "clank", "clap", "clarify", "clash", "clasp", "class", "classify", "clatter", "claw", "clean", "cleanse", "clear", "cleave", "clench", "clerk", "click", "climb", "clinch", "cling", "clink", "clinking", "clip", "cloak", "clobber", "clock", "clog", "clone", "clonk", "close", "closet", "clot", "clothe", "cloud", "clout", "clown", "club", "cluck", "clue", "clump", "clunk", "cluster", "clutch", "clutter", "coach", "coagulate", "coalesce", "coarsen", "coast", "coat", "coax", "cobble", "cocoon", "coddle", "code", "codify", "coerce", "coexist", "cogitate", "cohabit", "cohere", "coil", "coin", "coincide", "collaborate", "collapse", "collar", "collate", "collect", "collectivise", "collectivize", "collide", "colligate", "collocate", "collude", "colonise", "colonize", "colorize", "colour", "comb", "combat", "combine", "combust", "come", "comfort", "command", "commandeer", "commemorate", "commence", "commend", "comment", "commentate", "commercialise", "commercialize", "commingle", "commiserate", "commission", "commit", "commune", "communicate", "commute", "compact", "compare", "compartmentalise", "compartmentalize", "compel", "compensate", "compete", "compile", "complain", "complement", "complete", "complicate", "compliment", "comply", "comport", "compose", "compost", "compound", "comprehend", "compress", "comprise", "compromise", "compute", "computerise", "computerize", "con", "conceal", "concede", "conceive", "concentrate", "conceptualise", "conceptualize", "concern", "concertina", "conciliate", "conclude", "concoct", "concrete", "concur", "concuss", "condemn", "condense", "condescend", "condition", "condone", "conduct", "cone", "confer", "confess", "confide", "configure", "confine", "confirm", "confiscate", "conflate", "conflict", "conform", "confound", "confront", "confuse", "confute", "congeal", "congratulate", "congregate", "conjecture", "conjoin", "conjugate", "conjure", "conk", "connect", "connive", "connote", "conquer", "conscientise", "conscientize", "conscript", "consecrate", "consent", "conserve", "consider", "consign", "consist", "console", "consolidate", "consort", "conspire", "constitute", "constrain", "constrict", "construct", "construe", "consult", "consume", "consummate", "contact", "contain", "contaminate", "contemplate", "contend", "content", "contest", "contextualise", "contextualize", "continue", "contort", "contract", "contradict", "contraindicate", "contrast", "contravene", "contribute", "contrive", "control", "controvert", "convalesce", "convene", "converge", "converse", "convert", "convey", "convict", "convince", "convoke", "convulse", "coo", "cook", "cool", "coop", "cooperate", "coordinate", "cop", "cope", "coppice", "copy", "copyright", "cordon", "core", "cork", "corkscrew", "corner", "corral", "correct", "correlate", "correspond", "corrode", "corrupt", "coruscate", "cosh", "cosset", "cost", "cosy", "cotton", "couch", "cough", "counsel", "count", "countenance", "counter", "counteract", "counterbalance", "counterfeit", "countermand", "counterpoint", "countersign", "couple", "courier", "course", "court", "covenant", "cover", "covet", "cow", "cower", "cozy", "crackle", "cradle", "craft", "cram", "cramp", "crane", "crank", "crate", "crave", "crawl", "crayon", "creak", "creaking", "cream", "crease", "create", "credential", "credit", "creep", "cremate", "creolise", "creolize", "creosote", "crest", "crew", "crib", "crick", "criminalise", "criminalize", "crimp", "cringe", "crinkle", "cripple", "crisp", "criticise", "criticize", "critique", "croak", "crochet", "crook", "croon", "crop", "cross", "crouch", "crow", "crowd", "crown", "cruise", "crumble", "crumple", "crunch", "crusade", "crush", "cry", "crystallise", "crystallize", "cube", "cuddle", "cudgel", "cue", "cuff", "cull", "culminate", "cultivate", "culture", "cup", "curate", "curb", "curdle", "cure", "curl", "curry", "curse", "curtail", "curtain", "curtsy", "curve", "cushion", "cuss", "customise", "customize", "cut", "cwtch", "cycle", "dab", "dabble", "dally", "dam", "damage", "damp", "dampen", "dance", "dandle", "dangle", "dare", "darken", "darn", "dart", "dash", "date", "daub", "daunt", "dawdle", "dawn", "daydream", "dazzle", "deactivate", "deaden", "deadhead", "deafen", "deal", "debar", "debase", "debate", "debilitate", "debit", "debrief", "debug", "debunk", "debut", "decamp", "decant", "decay", "deceive", "decelerate", "decentralise", "decentralize", "decide", "decimalise", "decimalize", "decimate", "decipher", "deck", "declaim", "declare", "declassify", "decline", "declutter", "decode", "decommission", "decompose", "decompress", "deconsecrate", "deconstruct", "decontaminate", "decontrol", "decorate", "decouple", "decoy", "decrease", "decree", "decriminalise", "decriminalize", "decry", "decrypt", "dedicate", "deduce", "deduct", "deejay", "deem", "deepen", "deface", "defame", "default", "defeat", "defect", "defend", "defer", "defile", "define", "deflate", "deflect", "defog", "defoliate", "deforest", "deform", "defrag", "defragment", "defraud", "defray", "defrock", "defrost", "defuse", "defy", "degenerate", "deglaze", "degrade", "degrease", "dehumanise", "dehumanize", "dehydrate", "deify", "deign", "delay", "delegate", "delete", "deliberate", "delight", "delimit", "delineate", "deliquesce", "deliver", "delouse", "delude", "deluge", "delve", "demand", "demarcate", "demean", "demerge", "demilitarise", "demilitarize", "demineralise", "demineralize", "demist", "demo", "demob", "demobilise", "demobilize", "democratise", "democratize", "demolish", "demonise", "demonize", "demonstrate", "demoralise", "demoralize", "demote", "demotivate", "demur", "demystify", "denationalise", "denationalize", "denigrate", "denitrify", "denominate", "denote", "denounce", "dent", "denude", "deny", "depart", "depend", "depersonalise", "depersonalize", "depict", "deplane", "deplete", "deplore", "deploy", "depopulate", "deport", "depose", "deposit", "deprave", "deprecate", "depreciate", "depress", "depressurise", "depressurize", "deprive", "depute", "deputise", "deputize", "deracinate", "derail", "dereference", "deregulate", "deride", "derive", "derogate", "descale", "descend", "describe", "descry", "desecrate", "desegregate", "deselect", "desensitise", "desensitize", "desert", "deserve", "design", "designate", "desire", "desist", "deskill", "desolate", "despair", "despise", "despoil", "destabilise", "destabilize", "destock", "destroy", "detach", "detail", "detain", "detect", "deter", "deteriorate", "determine", "detest", "dethrone", "detonate", "detour", "detoxify", "detract", "detrain", "devalue", "devastate", "develop", "deviate", "devise", "devoice", "devolve", "devote", "devour", "diagnose", "dial", "dice", "dicker", "dictate", "die", "diet", "differ", "differentiate", "diffract", "diffuse", "dig", "digest", "digitalise", "digitalize", "digitise", "digitize", "dignify", "digress", "dilate", "dilute", "diluted", "dim", "diminish", "dimple", "dine", "ding", "dip", "diphthongise", "diphthongize", "direct", "dirty", "dis", "disable", "disabuse", "disadvantage", "disaffiliate", "disafforest", "disagree", "disallow", "disambiguate", "disappear", "disappoint", "disapprove", "disarm", "disarrange", "disassemble", "disassociate", "disavow", "disband", "disbar", "disbelieve", "disburse", "discard", "discern", "discharge", "discipline", "disclaim", "disclose", "discolor", "discolour", "discomfit", "discomfort", "discompose", "disconcert", "disconnect", "discontinue", "discount", "discourage", "discourse", "discover", "discredit", "discriminate", "discuss", "disdain", "disembark", "disembowel", "disenfranchise", "disengage", "disentangle", "disestablish", "disgorge", "disgrace", "disguise", "disgust", "dish", "dishearten", "dishonor", "dishonour", "disillusion", "disincentivise", "disincentivize", "disinfect", "disinherit", "disinhibit", "disintegrate", "disinter", "disinvest", "dislike", "dislocate", "dislodge", "dismantle", "dismay", "dismember", "dismiss", "dismount", "disobey", "disorient", "disorientate", "disown", "disparage", "dispatch", "dispel", "dispense", "disperse", "displace", "display", "displease", "disport", "dispose", "dispossess", "disprove", "dispute", "disqualify", "disregard", "disrespect", "disrobe", "disrupt", "dissect", "dissemble", "disseminate", "dissent", "dissimulate", "dissipate", "dissociate", "dissolve", "dissuade", "distance", "distend", "distil", "distill", "distinguish", "distort", "distract", "distress", "distribute", "distrust", "disturb", "disunite", "ditch", "dither", "dive", "diverge", "diversify", "divert", "divest", "divide", "divine", "divorce", "divulge", "divvy", "do", "dob", "dock", "doctor", "document", "dodge", "doff", "dog", "dole", "doll", "dollarise", "dollarize", "domesticate", "dominate", "don", "donate", "doodle", "doom", "doorstep", "dop", "dope", "dose", "doss", "dot", "dote", "double", "doubt", "douse", "dovetail", "down", "downchange", "downgrade", "downlink", "download", "downplay", "downshift", "downsize", "dowse", "doze", "draft", "drag", "dragoon", "drain", "dramatise", "dramatize", "drape", "draught", "draw", "drawl", "dread", "dream", "dredge", "drench", "dress", "dribble", "drift", "drill", "drink", "drip", "drive", "drivel", "drizzle", "drone", "drool", "droop", "drop", "drown", "drowse", "drug", "drum", "dry", "dub", "duck", "duckie", "ducks", "duel", "duff", "dull", "dumb", "dumbfound", "dump", "dunk", "dunt", "dupe", "duplicate", "dust", "dwarf", "dwell", "dwindle", "dye", "dynamite", "earmark", "earn", "earth", "ease", "eat", "eavesdrop", "ebb", "echo", "eclipse", "economise", "economize", "eddy", "edge", "edify", "edit", "editorialise", "editorialize", "educate", "efface", "effect", "effectuate", "egg", "eject", "eke", "elaborate", "elapse", "elbow", "elect", "electrify", "electrocute", "electroplate", "elevate", "elicit", "elide", "eliminate", "elongate", "elope", "elucidate", "elude", "email", "emanate", "emancipate", "embalm", "embargo", "embark", "embarrass", "embed", "embellish", "embezzle", "embitter", "emblazon", "embody", "embolden", "emboss", "embrace", "embroider", "embroil", "emcee", "emend", "emerge", "emigrate", "emit", "emote", "empathise", "empathize", "emphasise", "emphasize", "employ", "empower", "empty", "emulate", "emulsify", "enable", "enact", "encamp", "encapsulate", "encase", "encash", "enchant", "encircle", "enclose", "encode", "encompass", "encounter", "encourage", "encroach", "encrypt", "encumber", "end", "endanger", "endear", "endeavor", "endeavour", "endorse", "endow", "endure", "energise", "energize", "enervate", "enfeeble", "enfold", "enforce", "enfranchise", "engage", "engender", "engineer", "engorge", "engrave", "engross", "engulf", "enhance", "enjoin", "enjoy", "enlarge", "enlighten", "enlist", "enliven", "enmesh", "ennoble", "enquire", "enrage", "enrapture", "enrich", "enrol", "enroll", "ensconce", "enshrine", "enshroud", "ensnare", "ensue", "ensure", "entail", "entangle", "enter", "entertain", "enthral", "enthrall", "enthrone", "enthuse", "entice", "entitle", "entomb", "entrance", "entrap", "entreat", "entrench", "entrust", "entwine", "enumerate", "enunciate", "envelop", "envisage", "envision", "envy", "epitomise", "epitomize", "equal", "equalise", "equalize", "equate", "equip", "equivocate", "eradicate", "erase", "erode", "err", "erupt", "escalate", "escape", "eschew", "espouse", "espy", "essay", "establish", "esteem", "estimate", "etch", "eulogise", "eulogize", "euthanise", "euthanize", "evacuate", "evade", "evaluate", "evangelise", "evangelize", "evaporate", "even", "eventuate", "evict", "evidence", "evince", "eviscerate", "evoke", "evolve", "exacerbate", "exact", "exaggerate", "exalt", "examine", "exasperate", "excavate", "exceed", "excel", "except", "excerpt", "exchange", "excise", "excite", "exclaim", "exclude", "excommunicate", "excoriate", "excrete", "exculpate", "excuse", "execute", "exemplify", "exempt", "exercise", "exert", "exeunt", "exfoliate", "exhale", "exhaust", "exhibit", "exhilarate", "exhort", "exhume", "exile", "exist", "exit", "exonerate", "exorcise", "exorcize", "expand", "expatiate", "expect", "expectorate", "expedite", "expel", "expend", "experience", "experiment", "expiate", "expire", "explain", "explicate", "explode", "exploit", "explore", "export", "expose", "expostulate", "expound", "express", "expropriate", "expunge", "expurgate", "extemporise", "extemporize", "extend", "exterminate", "externalise", "externalize", "extinguish", "extirpate", "extol", "extort", "extract", "extradite", "extrapolate", "extricate", "extrude", "exude", "exult", "eye", "eyeball", "eyeglasses", "fabricate", "face", "facilitate", "factor", "factorise", "factorize", "fade", "faff", "fail", "faint", "fake", "fall", "falsify", "falter", "familiarise", "familiarize", "fan", "fancy", "fantasise", "fantasize", "fare", "farewell", "farm", "farrow", "fascinate", "fashion", "fast", "fasten", "father", "fathom", "fatten", "fault", "favor", "favour", "fawn", "fax", "faze", "fear", "feast", "feather", "feature", "federate", "feed", "feel", "feign", "feint", "fell", "feminise", "feminize", "fence", "fend", "ferment", "ferret", "ferry", "fertilise", "fertilize", "fess", "fester", "festoon", "fetch", "fete", "fetter", "feud", "fib", "fictionalise", "fictionalize", "fiddle", "fidget", "field", "fight", "figure", "filch", "file", "filibuster", "fill", "fillet", "film", "filter", "finagle", "finalise", "finalize", "finance", "find", "fine", "finesse", "fingerprint", "finish", "fire", "firebomb", "firm", "fish", "fishtail", "fit", "fix", "fizz", "fizzle", "flag", "flagellate", "flail", "flake", "flame", "flank", "flap", "flare", "flash", "flat", "flatline", "flatten", "flatter", "flaunt", "flavour", "flay", "fleck", "flee", "fleece", "flesh", "flex", "flick", "flicker", "flight", "flinch", "fling", "flip", "flirt", "flit", "float", "flock", "flog", "flood", "floodlight", "floor", "flop", "floss", "flounce", "flounder", "flour", "flourish", "flout", "flow", "flower", "flub", "fluctuate", "fluff", "flummox", "flunk", "flush", "fluster", "flutter", "fly", "foal", "foam", "fob", "focalise", "focalize", "focus", "fog", "foil", "foist", "fold", "follow", "foment", "fool", "foot", "forage", "forbear", "forbid", "force", "ford", "forearm", "forecast", "foreclose", "foregather", "foreground", "foresee", "foreshadow", "foreshorten", "forestall", "foretell", "forewarn", "forfeit", "forfend", "forgather", "forge", "forget", "forgive", "forgo", "fork", "form", "formalise", "formalize", "format", "formulate", "forsake", "forswear", "fortify", "forward", "forwards", "fossick", "fossilise", "fossilize", "foster", "foul", "found", "founder", "fox", "fracture", "fragment", "frame", "franchise", "frank", "fraternise", "fraternize", "fray", "freak", "free", "freelance", "freeload", "freestyle", "freewheel", "freeze", "freight", "frequent", "freshen", "fret", "frighten", "fringe", "frisk", "fritter", "frizz", "frizzle", "frogmarch", "frolic", "front", "frost", "froth", "frown", "fruit", "frustrate", "fry", "fudge", "fuel", "fulfil", "fulfill", "fulminate", "fumble", "fume", "fumigate", "function", "fund", "funk", "funnel", "furl", "furlough", "furnish", "furrow", "further", "fuse", "fuss", "gab", "gabble", "gad", "gag", "gain", "gainsay", "gall", "gallivant", "gallop", "galumph", "galvanise", "galvanize", "gamble", "gambol", "gang", "gape", "garage", "garden", "gargle", "garland", "garner", "garnish", "garrison", "garrote", "garrotte", "gas", "gash", "gasp", "gatecrash", "gather", "gauge", "gawk", "gawp", "gaze", "gazump", "gazunder", "gear", "gee", "gel", "geld", "gen", "generalise", "generalize", "generate", "gentrify", "genuflect", "germinate", "gerrymander", "gestate", "gesticulate", "gesture", "get", "ghost", "ghostwrite", "gibber", "gift", "giggle", "gild", "ginger", "gird", "girdle", "give", "gladden", "glamorise", "glamorize", "glance", "glare", "glass", "glaze", "gleam", "glean", "glide", "glimmer", "glimmering", "glimpse", "glint", "glisten", "glister", "glitter", "gloat", "globalise", "globalize", "glom", "glorify", "glory", "gloss", "glow", "glower", "glue", "glug", "glut", "gnash", "gnaw", "go", "goad", "gobble", "goggle", "goldbrick", "goof", "google", "goose", "gore", "gorge", "gossip", "gouge", "govern", "grab", "grace", "grade", "graduate", "graft", "grant", "grapple", "grasp", "grass", "grate", "gratify", "gravitate", "graze", "grease", "green", "greet", "grey", "grieve", "grill", "grimace", "grin", "grind", "grip", "gripe", "grit", "grizzle", "groan", "grok", "groom", "grouch", "ground", "group", "grouse", "grout", "grovel", "grow", "growl", "grub", "grudge", "grumble", "grunt", "guarantee", "guard", "guess", "guest", "guffaw", "guide", "guillotine", "guilt", "gulp", "gum", "gun", "gurgle", "gurn", "gush", "gussy", "gust", "gut", "gutter", "guzzle", "gybe", "gyrate", "hack", "haemorrhage", "haggle", "hail", "hallmark", "halloo", "hallucinate", "halt", "halve", "ham", "hammer", "hamper", "hamstring", "hand", "handcuff", "handicap", "handle", "hang", "hanker", "happen", "harangue", "harass", "harbor", "harbour", "harden", "hare", "hark", "harm", "harmonise", "harmonize", "harness", "harp", "harpoon", "harrow", "harrumph", "harry", "harvest", "hash", "hassle", "hasten", "hatch", "hate", "haul", "haunt", "have", "haw", "hawk", "hazard", "haze", "head", "headbutt", "headhunt", "headline", "heal", "heap", "hear", "hearken", "hearten", "heat", "heave", "heckle", "hector", "hedge", "heed", "heel", "heft", "heighten", "heist", "help", "hem", "hemorrhage", "herald", "herd", "hesitate", "hew", "hex", "hibernate", "hiccough", "hiccup", "hide", "hie", "highball", "highlight", "hightail", "hijack", "hike", "hinder", "hinge", "hint", "hire", "hiss", "hit", "hitch", "hitchhike", "hive", "hoard", "hoax", "hobble", "hobnob", "hock", "hog", "hoick", "hoist", "hold", "hole", "holiday", "holler", "hollow", "holster", "home", "homeschool", "homestead", "hone", "honeymoon", "honk", "honour", "hoodwink", "hoof", "hook", "hoon", "hoot", "hoover", "hop", "hope", "horn", "horrify", "horse", "horsewhip", "hose", "hosepipe", "hospitalise", "hospitalize", "host", "hot", "hotfoot", "hound", "house", "hover", "howl", "huddle", "huff", "hug", "hull", "hum", "humanise", "humanize", "humble", "humiliate", "humour", "hunch", "hunger", "hunker", "hunt", "hurdle", "hurl", "hurry", "hurt", "hurtle", "husband", "hush", "husk", "hustle", "hybridise", "hybridize", "hydrate", "hydroplane", "hype", "hyperventilate", "hyphenate", "hypnotise", "hypnotize", "hypothesise", "hypothesize", "ice", "iconify", "idealise", "idealize", "ideate", "identify", "idle", "idolise", "idolize", "ignite", "ignore", "illuminate", "illumine", "illustrate", "imagine", "imagineer", "imbibe", "imbue", "imitate", "immerse", "immigrate", "immobilise", "immobilize", "immolate", "immortalise", "immortalize", "immunise", "immunize", "immure", "impact", "impair", "impale", "impanel", "impart", "impeach", "impede", "impel", "imperil", "impersonate", "impinge", "implant", "implement", "implicate", "implode", "implore", "imply", "import", "importune", "impose", "impound", "impoverish", "impress", "imprint", "imprison", "improve", "improvise", "impugn", "inactivate", "inaugurate", "incapacitate", "incarcerate", "incarnate", "incense", "incentivise", "incentivize", "inch", "incinerate", "incise", "incite", "incline", "include", "incommode", "inconvenience", "incorporate", "increase", "incriminate", "incubate", "inculcate", "incur", "indemnify", "indent", "index", "indicate", "indict", "individualise", "individualize", "individuate", "indoctrinate", "induce", "induct", "indulge", "industrialise", "industrialize", "infantilise", "infantilize", "infect", "infer", "infest", "infill", "infiltrate", "inflame", "inflate", "inflect", "inflict", "influence", "inform", "infringe", "infuriate", "infuse", "ingest", "ingratiate", "inhabit", "inhale", "inhere", "inherit", "inhibit", "initial", "initialise", "initialize", "initiate", "inject", "injure", "ink", "inlay", "innovate", "inoculate", "input", "inscribe", "insert", "inset", "insinuate", "insist", "inspect", "inspire", "install", "instance", "instigate", "instil", "instill", "institute", "institutionalise", "institutionalize", "instruct", "insulate", "insult", "insure", "integrate", "intend", "intensify", "inter", "interact", "intercede", "intercept", "interchange", "interconnect", "intercut", "interest", "interface", "interfere", "interject", "interlace", "interleave", "interlink", "interlock", "intermarry", "intermesh", "intermingle", "intermix", "intern", "internalise", "internalize", "internationalise", "internationalize", "interpenetrate", "interpolate", "interpose", "interpret", "interrelate", "interrogate", "interrupt", "intersect", "intersperse", "intertwine", "intervene", "interview", "interweave", "interwork", "intimate", "intimidate", "intone", "intoxicate", "intrigue", "introduce", "intrude", "intubate", "intuit", "inundate", "inure", "invade", "invalid", "invalidate", "inveigh", "inveigle", "invent", "inventory", "invert", "invest", "investigate", "invigilate", "invigorate", "invite", "invoice", "invoke", "involve", "ionise", "ionize", "irk", "iron", "irradiate", "irrigate", "irritate", "irrupt", "isolate", "issue", "italicise", "italicize", "itch", "itemise", "itemize", "iterate", "jab", "jabber", "jack", "jackknife", "jail", "jam", "jangle", "jar", "jaw", "jaywalk", "jazz", "jeer", "jell", "jeopardise", "jeopardize", "jest", "jet", "jettison", "jib", "jibe", "jiggle", "jilt", "jingle", "jink", "jinx", "jive", "jockey", "jog", "joggle", "join", "joint", "joke", "jol", "jolly", "jolt", "josh", "jostle", "jot", "journey", "joust", "judder", "judge", "juggle", "juice", "jumble", "jump", "junk", "justify", "jut", "juxtapose", "keel", "keelhaul", "keen", "keep", "ken", "key", "keyboard", "kibitz", "kick", "kid", "kindle", "kip", "kiss", "kit", "kite", "klap", "kludge", "knacker", "knead", "knee", "kneecap", "kneel", "knife", "knight", "knit", "knock", "knot", "know", "knuckle", "kowtow", "kvetch", "label", "labour", "lace", "lacerate", "lack", "lacquer", "ladder", "ladle", "lag", "lam", "lamb", "lambast", "lambaste", "lament", "lamp", "lampoon", "lance", "land", "lands", "landscape", "languish", "lap", "lapse", "lard", "large", "lark", "lash", "lasso", "last", "latch", "lather", "laud", "laugh", "launch", "launder", "lavish", "lay", "layer", "laze", "leach", "lead", "leaf", "leaflet", "leak", "lean", "leap", "leapfrog", "learn", "lease", "leash", "leave", "leaven", "lecture", "leer", "leg", "legalise", "legalize", "legislate", "legitimise", "legitimize", "lend", "lengthen", "lessen", "let", "letter", "letterbox", "level", "lever", "leverage", "levitate", "levy", "liaise", "libel", "liberalise", "liberalize", "liberate", "license", "lick", "lie", "lift", "ligate", "light", "lighten", "like", "liken", "limber", "lime", "limit", "limp", "line", "linger", "link", "lionise", "lionize", "liquefy", "liquidate", "liquidise", "liquidize", "lisp", "list", "listen", "litigate", "litter", "live", "liven", "load", "loads", "loaf", "loan", "loathe", "lob", "lobby", "lobotomise", "lobotomize", "localise", "localize", "locate", "lock", "lodge", "loft", "log", "loiter", "loll", "lollop", "long", "look", "looks", "loom", "loop", "loose", "loosen", "loot", "lop", "lope", "lord", "lose", "lounge", "lour", "louse", "love", "low", "lowball", "lower", "lubricate", "luck", "lug", "lull", "lumber", "lump", "lunch", "lunge", "lurch", "lure", "lurk", "luxuriate", "macerate", "machine", "madden", "magic", "magnetise", "magnetize", "magnify", "mail", "maim", "mainline", "mainstream", "maintain", "major", "make", "malfunction", "malign", "malinger", "maltreat", "man", "manacle", "manage", "mandate", "mangle", "manhandle", "manicure", "manifest", "manipulate", "manoeuvre", "mantle", "manufacture", "manure", "map", "mar", "march", "marginalise", "marginalize", "marinate", "mark", "market", "maroon", "marry", "marshal", "martyr", "marvel", "masculinise", "masculinize", "mash", "mask", "masquerade", "mass", "massacre", "massage", "master", "mastermind", "masticate", "match", "materialise", "materialize", "matriculate", "matter", "mature", "maul", "maunder", "max", "maximise", "maximize", "mean", "meander", "measure", "mechanise", "mechanize", "medal", "meddle", "mediate", "medicate", "meditate", "meet", "meld", "mellow", "melt", "memorialise", "memorialize", "memorise", "memorize", "menace", "mend", "mention", "meow", "mercerise", "mercerize", "merchandise", "merge", "merit", "mesh", "mesmerise", "mesmerize", "mess", "message", "metabolise", "metabolize", "metamorphose", "mete", "meter", "methinks", "mew", "mewl", "miaow", "microblog", "microchip", "micromanage", "microwave", "micturate", "migrate", "militarise", "militarize", "militate", "milk", "mill", "mime", "mimic", "mince", "mind", "mine", "mingle", "miniaturise", "miniaturize", "minimise", "minimize", "minister", "minor", "mint", "minute", "mirror", "misapply", "misappropriate", "misbehave", "miscalculate", "miscast", "misconceive", "misconstrue", "miscount", "misdiagnose", "misdial", "misdirect", "misfile", "misfire", "misgovern", "mishandle", "mishear", "mishit", "misinform", "misinterpret", "misjudge", "miskey", "mislay", "mislead", "mismanage", "mismatch", "misname", "misplace", "misplay", "mispronounce", "misquote", "misread", "misreport", "misrepresent", "miss", "mission", "misspell", "misspend", "mist", "mistake", "mistime", "mistreat", "mistrust", "misunderstand", "misuse", "mitigate", "mitre", "mix", "moan", "mob", "mobilise", "mobilize", "mock", "mod", "model", "moderate", "modernise", "modernize", "modify", "modulate", "moisten", "moisturise", "moisturize", "mold", "molder", "mollify", "mollycoddle", "molt", "monitor", "monopolise", "monopolize", "moo", "mooch", "moon", "moonlight", "moonwalk", "moor", "moot", "mop", "mope", "moralise", "moralize", "morph", "mortar", "mortgage", "mortify", "mosey", "mosh", "mothball", "mother", "motion", "motivate", "motor", "mould", "moulder", "moult", "mount", "mourn", "mouse", "mouth", "move", "movies", "mow", "muck", "muddle", "muddy", "muffle", "mug", "mulch", "mull", "multicast", "multiply", "multitask", "mumble", "mumbling", "mummify", "munch", "murmur", "murmuring", "murmurings", "muscle", "muse", "mushroom", "muss", "muster", "mutate", "mute", "mutilate", "mutiny", "mutter", "muzzle", "mystify", "nab", "nag", "nail", "name", "namecheck", "nap", "narrate", "narrow", "narrowcast", "nasalise", "nasalize", "nationalise", "nationalize", "natter", "naturalise", "naturalize", "nauseate", "navigate", "near", "nearer", "nearest", "neaten", "necessitate", "neck", "necklace", "need", "needle", "negate", "negative", "neglect", "negotiate", "neigh", "nerve", "nest", "nestle", "net", "nettle", "network", "neuter", "neutralise", "neutralize", "nibble", "nick", "nickname", "nitrify", "nix", "nobble", "nod", "nominalize", "nominate", "norm", "normalise", "normalize", "nose", "nosedive", "nosh", "notarise", "notarize", "notch", "note", "notice", "notify", "nourish", "nudge", "nuke", "nullify", "numb", "number", "nurse", "nurture", "nut", "nuzzle", "obey", "obfuscate", "object", "objectify", "oblige", "obliterate", "obscure", "observe", "obsess", "obstruct", "obtain", "obtrude", "obviate", "occasion", "occlude", "occupy", "occur", "off", "offend", "offer", "officiate", "offload", "offset", "offshore", "ogle", "oil", "okay", "omit", "ooze", "open", "operate", "opine", "oppose", "oppress", "opt", "optimise", "optimize", "option", "orbit", "orchestrate", "ordain", "order", "organise", "organize", "orient", "orientate", "originate", "ornament", "orphan", "oscillate", "ossify", "ostracise", "ostracize", "oust", "out", "outbid", "outclass", "outdistance", "outdo", "outface", "outfit", "outflank", "outfox", "outgrow", "outgun", "outlast", "outlaw", "outline", "outlive", "outmaneuver", "outmanoeuvre", "outnumber", "outpace", "outperform", "outplay", "outpoint", "output", "outrage", "outrank", "outrun", "outsell", "outshine", "outsmart", "outsource", "outstay", "outstrip", "outvote", "outweigh", "outwit", "overachieve", "overact", "overawe", "overbalance", "overbook", "overburden", "overcharge", "overcome", "overcompensate", "overcook", "overdevelop", "overdo", "overdose", "overdraw", "overdub", "overeat", "overemphasize", "overestimate", "overexpose", "overextend", "overfeed", "overflow", "overfly", "overgeneralise", "overgeneralize", "overgraze", "overhang", "overhaul", "overhear", "overheat", "overindulge", "overlap", "overlay", "overlie", "overload", "overlook", "overpay", "overplay", "overpower", "overprint", "overproduce", "overrate", "overreach", "overreact", "override", "overrule", "overrun", "oversee", "oversell", "overshadow", "overshoot", "oversimplify", "oversleep", "overspend", "overstate", "overstay", "overstep", "overstock", "overstretch", "overtake", "overtax", "overthrow", "overtrain", "overturn", "overuse", "overvalue", "overwhelm", "overwinter", "overwork", "overwrite", "owe", "own", "oxidise", "oxidize", "oxygenate", "pace", "pacify", "pack", "package", "packetise", "packetize", "pad", "paddle", "padlock", "page", "paginate", "pailful", "pain", "paint", "pair", "pal", "palatalise", "palatalize", "pale", "pall", "palliate", "palm", "palpate", "palpitate", "pamper", "pan", "pander", "panel", "panhandle", "panic", "pant", "paper", "parachute", "parade", "parallel", "paralyse", "paralyze", "paraphrase", "parboil", "parcel", "parch", "pardon", "pare", "park", "parlay", "parley", "parody", "parole", "parrot", "parry", "parse", "part", "partake", "participate", "particularise", "particularize", "partition", "partner", "party", "pass", "passivise", "passivize", "paste", "pasteurise", "pasteurize", "pasture", "pat", "patch", "patent", "patrol", "patronise", "patronize", "patter", "pattern", "pause", "pave", "paw", "pawn", "pay", "peak", "peal", "pedal", "peddle", "pedestrianise", "pedestrianize", "peek", "peel", "peep", "peer", "peg", "pelt", "pen", "penalise", "penalize", "pencil", "pension", "people", "pep", "pepper", "perambulate", "perceive", "perch", "percolate", "perfect", "perforate", "perform", "perfume", "perish", "perjure", "perk", "perm", "permeate", "permit", "perpetrate", "perpetuate", "perplex", "persecute", "persevere", "persist", "personalise", "personalize", "personify", "perspire", "persuade", "pertain", "perturb", "peruse", "pervade", "pervert", "pester", "pet", "peter", "petition", "petrify", "phase", "philosophise", "philosophize", "phone", "photocopy", "photograph", "photoshop", "photosynthesise", "photosynthesize", "phrase", "pick", "picket", "pickle", "picnic", "picture", "picturise", "picturize", "piddle", "piece", "pierce", "pig", "pigeonhole", "piggyback", "pike", "pile", "pilfer", "pill", "pillage", "pillory", "pillow", "pilot", "pin", "pinch", "pine", "ping", "pinion", "pink", "pinpoint", "pioneer", "pip", "pipe", "pique", "pirate", "pirouette", "pit", "pitch", "pity", "pivot", "pixelate", "pixellate", "placate", "place", "plagiarise", "plagiarize", "plague", "plait", "plan", "plane", "plant", "plaster", "plasticise", "plasticize", "plate", "plateau", "play", "plead", "please", "pledge", "plight", "plod", "plonk", "plop", "plot", "plough", "pluck", "plug", "plumb", "plummet", "plump", "plunder", "plunge", "plunk", "pluralise", "pluralize", "ply", "poach", "pocket", "point", "poise", "poison", "poke", "polarise", "polarize", "pole", "poleax", "poleaxe", "police", "polish", "politicise", "politicize", "poll", "pollard", "pollinate", "pollute", "polymerise", "polymerize", "ponce", "ponder", "pong", "pontificate", "pony", "pooh", "pool", "pootle", "pop", "popularise", "popularize", "populate", "pore", "port", "portend", "portion", "portray", "pose", "posit", "position", "possess", "posset", "post", "postmark", "postpone", "postulate", "posture", "pot", "potter", "pounce", "pound", "pour", "pout", "powder", "power", "practice", "practise", "praise", "praises", "prance", "prang", "prate", "prattle", "pray", "preach", "precede", "precipitate", "precis", "preclude", "predate", "predecease", "predetermine", "predicate", "predict", "predispose", "predominate", "preen", "preface", "prefer", "prefigure", "prefix", "preheat", "prejudge", "prejudice", "preload", "premaster", "premiere", "preoccupy", "prep", "prepare", "prepone", "preregister", "presage", "prescind", "prescribe", "preselect", "presell", "present", "preserve", "preset", "preside", "press", "pressure", "pressurise", "pressurize", "presume", "presuppose", "pretend", "pretest", "prettify", "prevail", "prevaricate", "prevent", "preview", "prey", "price", "prickle", "pride", "prime", "primp", "print", "prioritise", "prioritize", "prise", "privatise", "privatize", "privilege", "prize", "probate", "probe", "proceed", "process", "proclaim", "procrastinate", "procreate", "proctor", "procure", "prod", "produce", "profane", "profess", "professionalise", "professionalize", "proffer", "profile", "profit", "program", "programme", "progress", "prohibit", "project", "proliferate", "prolong", "promenade", "promise", "promote", "prompt", "promulgate", "pronounce", "proof", "proofread", "prop", "propagandise", "propagandize", "propagate", "propel", "prophesy", "propitiate", "propose", "proposition", "propound", "proscribe", "prosecute", "proselytise", "proselytize", "prospect", "prosper", "prostrate", "protect", "protest", "protrude", "prove", "provide", "provision", "provoke", "prowl", "prune", "pry", "psych", "psychoanalyse", "publicise", "publicize", "publish", "pucker", "puff", "pull", "pullulate", "pulp", "pulsate", "pulse", "pulverise", "pulverize", "pummel", "pump", "pun", "punch", "punctuate", "puncture", "punish", "punt", "pupate", "purchase", "purge", "purify", "purl", "purloin", "purport", "purr", "purse", "pursue", "purvey", "push", "pussyfoot", "put", "putrefy", "putt", "putter", "puzzle", "quack", "quadruple", "quaff", "quail", "quake", "qualify", "quantify", "quarantine", "quarrel", "quarry", "quarter", "quarterback", "quash", "quaver", "quell", "quench", "query", "quest", "question", "queue", "quibble", "quicken", "quiet", "quieten", "quintuple", "quip", "quirk", "quit", "quiver", "quiz", "quote", "quoth", "rabbit", "race", "rack", "radiate", "radicalise", "radicalize", "radio", "raffle", "rag", "rage", "raid", "rail", "railroad", "rain", "raise", "rake", "rally", "ram", "ramble", "ramp", "rampage", "randomise", "randomize", "range", "rank", "rankle", "ransack", "ransom", "rant", "rap", "rappel", "rasp", "rasterise", "rasterize", "rat", "ratchet", "rate", "ratify", "ration", "rationalise", "rationalize", "rattle", "ravage", "rave", "ravel", "ravish", "raze", "razz", "reach", "reacquaint", "react", "reactivate", "read", "readdress", "readies", "readjust", "readmit", "ready", "reaffirm", "realign", "realise", "realize", "reallocate", "ream", "reanimate", "reap", "reappear", "reapply", "reappoint", "reappraise", "rear", "rearm", "rearrange", "reason", "reassemble", "reassert", "reassess", "reassign", "reassure", "reawaken", "rebel", "reboot", "reborn", "rebound", "rebrand", "rebuff", "rebuild", "rebuke", "rebut", "recall", "recant", "recap", "recapitulate", "recapture", "recast", "recede", "receive", "recess", "recharge", "reciprocate", "recite", "reckon", "reclaim", "reclassify", "recline", "recognise", "recognize", "recoil", "recollect", "recommence", "recommend", "recompense", "reconcile", "recondition", "reconfigure", "reconfirm", "reconnect", "reconnoitre", "reconquer", "reconsider", "reconstitute", "reconstruct", "reconvene", "record", "recount", "recoup", "recover", "recreate", "recrudesce", "recruit", "rectify", "recuperate", "recur", "recycle", "redact", "redden", "redecorate", "redeem", "redefine", "redeploy", "redesign", "redevelop", "redial", "redirect", "rediscover", "redistribute", "redistrict", "redo", "redouble", "redound", "redraft", "redraw", "redress", "reduce", "reduplicate", "reef", "reek", "reel", "ref", "refer", "referee", "reference", "refill", "refinance", "refine", "refit", "reflate", "reflect", "refloat", "refocus", "reform", "reformat", "reformulate", "refract", "refrain", "refresh", "refrigerate", "refuel", "refund", "refurbish", "refuse", "refute", "regain", "regale", "regard", "regenerate", "register", "regress", "regret", "regroup", "regularise", "regularize", "regulate", "regurgitate", "rehabilitate", "rehash", "rehear", "rehearse", "reheat", "rehome", "rehouse", "reign", "reignite", "reimburse", "rein", "reincarnate", "reinforce", "reinstate", "reinterpret", "reintroduce", "reinvent", "reinvest", "reinvigorate", "reissue", "reiterate", "reject", "rejig", "rejigger", "rejoice", "rejoin", "rejuvenate", "rekindle", "relapse", "relate", "relaunch", "relax", "relay", "release", "relegate", "relent", "relieve", "relinquish", "relish", "relive", "reload", "relocate", "rely", "remain", "remainder", "remake", "remand", "remap", "remark", "remarry", "remaster", "remediate", "remedy", "remember", "remind", "reminisce", "remit", "remix", "remodel", "remonstrate", "remortgage", "remould", "remount", "remove", "remunerate", "rename", "rend", "render", "rendezvous", "renege", "renew", "renounce", "renovate", "rent", "reoccur", "reoffend", "reopen", "reorder", "reorganise", "reorganize", "reorient", "repackage", "repair", "repatriate", "repay", "repeal", "repeat", "repel", "repent", "rephrase", "replace", "replay", "replenish", "replicate", "reply", "report", "repose", "repossess", "represent", "repress", "reprieve", "reprimand", "reprint", "reproach", "reprocess", "reproduce", "reprove", "repudiate", "repulse", "repurpose", "request", "require", "requisition", "requite", "rerun", "reschedule", "rescind", "rescue", "research", "researches", "resect", "resell", "resemble", "resent", "reserve", "reset", "resettle", "reshape", "reshuffle", "reside", "resign", "resist", "resit", "resize", "reskill", "resolve", "resonate", "resort", "resound", "resource", "respect", "respire", "respond", "respray", "rest", "restart", "restate", "restock", "restore", "restrain", "restrict", "restring", "restructure", "result", "resume", "resupply", "resurface", "resurrect", "resuscitate", "retail", "retain", "retake", "retaliate", "retch", "retell", "retest", "rethink", "retire", "retool", "retort", "retouch", "retrace", "retract", "retrain", "retreat", "retrench", "retrieve", "retrofit", "retry", "return", "reunify", "reunite", "reuse", "rev", "revalue", "revamp", "reveal", "revel", "revenge", "reverberate", "revere", "reverse", "revert", "review", "revile", "revise", "revisit", "revitalise", "revitalize", "revive", "revivify", "revoke", "revolt", "revolutionise", "revolutionize", "revolve", "reward", "rewind", "rewire", "reword", "rework", "rewrite", "rhapsodise", "rhapsodize", "rhyme", "rib", "rick", "ricochet", "rid", "riddle", "ride", "ridge", "ridicule", "riffle", "rifle", "rig", "right", "rightsize", "rile", "rim", "ring", "rinse", "riot", "rip", "ripen", "riposte", "ripple", "rise", "risk", "ritualise", "ritualize", "rival", "rivet", "roam", "roar", "roast", "rob", "robe", "rock", "rocket", "roger", "roll", "romance", "romanticise", "romanticize", "romp", "roof", "room", "roost", "root", "rope", "rosin", "roster", "rot", "rotate", "rouge", "rough", "roughen", "roughhouse", "round", "rouse", "roust", "rout", "route", "rove", "row", "rub", "rubberneck", "rubbish", "ruck", "rue", "ruffle", "ruin", "ruins", "rule", "rumble", "ruminate", "rummage", "rumor", "rumour", "rumple", "run", "rupture", "rush", "rust", "rustle", "sabotage", "sack", "sacrifice", "sadden", "saddle", "safeguard", "sag", "sail", "salaam", "salivate", "sally", "salt", "salute", "salvage", "salve", "sample", "sanctify", "sanction", "sand", "sandbag", "sandblast", "sandpaper", "sandwich", "sanitise", "sanitize", "sap", "sashay", "sass", "sate", "satiate", "satirise", "satirize", "satisfy", "saturate", "saunter", "savage", "save", "savor", "savour", "saw", "say", "scald", "scale", "scallop", "scalp", "scamper", "scan", "scandalise", "scandalize", "scapegoat", "scar", "scare", "scarf", "scarify", "scarper", "scatter", "scattering", "scavenge", "scent", "schedule", "schematise", "schematize", "scheme", "schlep", "schlepp", "schmooze", "school", "schtup", "schuss", "scoff", "scold", "scoop", "scoot", "scope", "scorch", "score", "scorn", "scotch", "scour", "scourge", "scout", "scowl", "scrabble", "scram", "scramble", "scrap", "scrape", "scratch", "scrawl", "scream", "screech", "screen", "screw", "scribble", "scrimp", "script", "scroll", "scrounge", "scrub", "scrummage", "scrunch", "scruple", "scrutinise", "scrutinize", "scud", "scuff", "scuffle", "scull", "sculpt", "scupper", "scurry", "scuttle", "scythe", "seal", "sealift", "sear", "search", "season", "seat", "secede", "seclude", "second", "secrete", "section", "secularise", "secularize", "secure", "sedate", "see", "seed", "seek", "seep", "seethe", "segment", "segregate", "segue", "seize", "select", "sell", "sellotape", "semaphore", "send", "sensationalise", "sensationalize", "sense", "sensitise", "sensitize", "sentence", "sentimentalise", "sentimentalize", "separate", "sequence", "sequester", "sequestrate", "serenade", "serialise", "serialize", "sermonise", "sermonize", "serve", "service", "set", "settle", "sever", "sew", "shack", "shackle", "shade", "shadow", "shaft", "shake", "shalt", "sham", "shamble", "shame", "shampoo", "shanghai", "shape", "share", "sharpen", "shatter", "shave", "shear", "sheathe", "shed", "sheer", "shell", "shellac", "shelter", "shelve", "shepherd", "shield", "shift", "shimmer", "shimmy", "shin", "shine", "shinny", "ship", "shipwreck", "shirk", "shiver", "shock", "shoe", "shoehorn", "shoo", "shoot", "shop", "shoplift", "shore", "short", "shorten", "shortlist", "shoulder", "shout", "shove", "shovel", "show", "showboat", "showcase", "shower", "shred", "shriek", "shrill", "shrink", "shrivel", "shroom", "shroud", "shrug", "shuck", "shudder", "shuffle", "shun", "shunt", "shush", "shut", "shuttle", "shy", "sic", "sick", "sicken", "side", "sideline", "sidestep", "sideswipe", "sidetrack", "sidle", "sieve", "sift", "sigh", "sight", "sightsee", "sign", "signal", "signify", "signpost", "silence", "silhouette", "silt", "silver", "simmer", "simper", "simplify", "simulate", "simulcast", "sin", "sing", "singe", "single", "sink", "sip", "siphon", "sire", "sit", "site", "situate", "size", "sizzle", "skate", "skateboard", "skedaddle", "sketch", "skew", "skewer", "ski", "skid", "skim", "skimp", "skin", "skip", "skipper", "skirmish", "skirt", "skitter", "skive", "skivvy", "skulk", "sky", "skyjack", "skyrocket", "slack", "slacken", "slake", "slam", "slander", "slap", "slash", "slate", "slather", "sledge", "sleek", "sleep", "sleepwalk", "sleet", "slew", "slice", "slick", "slide", "slight", "slim", "sling", "slink", "slip", "slit", "slither", "slob", "slobber", "slog", "slop", "slope", "slosh", "slot", "slouch", "slough", "slow", "slug", "sluice", "slum", "slumber", "slump", "slur", "slurp", "smart", "smarten", "smash", "smear", "smell", "smelt", "smile", "smirk", "smite", "smoke", "smooch", "smoodge", "smooth", "smother", "smoulder", "smudge", "smuggle", "snack", "snaffle", "snag", "snaggle", "snake", "snap", "snare", "snarf", "snarl", "sneak", "sneer", "sneeze", "snicker", "sniff", "sniffle", "snip", "snipe", "snitch", "snivel", "snooker", "snoop", "snooper", "snooze", "snore", "snorkel", "snort", "snow", "snowball", "snowplough", "snowplow", "snub", "snuffle", "snuffling", "snuggle", "soak", "soap", "soar", "sober", "socialise", "socialize", "sock", "sod", "soften", "soil", "sojourn", "solace", "solder", "soldier", "sole", "solemnise", "solemnize", "solicit", "solidify", "soliloquize", "solve", "somersault", "soothe", "sorrow", "sort", "sough", "sound", "soundproof", "soup", "sour", "source", "sow", "space", "span", "spangle", "spar", "spare", "spark", "sparkle", "spatter", "spattering", "spawn", "spay", "speak", "spear", "spearhead", "spec", "specialise", "specialize", "specify", "spectacles", "spectate", "speculate", "speed", "spell", "spellcheck", "spend", "spew", "spice", "spiff", "spike", "spill", "spin", "spiral", "spirit", "spit", "spite", "splash", "splatter", "splay", "splice", "splinter", "split", "splosh", "splurge", "splutter", "spoil", "sponge", "sponsor", "spoof", "spook", "spool", "spoon", "sport", "sports", "spot", "spotlight", "spout", "sprain", "sprawl", "spray", "spread", "spring", "springboard", "sprinkle", "sprint", "spritz", "sprout", "spruce", "spur", "spurn", "spurt", "sputter", "spy", "squabble", "squall", "squander", "square", "squash", "squat", "squawk", "squeak", "squeal", "squeeze", "squelch", "squint", "squirm", "squirrel", "squirt", "squish", "stab", "stabilise", "stabilize", "stable", "stables", "stack", "staff", "stage", "stagger", "stagnate", "stain", "stake", "stalk", "stall", "stammer", "stamp", "stampede", "stanch", "stand", "standardise", "standardize", "staple", "star", "starch", "stare", "start", "startle", "starve", "stash", "state", "statement", "station", "staunch", "stave", "stay", "steady", "steal", "steam", "steamroller", "steel", "steep", "steepen", "steer", "stem", "stencil", "step", "stereotype", "sterilise", "sterilize", "stew", "stick", "stickybeak", "stiff", "stiffen", "stifle", "stigmatise", "stigmatize", "still", "stimulate", "sting", "stinger", "stink", "stint", "stipple", "stipulate", "stir", "stitch", "stock", "stockpile", "stoke", "stomach", "stomp", "stone", "stonewall", "stoop", "stop", "stopper", "store", "storm", "storyboard", "stow", "straddle", "strafe", "straggle", "straighten", "strain", "strand", "strangle", "strap", "stratify", "stravage", "stravaig", "stray", "streak", "stream", "streamline", "strengthen", "stress", "stretch", "stretcher", "strew", "stride", "strike", "string", "strip", "strive", "stroll", "structure", "struggle", "strum", "strut", "stub", "stud", "study", "stuff", "stultify", "stumble", "stump", "stun", "stunt", "stupefy", "stutter", "style", "stymie", "sub", "subcontract", "subdivide", "subdue", "subedit", "subject", "sublet", "sublimate", "submerge", "submit", "subordinate", "suborn", "subpoena", "subscribe", "subside", "subsidise", "subsidize", "subsist", "substantiate", "substitute", "subsume", "subtend", "subtitle", "subtract", "subvert", "succeed", "succor", "succour", "succumb", "suckle", "suction", "sue", "suffer", "suffice", "suffocate", "suffuse", "sugar", "suggest", "suit", "sulk", "sulks", "sully", "sum", "summarise", "summarize", "summon", "summons", "sun", "sunbathe", "sunder", "sunset", "sup", "superimpose", "superintend", "superpose", "supersede", "supersize", "supersized", "supervene", "supervise", "supplant", "supplement", "supply", "support", "suppose", "suppress", "suppurate", "surcharge", "surf", "surface", "surge", "surmise", "surmount", "surpass", "surprise", "surrender", "surround", "survey", "survive", "suspect", "suspend", "suspenders", "suss", "sustain", "suture", "swab", "swaddle", "swagger", "swamp", "swan", "swank", "swap", "swarm", "swat", "swath", "swathe", "sway", "swear", "sweat", "sweep", "sweeps", "sweeten", "swell", "swelter", "swerve", "swig", "swill", "swim", "swindle", "swing", "swipe", "swirl", "swish", "switch", "swivel", "swoon", "swoop", "swoosh", "swot", "symbolise", "symbolize", "sympathise", "sympathize", "symptomize", "synchronise", "synchronize", "syndicate", "synthesise", "synthesize", "syringe", "systematise", "systematize", "tab", "table", "tabulate", "tack", "tackle", "tag", "tail", "tailgate", "tailor", "taint", "take", "talk", "tally", "tame", "tamp", "tamper", "tan", "tangle", "tango", "tank", "tankful", "tantalise", "tantalize", "tap", "tape", "taper", "tar", "target", "tarmac", "tarnish", "tarry", "tart", "task", "taste", "tattle", "tattoo", "taunt", "tauten", "tax", "taxi", "taxicab", "teach", "team", "tear", "tease", "tee", "teem", "teeter", "teethe", "telecast", "telecommute", "teleconference", "telegraph", "telemeter", "teleoperate", "telephone", "teleport", "telescope", "televise", "telex", "tell", "telnet", "temp", "temper", "temporise", "temporize", "tempt", "tenant", "tend", "tender", "tenderise", "tenderize", "tense", "tension", "tergiversate", "term", "terminate", "terraform", "terrify", "terrorise", "terrorize", "test", "testify", "tether", "text", "thank", "thatch", "thaw", "theorise", "theorize", "thicken", "thin", "think", "thirst", "thrash", "thread", "threaten", "thresh", "thrill", "thrive", "throb", "throbbing", "throng", "throttle", "throw", "thud", "thumb", "thump", "thunder", "thwack", "thwart", "tick", "ticket", "tickle", "tide", "tidy", "tie", "tighten", "tile", "till", "tilt", "time", "timetable", "tinge", "tingle", "tingling", "tinker", "tinkling", "tint", "tip", "tippex", "tipple", "tiptoe", "tire", "titillate", "titivate", "title", "titrate", "titter", "toady", "toast", "toboggan", "toddle", "toe", "tog", "toggle", "toil", "tolerate", "toll", "tone", "tongue", "tonify", "tool", "toot", "tootle", "top", "topple", "torch", "torment", "torpedo", "toss", "tot", "total", "tote", "totter", "touch", "tough", "toughen", "tour", "tousle", "tout", "tow", "towel", "tower", "toy", "trace", "track", "trade", "traduce", "traffic", "trail", "train", "traipse", "trammel", "trample", "trampoline", "tranquilize", "tranquillize", "transact", "transcend", "transcribe", "transfer", "transfigure", "transfix", "transform", "transfuse", "transgress", "transit", "translate", "transliterate", "transmit", "transmogrify", "transmute", "transpire", "transplant", "transport", "transpose", "trap", "trash", "traumatise", "traumatize", "travel", "traverse", "trawl", "tread", "treasure", "treat", "treble", "trek", "tremble", "trembling", "trepan", "trespass", "trial", "trick", "trickle", "trifle", "trigger", "trill", "trim", "trip", "triple", "triumph", "trivialise", "trivialize", "troll", "tromp", "troop", "trot", "trouble", "troubleshoot", "trounce", "trouser", "truant", "truck", "trudge", "trump", "trumpet", "truncate", "trundle", "truss", "trust", "try", "tuck", "tug", "tugboat", "tumble", "tune", "tunnel", "turbocharge", "turf", "turn", "tussle", "tut", "tutor", "twang", "tweak", "tweet", "twiddle", "twig", "twin", "twine", "twinkle", "twirl", "twist", "twitch", "twitter", "twittering", "type", "typecast", "typeset", "typify", "tyrannise", "tyrannize", "ulcerate", "ululate", "ump", "umpire", "unbalance", "unban", "unbend", "unblock", "unbuckle", "unburden", "unbutton", "uncoil", "uncork", "uncouple", "uncover", "uncurl", "undelete", "underachieve", "underbid", "undercharge", "undercook", "undercut", "underestimate", "underestimation", "underexpose", "undergo", "underlie", "underline", "undermine", "underpay", "underperform", "underpin", "underplay", "underrate", "underscore", "undersell", "undershoot", "underspend", "understand", "understate", "understudy", "undertake", "undervalue", "underwrite", "undo", "undock", "undress", "undulate", "unearth", "unfasten", "unfold", "unfreeze", "unfurl", "unhand", "unhinge", "unhitch", "unhook", "unify", "uninstall", "unionise", "unionize", "unite", "unlace", "unlearn", "unleash", "unload", "unlock", "unloose", "unloosen", "unmask", "unnerve", "unpack", "unpick", "unplug", "unravel", "unroll", "unsaddle", "unscramble", "unscrew", "unseat", "unsettle", "unsubscribe", "untangle", "untie", "unveil", "unwind", "unwrap", "unzip", "up", "upbraid", "upchange", "upchuck", "update", "upend", "upgrade", "uphold", "upholster", "uplift", "upload", "uproot", "upsell", "upset", "upshift", "upskill", "upstage", "urge", "use", "usher", "usurp", "utilise", "utilize", "utter", "vacate", "vacation", "vaccinate", "vacillate", "vacuum", "valet", "validate", "value", "vamoose", "vandalise", "vandalize", "vanish", "vanquish", "vaporise", "vaporize", "varnish", "vary", "vault", "veer", "veg", "vegetate", "veil", "vend", "veneer", "venerate", "vent", "ventilate", "venture", "verbalise", "verbalize", "verge", "verify", "versify", "vest", "vet", "veto", "vex", "vibrate", "victimise", "victimize", "vide", "video", "videotape", "vie", "view", "viewing", "vilify", "vindicate", "violate", "visit", "visualise", "visualize", "vitiate", "vitrify", "vocalize", "voice", "void", "volley", "volumise", "volumize", "volunteer", "vote", "vouch", "vouchsafe", "vow", "voyage", "vulgarise", "vulgarize", "waddle", "wade", "waffle", "waft", "wag", "wage", "wager", "waggle", "wail", "wait", "waive", "wake", "wakeboard", "waken", "walk", "wall", "wallop", "wallow", "wallpaper", "waltz", "wander", "wane", "wangle", "want", "warble", "ward", "warm", "warn", "warp", "warrant", "wash", "wassail", "waste", "watch", "water", "waterproof", "waterski", "wave", "waver", "wax", "waylay", "weaken", "wean", "weaponise", "weaponize", "wear", "weary", "weasel", "weather", "weatherise", "weatherize", "weave", "wed", "wedge", "weekend", "weep", "weigh", "weight", "weird", "welch", "welcome", "weld", "well", "welly", "wend", "westernise", "westernize", "wet", "whack", "wheedle", "wheel", "wheeze", "whelp", "whet", "whiff", "while", "whilst", "whimper", "whine", "whinge", "whinny", "whip", "whirl", "whirr", "whirring", "whisk", "whisper", "whispering", "whistle", "whiten", "whitewash", "whittle", "whoop", "whoosh", "whup", "wick", "widen", "widow", "wield", "wig", "wiggle", "wildcat", "will", "wilt", "wimp", "win", "wince", "winch", "wind", "winds", "windsurf", "wine", "wing", "wink", "winkle", "winnow", "winter", "wipe", "wire", "wiretap", "wise", "wisecrack", "wish", "withdraw", "wither", "withhold", "withstand", "witness", "witter", "wobble", "wolf", "wonder", "woo", "woof", "word", "work", "worm", "worry", "worsen", "worship", "worst", "wound", "wow", "wowee", "wrangle", "wrap", "wreak", "wreathe", "wreck", "wrench", "wrest", "wrestle", "wriggle", "wring", "wrinkle", "writ", "write", "writhe", "wrong", "wrought", "xerox", "yack", "yak", "yap", "yaw", "yawn", "yearn", "yell", "yellow", "yelp", "yield", "yodel", "yoke", "yomp", "yowl", "yuppify", "zap", "zero", "zigzag", "zing", "zip", "zone", "zoom"];
var $a = { adjective: Ca, adverb: Sa, conjunction: Aa, interjection: Ba, noun: Ma, preposition: Ta, verb: La };
var Ra = $a;
var er = { airline: n, animal: w, app: B, cell_phone: T, color: R, commerce: G, company: I, database: q, date: Y, finance: ne, hacker: ue, internet: ge, location: Pe, lorem: xe, metadata: Ne, music: Je, person: la, phone_number: da, science: ma, team: ga, vehicle: wa, word: Ra };
var ul = er;

// node_modules/@faker-js/faker/dist/esm/chunk-GTEBSQTL.mjs
var Ce2 = Object.defineProperty;
var hr = (i4, e2, r3) => e2 in i4 ? Ce2(i4, e2, { enumerable: true, configurable: true, writable: true, value: r3 }) : i4[e2] = r3;
var f2 = (i4, e2, r3) => (hr(i4, typeof e2 != "symbol" ? e2 + "" : e2, r3), r3);
var u2 = class extends Error {
};
function Ne2(i4) {
  let e2 = Object.getPrototypeOf(i4);
  do {
    for (let r3 of Object.getOwnPropertyNames(e2))
      typeof i4[r3] == "function" && r3 !== "constructor" && (i4[r3] = i4[r3].bind(i4));
    e2 = Object.getPrototypeOf(e2);
  } while (e2 !== Object.prototype);
}
var E2 = class {
  constructor(e2) {
    this.faker = e2;
    Ne2(this);
  }
};
var b2 = class extends E2 {
  constructor(r3) {
    super(r3);
    this.faker = r3;
  }
};
var Me2 = ((t2) => (t2.Narrowbody = "narrowbody", t2.Regional = "regional", t2.Widebody = "widebody", t2))(Me2 || {});
var fr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var br = ["0", "O", "1", "I", "L"];
var dr = { regional: 20, narrowbody: 35, widebody: 60 };
var gr = { regional: ["A", "B", "C", "D"], narrowbody: ["A", "B", "C", "D", "E", "F"], widebody: ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K"] };
var _2 = class extends b2 {
  airport() {
    return this.faker.helpers.arrayElement(this.faker.definitions.airline.airport);
  }
  airline() {
    return this.faker.helpers.arrayElement(this.faker.definitions.airline.airline);
  }
  airplane() {
    return this.faker.helpers.arrayElement(this.faker.definitions.airline.airplane);
  }
  recordLocator(e2 = {}) {
    let { allowNumerics: r3 = false, allowVisuallySimilarCharacters: t2 = false } = e2, a3 = [];
    return r3 || a3.push(...fr), t2 || a3.push(...br), this.faker.string.alphanumeric({ length: 6, casing: "upper", exclude: a3 });
  }
  seat(e2 = {}) {
    let { aircraftType: r3 = "narrowbody" } = e2, t2 = dr[r3], a3 = gr[r3], n3 = this.faker.number.int({ min: 1, max: t2 }), s3 = this.faker.helpers.arrayElement(a3);
    return `${n3}${s3}`;
  }
  aircraftType() {
    return this.faker.helpers.enumValue(Me2);
  }
  flightNumber(e2 = {}) {
    let { length: r3 = { min: 1, max: 4 }, addLeadingZeros: t2 = false } = e2, a3 = this.faker.string.numeric({ length: r3, allowLeadingZeros: false });
    return t2 ? a3.padStart(4, "0") : a3;
  }
};
var De2 = ((n3) => (n3.SRGB = "sRGB", n3.DisplayP3 = "display-p3", n3.REC2020 = "rec2020", n3.A98RGB = "a98-rgb", n3.ProphotoRGB = "prophoto-rgb", n3))(De2 || {});
var Re2 = ((c3) => (c3.RGB = "rgb", c3.RGBA = "rgba", c3.HSL = "hsl", c3.HSLA = "hsla", c3.HWB = "hwb", c3.CMYK = "cmyk", c3.LAB = "lab", c3.LCH = "lch", c3.COLOR = "color", c3))(Re2 || {});
function yr(i4, e2) {
  let { prefix: r3, casing: t2 } = e2;
  switch (t2) {
    case "upper":
      i4 = i4.toUpperCase();
      break;
    case "lower":
      i4 = i4.toLowerCase();
      break;
    case "mixed":
  }
  return r3 && (i4 = r3 + i4), i4;
}
function ve2(i4) {
  return i4.map((r3) => {
    if (r3 % 1 !== 0) {
      let a3 = new ArrayBuffer(4);
      new DataView(a3).setFloat32(0, r3);
      let n3 = new Uint8Array(a3);
      return ve2([...n3]).replace(/ /g, "");
    }
    return (r3 >>> 0).toString(2).padStart(8, "0");
  }).join(" ");
}
function kr(i4, e2 = "rgb", r3 = "sRGB") {
  let t2 = (a3) => Math.round(a3 * 100);
  switch (e2) {
    case "rgba":
      return `rgba(${i4[0]}, ${i4[1]}, ${i4[2]}, ${i4[3]})`;
    case "color":
      return `color(${r3} ${i4[0]} ${i4[1]} ${i4[2]})`;
    case "cmyk":
      return `cmyk(${t2(i4[0])}%, ${t2(i4[1])}%, ${t2(i4[2])}%, ${t2(i4[3])}%)`;
    case "hsl":
      return `hsl(${i4[0]}deg ${t2(i4[1])}% ${t2(i4[2])}%)`;
    case "hsla":
      return `hsl(${i4[0]}deg ${t2(i4[1])}% ${t2(i4[2])}% / ${t2(i4[3])})`;
    case "hwb":
      return `hwb(${i4[0]} ${t2(i4[1])}% ${t2(i4[2])}%)`;
    case "lab":
      return `lab(${t2(i4[0])}% ${i4[1]} ${i4[2]})`;
    case "lch":
      return `lch(${t2(i4[0])}% ${i4[1]} ${i4[2]})`;
    case "rgb":
    default:
      return `rgb(${i4[0]}, ${i4[1]}, ${i4[2]})`;
  }
}
function R2(i4, e2, r3 = "rgb", t2 = "sRGB") {
  switch (e2) {
    case "css":
      return kr(i4, r3, t2);
    case "binary":
      return ve2(i4);
    case "decimal":
    default:
      return i4;
  }
}
var G2 = class extends b2 {
  human() {
    return this.faker.helpers.arrayElement(this.faker.definitions.color.human);
  }
  space() {
    return this.faker.helpers.arrayElement(this.faker.definitions.color.space);
  }
  cssSupportedFunction() {
    return this.faker.helpers.enumValue(Re2);
  }
  cssSupportedSpace() {
    return this.faker.helpers.enumValue(De2);
  }
  rgb(e2 = {}) {
    let { format: r3 = "hex", includeAlpha: t2 = false, prefix: a3 = "#", casing: n3 = "lower" } = e2, s3, o2 = "rgb";
    return r3 === "hex" ? (s3 = this.faker.string.hexadecimal({ length: t2 ? 8 : 6, prefix: "" }), s3 = yr(s3, { prefix: a3, casing: n3 }), s3) : (s3 = Array.from({ length: 3 }, () => this.faker.number.int(255)), t2 && (s3.push(this.faker.number.float({ multipleOf: 0.01 })), o2 = "rgba"), R2(s3, r3, o2));
  }
  cmyk(e2) {
    let r3 = Array.from({ length: 4 }, () => this.faker.number.float({ multipleOf: 0.01 }));
    return R2(r3, (e2 == null ? void 0 : e2.format) || "decimal", "cmyk");
  }
  hsl(e2) {
    let r3 = [this.faker.number.int(360)];
    for (let t2 = 0; t2 < (e2 != null && e2.includeAlpha ? 3 : 2); t2++)
      r3.push(this.faker.number.float({ multipleOf: 0.01 }));
    return R2(r3, (e2 == null ? void 0 : e2.format) || "decimal", e2 != null && e2.includeAlpha ? "hsla" : "hsl");
  }
  hwb(e2) {
    let r3 = [this.faker.number.int(360)];
    for (let t2 = 0; t2 < 2; t2++)
      r3.push(this.faker.number.float({ multipleOf: 0.01 }));
    return R2(r3, (e2 == null ? void 0 : e2.format) || "decimal", "hwb");
  }
  lab(e2) {
    let r3 = [this.faker.number.float({ multipleOf: 1e-6 })];
    for (let t2 = 0; t2 < 2; t2++)
      r3.push(this.faker.number.float({ min: -100, max: 100, multipleOf: 1e-4 }));
    return R2(r3, (e2 == null ? void 0 : e2.format) || "decimal", "lab");
  }
  lch(e2) {
    let r3 = [this.faker.number.float({ multipleOf: 1e-6 })];
    for (let t2 = 0; t2 < 2; t2++)
      r3.push(this.faker.number.float({ max: 230, multipleOf: 0.1 }));
    return R2(r3, (e2 == null ? void 0 : e2.format) || "decimal", "lch");
  }
  colorByCSSColorSpace(e2) {
    (e2 == null ? void 0 : e2.format) === "css" && !(e2 != null && e2.space) && (e2 = { ...e2, space: "sRGB" });
    let r3 = Array.from({ length: 3 }, () => this.faker.number.float({ multipleOf: 1e-4 }));
    return R2(r3, (e2 == null ? void 0 : e2.format) || "decimal", "color", e2 == null ? void 0 : e2.space);
  }
};
var U2 = () => {
  throw new u2("You cannot edit the locale data on the faker instance");
};
function Le2(i4) {
  let e2 = {};
  return new Proxy(i4, { has() {
    return true;
  }, get(r3, t2) {
    return typeof t2 == "symbol" || t2 === "nodeType" ? r3[t2] : t2 in e2 ? e2[t2] : e2[t2] = xr(t2, r3[t2]);
  }, set: U2, deleteProperty: U2 });
}
function v2(i4, ...e2) {
  if (i4 === null)
    throw new u2(`The locale data for '${e2.join(".")}' aren't applicable to this locale.
  If you think this is a bug, please report it at: https://github.com/faker-js/faker`);
  if (i4 === void 0)
    throw new u2(`The locale data for '${e2.join(".")}' are missing in this locale.
  Please contribute the missing data to the project or use a locale/Faker instance that has these data.
  For more information see https://fakerjs.dev/guide/localization.html`);
}
function xr(i4, e2 = {}) {
  return new Proxy(e2, { has(r3, t2) {
    return r3[t2] != null;
  }, get(r3, t2) {
    let a3 = r3[t2];
    return typeof t2 == "symbol" || t2 === "nodeType" || v2(a3, i4, t2.toString()), a3;
  }, set: U2, deleteProperty: U2 });
}
var Pe2 = ((r3) => (r3.Female = "female", r3.Male = "male", r3))(Pe2 || {});
function P2(i4, e2, r3, { generic: t2, female: a3, male: n3 }, s3) {
  let o2;
  switch (r3) {
    case "female":
      o2 = a3;
      break;
    case "male":
      o2 = n3;
      break;
    default:
      o2 = t2;
      break;
  }
  return o2 == null && (a3 != null && n3 != null ? o2 = i4.helpers.arrayElement([a3, n3]) : o2 = t2, v2(o2, `person.{${s3}, female_${s3}, male_${s3}}`)), e2(o2);
}
var O2 = class extends b2 {
  firstName(e2) {
    var n3;
    let { first_name: r3, female_first_name: t2, male_first_name: a3 } = (n3 = this.faker.rawDefinitions.person) != null ? n3 : {};
    return P2(this.faker, this.faker.helpers.arrayElement, e2, { generic: r3, female: t2, male: a3 }, "first_name");
  }
  lastName(e2) {
    var l3;
    let { last_name: r3, female_last_name: t2, male_last_name: a3, last_name_pattern: n3, male_last_name_pattern: s3, female_last_name_pattern: o2 } = (l3 = this.faker.rawDefinitions.person) != null ? l3 : {};
    if (n3 != null || s3 != null || o2 != null) {
      let c3 = P2(this.faker, this.faker.helpers.weightedArrayElement, e2, { generic: n3, female: o2, male: s3 }, "last_name_pattern");
      return this.faker.helpers.fake(c3);
    }
    return P2(this.faker, this.faker.helpers.arrayElement, e2, { generic: r3, female: t2, male: a3 }, "last_name");
  }
  middleName(e2) {
    var n3;
    let { middle_name: r3, female_middle_name: t2, male_middle_name: a3 } = (n3 = this.faker.rawDefinitions.person) != null ? n3 : {};
    return P2(this.faker, this.faker.helpers.arrayElement, e2, { generic: r3, female: t2, male: a3 }, "middle_name");
  }
  fullName(e2 = {}) {
    let { sex: r3 = this.faker.helpers.arrayElement(["female", "male"]), firstName: t2 = this.firstName(r3), lastName: a3 = this.lastName(r3) } = e2, n3 = this.faker.helpers.weightedArrayElement(this.faker.definitions.person.name);
    return this.faker.helpers.mustache(n3, { "person.prefix": () => this.prefix(r3), "person.firstName": () => t2, "person.middleName": () => this.middleName(r3), "person.lastName": () => a3, "person.suffix": () => this.suffix() });
  }
  gender() {
    return this.faker.helpers.arrayElement(this.faker.definitions.person.gender);
  }
  sex() {
    return this.faker.helpers.arrayElement(this.faker.definitions.person.sex);
  }
  sexType() {
    return this.faker.helpers.enumValue(Pe2);
  }
  bio() {
    let { bio_pattern: e2 } = this.faker.definitions.person;
    return this.faker.helpers.fake(e2);
  }
  prefix(e2) {
    var n3;
    let { prefix: r3, female_prefix: t2, male_prefix: a3 } = (n3 = this.faker.rawDefinitions.person) != null ? n3 : {};
    return P2(this.faker, this.faker.helpers.arrayElement, e2, { generic: r3, female: t2, male: a3 }, "prefix");
  }
  suffix() {
    return this.faker.helpers.arrayElement(this.faker.definitions.person.suffix);
  }
  jobTitle() {
    return this.faker.helpers.fake(this.faker.definitions.person.job_title_pattern);
  }
  jobDescriptor() {
    let e2 = this.faker.definitions.person.title.descriptor;
    if (e2 == null)
      throw new u2("No person.title.descriptor definitions available.");
    return this.faker.helpers.arrayElement(e2);
  }
  jobArea() {
    let e2 = this.faker.definitions.person.title.level;
    if (e2 == null)
      throw new u2("No person.title.area definitions available.");
    return this.faker.helpers.arrayElement(e2);
  }
  jobType() {
    let e2 = this.faker.definitions.person.title.job;
    if (e2 == null)
      throw new u2("No person.title.job definitions available.");
    return this.faker.helpers.arrayElement(e2);
  }
  zodiacSign() {
    return this.faker.helpers.arrayElement(this.faker.definitions.person.western_zodiac_sign);
  }
};
var xe2 = class {
  constructor() {
    f2(this, "N", 624);
    f2(this, "M", 397);
    f2(this, "MATRIX_A", 2567483615);
    f2(this, "UPPER_MASK", 2147483648);
    f2(this, "LOWER_MASK", 2147483647);
    f2(this, "mt", Array.from({ length: this.N }));
    f2(this, "mti", this.N + 1);
    f2(this, "mag01", [0, this.MATRIX_A]);
  }
  unsigned32(e2) {
    return e2 < 0 ? (e2 ^ this.UPPER_MASK) + this.UPPER_MASK : e2;
  }
  subtraction32(e2, r3) {
    return e2 < r3 ? this.unsigned32(4294967296 - (r3 - e2) & 4294967295) : e2 - r3;
  }
  addition32(e2, r3) {
    return this.unsigned32(e2 + r3 & 4294967295);
  }
  multiplication32(e2, r3) {
    let t2 = 0;
    for (let a3 = 0; a3 < 32; ++a3)
      e2 >>> a3 & 1 && (t2 = this.addition32(t2, this.unsigned32(r3 << a3)));
    return t2;
  }
  initGenrand(e2) {
    for (this.mt[0] = this.unsigned32(e2 & 4294967295), this.mti = 1; this.mti < this.N; this.mti++)
      this.mt[this.mti] = this.addition32(this.multiplication32(1812433253, this.unsigned32(this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30)), this.mti), this.mt[this.mti] = this.unsigned32(this.mt[this.mti] & 4294967295);
  }
  initByArray(e2, r3) {
    this.initGenrand(19650218);
    let t2 = 1, a3 = 0, n3 = this.N > r3 ? this.N : r3;
    for (; n3; n3--)
      this.mt[t2] = this.addition32(this.addition32(this.unsigned32(this.mt[t2] ^ this.multiplication32(this.unsigned32(this.mt[t2 - 1] ^ this.mt[t2 - 1] >>> 30), 1664525)), e2[a3]), a3), this.mt[t2] = this.unsigned32(this.mt[t2] & 4294967295), t2++, a3++, t2 >= this.N && (this.mt[0] = this.mt[this.N - 1], t2 = 1), a3 >= r3 && (a3 = 0);
    for (n3 = this.N - 1; n3; n3--)
      this.mt[t2] = this.subtraction32(this.unsigned32(this.mt[t2] ^ this.multiplication32(this.unsigned32(this.mt[t2 - 1] ^ this.mt[t2 - 1] >>> 30), 1566083941)), t2), this.mt[t2] = this.unsigned32(this.mt[t2] & 4294967295), t2++, t2 >= this.N && (this.mt[0] = this.mt[this.N - 1], t2 = 1);
    this.mt[0] = 2147483648;
  }
  genrandInt32() {
    let e2;
    if (this.mti >= this.N) {
      let r3;
      for (this.mti === this.N + 1 && this.initGenrand(5489), r3 = 0; r3 < this.N - this.M; r3++)
        e2 = this.unsigned32(this.mt[r3] & this.UPPER_MASK | this.mt[r3 + 1] & this.LOWER_MASK), this.mt[r3] = this.unsigned32(this.mt[r3 + this.M] ^ e2 >>> 1 ^ this.mag01[e2 & 1]);
      for (; r3 < this.N - 1; r3++)
        e2 = this.unsigned32(this.mt[r3] & this.UPPER_MASK | this.mt[r3 + 1] & this.LOWER_MASK), this.mt[r3] = this.unsigned32(this.mt[r3 + (this.M - this.N)] ^ e2 >>> 1 ^ this.mag01[e2 & 1]);
      e2 = this.unsigned32(this.mt[this.N - 1] & this.UPPER_MASK | this.mt[0] & this.LOWER_MASK), this.mt[this.N - 1] = this.unsigned32(this.mt[this.M - 1] ^ e2 >>> 1 ^ this.mag01[e2 & 1]), this.mti = 0;
    }
    return e2 = this.mt[this.mti++], e2 = this.unsigned32(e2 ^ e2 >>> 11), e2 = this.unsigned32(e2 ^ e2 << 7 & 2636928640), e2 = this.unsigned32(e2 ^ e2 << 15 & 4022730752), e2 = this.unsigned32(e2 ^ e2 >>> 18), e2;
  }
  genrandInt31() {
    return this.genrandInt32() >>> 1;
  }
  genrandReal1() {
    return this.genrandInt32() * (1 / 4294967295);
  }
  genrandReal2() {
    return this.genrandInt32() * (1 / 4294967296);
  }
  genrandReal3() {
    return (this.genrandInt32() + 0.5) * (1 / 4294967296);
  }
  genrandRes53() {
    let e2 = this.genrandInt32() >>> 5, r3 = this.genrandInt32() >>> 6;
    return (e2 * 67108864 + r3) * (1 / 9007199254740992);
  }
};
function $e2() {
  let i4 = new xe2();
  return i4.initGenrand(Math.ceil(Math.random() * Number.MAX_SAFE_INTEGER)), { next() {
    return i4.genrandReal2();
  }, seed(e2) {
    typeof e2 == "number" ? i4.initGenrand(e2) : Array.isArray(e2) && i4.initByArray(e2, e2.length);
  } };
}
function m2(i4) {
  let e2 = `[@faker-js/faker]: ${i4.deprecated} is deprecated`;
  i4.since && (e2 += ` since v${i4.since}`), i4.until && (e2 += ` and will be removed in v${i4.until}`), i4.proposed && (e2 += `. Please use ${i4.proposed} instead`), console.warn(`${e2}.`);
}
var K2 = class extends E2 {
  number(e2 = 99999) {
    m2({ deprecated: "faker.datatype.number()", proposed: "faker.number.int()", since: "8.0", until: "9.0" }), typeof e2 == "number" && (e2 = { max: e2 });
    let { min: r3 = 0, max: t2 = r3 + 99999, precision: a3 = 1 } = e2;
    return this.faker.number.float({ min: r3, max: t2, multipleOf: a3 });
  }
  float(e2 = {}) {
    m2({ deprecated: "faker.datatype.float()", proposed: "faker.number.float()", since: "8.0", until: "9.0" }), typeof e2 == "number" && (e2 = { precision: e2 });
    let { min: r3 = 0, max: t2 = r3 + 99999, precision: a3 = 0.01 } = e2;
    return this.faker.number.float({ min: r3, max: t2, multipleOf: a3 });
  }
  datetime(e2 = {}) {
    m2({ deprecated: "faker.datatype.datetime({ min, max })", proposed: "faker.date.between({ from, to }) or faker.date.anytime()", since: "8.0", until: "9.0" });
    let r3 = 864e13, t2 = typeof e2 == "number" ? void 0 : e2.min, a3 = typeof e2 == "number" ? e2 : e2.max;
    return (t2 == null || t2 < r3 * -1) && (t2 = Date.UTC(1990, 0)), (a3 == null || a3 > r3) && (a3 = Date.UTC(2100, 0)), this.faker.date.between({ from: t2, to: a3 });
  }
  string(e2 = {}) {
    m2({ deprecated: "faker.datatype.string()", proposed: "faker.string.sample()", since: "8.0", until: "9.0" }), typeof e2 == "number" && (e2 = { length: e2 });
    let { length: r3 = 10 } = e2;
    return this.faker.string.sample(r3);
  }
  uuid() {
    return m2({ deprecated: "faker.datatype.uuid()", proposed: "faker.string.uuid()", since: "8.0", until: "9.0" }), this.faker.string.uuid();
  }
  boolean(e2 = {}) {
    typeof e2 == "number" && (e2 = { probability: e2 });
    let { probability: r3 = 0.5 } = e2;
    return r3 <= 0 ? false : r3 >= 1 ? true : this.faker.number.float() < r3;
  }
  hexadecimal(e2 = {}) {
    return m2({ deprecated: "faker.datatype.hexadecimal()", proposed: "faker.string.hexadecimal() or faker.number.hex()", since: "8.0", until: "9.0" }), this.faker.string.hexadecimal({ ...e2, casing: e2.case });
  }
  json() {
    m2({ deprecated: "faker.datatype.json()", proposed: "your own function to generate complex objects", since: "8.0", until: "9.0" });
    let e2 = ["foo", "bar", "bike", "a", "b", "name", "prop"], r3 = {};
    for (let t2 of e2)
      r3[t2] = this.boolean() ? this.faker.string.sample() : this.faker.number.int();
    return JSON.stringify(r3);
  }
  array(e2 = 10) {
    return m2({ deprecated: "faker.datatype.array()", proposed: "your own function to build complex arrays", since: "8.0", until: "9.0" }), this.faker.helpers.multiple(() => this.boolean() ? this.faker.string.sample() : this.faker.number.int(), { count: e2 });
  }
  bigInt(e2) {
    return m2({ deprecated: "faker.datatype.bigInt()", proposed: "faker.number.bigInt()", since: "8.0", until: "9.0" }), this.faker.number.bigInt(e2);
  }
};
function D2(i4, e2) {
  return i4 == null ? e2() : (i4 = new Date(i4), Number.isNaN(i4.valueOf()) && (i4 = e2()), i4);
}
var $2 = class extends E2 {
  anytime(e2 = {}) {
    let { refDate: r3 } = e2, t2 = D2(r3, this.faker.defaultRefDate);
    return this.between({ from: new Date(t2.getTime() - 1e3 * 60 * 60 * 24 * 365), to: new Date(t2.getTime() + 1e3 * 60 * 60 * 24 * 365) });
  }
  past(e2 = {}, r3) {
    typeof e2 == "number" && (m2({ deprecated: "faker.date.past(years, refDate)", proposed: "faker.date.past({ years, refDate })", since: "8.0", until: "9.0" }), e2 = { years: e2 });
    let { years: t2 = 1, refDate: a3 = r3 } = e2;
    if (t2 <= 0)
      throw new u2("Years must be greater than 0.");
    let n3 = D2(a3, this.faker.defaultRefDate), s3 = { min: 1e3, max: t2 * 365 * 24 * 3600 * 1e3 }, o2 = n3.getTime();
    return o2 -= this.faker.number.int(s3), n3.setTime(o2), n3;
  }
  future(e2 = {}, r3) {
    typeof e2 == "number" && (m2({ deprecated: "faker.date.future(years, refDate)", proposed: "faker.date.future({ years, refDate })", since: "8.0", until: "9.0" }), e2 = { years: e2 });
    let { years: t2 = 1, refDate: a3 = r3 } = e2;
    if (t2 <= 0)
      throw new u2("Years must be greater than 0.");
    let n3 = D2(a3, this.faker.defaultRefDate), s3 = { min: 1e3, max: t2 * 365 * 24 * 3600 * 1e3 }, o2 = n3.getTime();
    return o2 += this.faker.number.int(s3), n3.setTime(o2), n3;
  }
  between(e2, r3) {
    (e2 instanceof Date || typeof e2 != "object") && (m2({ deprecated: "faker.date.between(from, to)", proposed: "faker.date.between({ from, to })", since: "8.0", until: "9.0" }), e2 = { from: e2, to: r3 != null ? r3 : e2 });
    let { from: t2, to: a3 } = e2, n3 = D2(t2, this.faker.defaultRefDate).getTime(), s3 = D2(a3, this.faker.defaultRefDate).getTime(), o2 = this.faker.number.int(s3 - n3);
    return new Date(n3 + o2);
  }
  betweens(e2, r3, t2 = 3) {
    (e2 instanceof Date || typeof e2 != "object") && (m2({ deprecated: "faker.date.betweens(from, to, count)", proposed: "faker.date.betweens({ from, to, count })", since: "8.0", until: "9.0" }), e2 = { from: e2, to: r3 != null ? r3 : e2, count: t2 });
    let { from: a3, to: n3, count: s3 = 3 } = e2;
    return this.faker.helpers.multiple(() => this.between({ from: a3, to: n3 }), { count: s3 }).sort((o2, l3) => o2.getTime() - l3.getTime());
  }
  recent(e2 = {}, r3) {
    typeof e2 == "number" && (m2({ deprecated: "faker.date.recent(days, refDate)", proposed: "faker.date.recent({ days, refDate })", since: "8.0", until: "9.0" }), e2 = { days: e2 });
    let { days: t2 = 1, refDate: a3 = r3 } = e2;
    if (t2 <= 0)
      throw new u2("Days must be greater than 0.");
    let n3 = D2(a3, this.faker.defaultRefDate), s3 = { min: 1e3, max: t2 * 24 * 3600 * 1e3 }, o2 = n3.getTime();
    return o2 -= this.faker.number.int(s3), n3.setTime(o2), n3;
  }
  soon(e2 = {}, r3) {
    typeof e2 == "number" && (m2({ deprecated: "faker.date.soon(days, refDate)", proposed: "faker.date.soon({ days, refDate })", since: "8.0", until: "9.0" }), e2 = { days: e2 });
    let { days: t2 = 1, refDate: a3 = r3 } = e2;
    if (t2 <= 0)
      throw new u2("Days must be greater than 0.");
    let n3 = D2(a3, this.faker.defaultRefDate), s3 = { min: 1e3, max: t2 * 24 * 3600 * 1e3 }, o2 = n3.getTime();
    return o2 += this.faker.number.int(s3), n3.setTime(o2), n3;
  }
  birthdate(e2 = {}) {
    var o2, l3, c3, p3;
    let r3 = e2.mode === "age" ? "age" : "year", t2 = D2(e2.refDate, this.faker.defaultRefDate), a3 = t2.getUTCFullYear(), n3, s3;
    if (r3 === "age" ? (n3 = new Date(t2).setUTCFullYear(a3 - ((o2 = e2.max) != null ? o2 : 80) - 1), s3 = new Date(t2).setUTCFullYear(a3 - ((l3 = e2.min) != null ? l3 : 18))) : (n3 = new Date(Date.UTC(0, 0, 2)).setUTCFullYear((c3 = e2.min) != null ? c3 : a3 - 80), s3 = new Date(Date.UTC(0, 11, 30)).setUTCFullYear((p3 = e2.max) != null ? p3 : a3 - 19)), s3 < n3)
      throw new u2(`Max ${e2.max} should be larger than or equal to min ${e2.min}.`);
    return new Date(this.faker.number.int({ min: n3, max: s3 }));
  }
};
var j2 = class extends $2 {
  constructor(r3) {
    super(r3);
    this.faker = r3;
  }
  month(r3 = {}) {
    let { abbr: t2, abbreviated: a3 = t2 != null ? t2 : false, context: n3 = false } = r3;
    t2 != null && m2({ deprecated: "faker.date.month({ abbr })", proposed: "faker.date.month({ abbreviated })", since: "8.0", until: "9.0" });
    let s3 = this.faker.definitions.date.month, o2;
    a3 ? o2 = n3 && s3.abbr_context != null ? "abbr_context" : "abbr" : o2 = n3 && s3.wide_context != null ? "wide_context" : "wide";
    let l3 = s3[o2];
    return v2(l3, "date.month", o2), this.faker.helpers.arrayElement(l3);
  }
  weekday(r3 = {}) {
    let { abbr: t2, abbreviated: a3 = t2 != null ? t2 : false, context: n3 = false } = r3;
    t2 != null && m2({ deprecated: "faker.date.weekday({ abbr })", proposed: "faker.date.weekday({ abbreviated })", since: "8.0", until: "9.0" });
    let s3 = this.faker.definitions.date.weekday, o2;
    a3 ? o2 = n3 && s3.abbr_context != null ? "abbr_context" : "abbr" : o2 = n3 && s3.wide_context != null ? "wide_context" : "wide";
    let l3 = s3[o2];
    return v2(l3, "date.weekday", o2), this.faker.helpers.arrayElement(l3);
  }
};
var Ar = /\.|\(/;
function Be2(i4, e2, r3 = [e2, e2.rawDefinitions]) {
  if (i4.length === 0)
    throw new u2("Eval expression cannot be empty.");
  if (r3.length === 0)
    throw new u2("Eval entrypoints cannot be empty.");
  let t2 = r3, a3 = i4;
  do {
    let s3;
    a3.startsWith("(") ? [s3, t2] = wr(a3, t2) : [s3, t2] = Sr(a3, t2), a3 = a3.substring(s3), t2 = t2.filter((o2) => o2 != null).map((o2) => Array.isArray(o2) ? e2.helpers.arrayElement(o2) : o2);
  } while (a3.length > 0 && t2.length > 0);
  if (t2.length === 0)
    throw new u2(`Cannot resolve expression '${i4}'`);
  let n3 = t2[0];
  return typeof n3 == "function" ? n3() : n3;
}
function wr(i4, e2) {
  let [r3, t2] = Er(i4), a3 = i4[r3 + 1];
  switch (a3) {
    case ".":
    case "(":
    case void 0:
      break;
    default:
      throw new u2(`Expected dot ('.'), open parenthesis ('('), or nothing after function call but got '${a3}'`);
  }
  return [r3 + (a3 === "." ? 2 : 1), e2.map((n3) => typeof n3 == "function" ? n3(...t2) : n3)];
}
function Er(i4) {
  let e2 = i4.indexOf(")", 1);
  if (e2 === -1)
    throw new u2(`Missing closing parenthesis in '${i4}'`);
  for (; e2 !== -1; ) {
    let t2 = i4.substring(1, e2);
    try {
      return [e2, JSON.parse(`[${t2}]`)];
    } catch {
      if (!t2.includes("'") && !t2.includes('"'))
        try {
          return [e2, JSON.parse(`["${t2}"]`)];
        } catch {
        }
    }
    e2 = i4.indexOf(")", e2 + 1);
  }
  e2 = i4.lastIndexOf(")");
  let r3 = i4.substring(1, e2);
  return [e2, [r3]];
}
function Sr(i4, e2) {
  var o2, l3;
  let r3 = Ar.exec(i4), t2 = ((o2 = r3 == null ? void 0 : r3[0]) != null ? o2 : "") === ".", a3 = (l3 = r3 == null ? void 0 : r3.index) != null ? l3 : i4.length, n3 = i4.substring(0, a3);
  if (n3.length === 0)
    throw new u2(`Expression parts cannot be empty in '${i4}'`);
  let s3 = i4[a3 + 1];
  if (t2 && (s3 == null || s3 === "." || s3 === "("))
    throw new u2(`Found dot without property name in '${i4}'`);
  return [a3 + (t2 ? 1 : 0), e2.map((c3) => Tr(c3, n3))];
}
function Tr(i4, e2) {
  switch (typeof i4) {
    case "function": {
      try {
        i4 = i4();
      } catch {
        return;
      }
      return i4 == null ? void 0 : i4[e2];
    }
    case "object":
      return i4 == null ? void 0 : i4[e2];
    default:
      return;
  }
}
function Fe2(i4) {
  let e2 = Cr(i4.replace(/L?$/, "0"));
  return e2 === 0 ? 0 : 10 - e2;
}
function Cr(i4) {
  i4 = i4.replace(/[\s-]/g, "");
  let e2 = 0, r3 = false;
  for (let t2 = i4.length - 1; t2 >= 0; t2--) {
    let a3 = Number.parseInt(i4[t2]);
    r3 && (a3 *= 2, a3 > 9 && (a3 = a3 % 10 + 1)), e2 += a3, r3 = !r3;
  }
  return e2 % 10;
}
function Nr(i4, e2) {
  return i4[e2] === void 0 ? -1 : 0;
}
function Ie2(i4, e2, r3, t2, a3) {
  throw console.error("Error", r3), console.log(`Found ${Object.keys(t2).length} unique entries before throwing error.
retried: ${a3}
total time: ${e2 - i4}ms`), new u2(`${r3} for uniqueness check.

May not be able to generate any more unique values with current settings.
Try adjusting maxTime or maxRetries parameters for faker.helpers.unique().`);
}
function Ae2(i4, e2, r3 = {}) {
  let t2 = Date.now(), { startTime: a3 = Date.now(), maxTime: n3 = 50, maxRetries: s3 = 50, currentIterations: o2 = 0, compare: l3 = Nr, store: c3 = {} } = r3, { exclude: p3 = [] } = r3;
  if (r3.currentIterations = o2, Array.isArray(p3) || (p3 = [p3]), t2 - a3 >= n3)
    return Ie2(a3, t2, `Exceeded maxTime: ${n3}`, c3, o2);
  if (o2 >= s3)
    return Ie2(a3, t2, `Exceeded maxRetries: ${s3}`, c3, o2);
  let h3 = i4(...e2);
  return l3(c3, h3) === -1 && !p3.includes(h3) ? (c3[h3] = h3, r3.currentIterations = 0, h3) : (r3.currentIterations++, Ae2(i4, e2, { ...r3, startTime: a3, maxTime: n3, maxRetries: s3, compare: l3, exclude: p3 }));
}
function _e2(i4, e2, r3, t2) {
  let a3 = 1;
  if (e2)
    switch (e2) {
      case "?": {
        a3 = i4.datatype.boolean() ? 0 : 1;
        break;
      }
      case "*": {
        let n3 = 1;
        for (; i4.datatype.boolean(); )
          n3 *= 2;
        a3 = i4.number.int({ min: 0, max: n3 });
        break;
      }
      case "+": {
        let n3 = 1;
        for (; i4.datatype.boolean(); )
          n3 *= 2;
        a3 = i4.number.int({ min: 1, max: n3 });
        break;
      }
      default:
        throw new u2("Unknown quantifier symbol provided.");
    }
  else
    r3 != null && t2 != null ? a3 = i4.number.int({ min: Number.parseInt(r3), max: Number.parseInt(t2) }) : r3 != null && t2 == null && (a3 = Number.parseInt(r3));
  return a3;
}
function Ge2(i4, e2 = "") {
  let r3 = /(.)\{(\d+),(\d+)\}/, t2 = /(.)\{(\d+)\}/, a3 = /\[(\d+)-(\d+)\]/, n3, s3, o2, l3, c3 = r3.exec(e2);
  for (; c3 != null; )
    n3 = Number.parseInt(c3[2]), s3 = Number.parseInt(c3[3]), n3 > s3 && (o2 = s3, s3 = n3, n3 = o2), l3 = i4.number.int({ min: n3, max: s3 }), e2 = e2.slice(0, c3.index) + c3[1].repeat(l3) + e2.slice(c3.index + c3[0].length), c3 = r3.exec(e2);
  for (c3 = t2.exec(e2); c3 != null; )
    l3 = Number.parseInt(c3[2]), e2 = e2.slice(0, c3.index) + c3[1].repeat(l3) + e2.slice(c3.index + c3[0].length), c3 = t2.exec(e2);
  for (c3 = a3.exec(e2); c3 != null; )
    n3 = Number.parseInt(c3[1]), s3 = Number.parseInt(c3[2]), n3 > s3 && (o2 = s3, s3 = n3, n3 = o2), e2 = e2.slice(0, c3.index) + i4.number.int({ min: n3, max: s3 }).toString() + e2.slice(c3.index + c3[0].length), c3 = a3.exec(e2);
  return e2;
}
function z2(i4, e2 = "", r3 = "#") {
  let t2 = "";
  for (let a3 = 0; a3 < e2.length; a3++)
    e2.charAt(a3) === r3 ? t2 += i4.number.int(9) : e2.charAt(a3) === "!" ? t2 += i4.number.int({ min: 2, max: 9 }) : t2 += e2.charAt(a3);
  return t2;
}
var B2 = class extends E2 {
  constructor() {
    super(...arguments);
    f2(this, "uniqueStore", {});
  }
  slugify(r3 = "") {
    return r3.normalize("NFKD").replace(/[\u0300-\u036F]/g, "").replace(/ /g, "-").replace(/[^\w.-]+/g, "");
  }
  replaceSymbolWithNumber(r3 = "", t2 = "#") {
    return m2({ deprecated: "faker.helpers.replaceSymbolWithNumber", proposed: "string.replace(/#+/g, (m) => faker.string.numeric(m.length))", since: "8.4", until: "9.0" }), z2(this.faker, r3, t2);
  }
  replaceSymbols(r3 = "") {
    let t2 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"], a3 = "";
    for (let n3 = 0; n3 < r3.length; n3++)
      r3.charAt(n3) === "#" ? a3 += this.faker.number.int(9) : r3.charAt(n3) === "?" ? a3 += this.arrayElement(t2) : r3.charAt(n3) === "*" ? a3 += this.faker.datatype.boolean() ? this.arrayElement(t2) : this.faker.number.int(9) : a3 += r3.charAt(n3);
    return a3;
  }
  replaceCreditCardSymbols(r3 = "6453-####-####-####-###L", t2 = "#") {
    r3 = Ge2(this.faker, r3), r3 = z2(this.faker, r3, t2);
    let a3 = Fe2(r3);
    return r3.replace("L", String(a3));
  }
  regexpStyleStringParse(r3 = "") {
    return m2({ deprecated: "faker.helpers.regexpStyleStringParse", proposed: "faker.helpers.fromRegExp", since: "8.1", until: "9.0" }), Ge2(this.faker, r3);
  }
  fromRegExp(r3) {
    var g3, k3, A3, x3, T3, Se2, Te2;
    let t2 = false;
    r3 instanceof RegExp && (t2 = r3.flags.includes("i"), r3 = r3.toString(), r3 = (k3 = (g3 = /\/(.+?)\//.exec(r3)) == null ? void 0 : g3[1]) != null ? k3 : "");
    let a3, n3, s3, o2 = /([.A-Za-z0-9])(?:\{(\d+)(?:,(\d+)|)\}|(\?|\*|\+))(?![^[]*]|[^{]*})/, l3 = o2.exec(r3);
    for (; l3 != null; ) {
      let ge2 = l3[2], ye2 = l3[3], ke2 = l3[4];
      s3 = _e2(this.faker, ke2, ge2, ye2), r3 = r3.slice(0, l3.index) + l3[1].repeat(s3) + r3.slice(l3.index + l3[0].length), l3 = o2.exec(r3);
    }
    let c3 = /(\d-\d|\w-\w|\d|\w|[-!@#$&()`.+,/"])/, p3 = /\[(\^|)(-|)(.+?)\](?:\{(\d+)(?:,(\d+)|)\}|(\?|\*|\+)|)/;
    for (l3 = p3.exec(r3); l3 != null; ) {
      let ge2 = l3[1] === "^", ye2 = l3[2] === "-", ke2 = l3[4], mr = l3[5], ur = l3[6], w3 = [], I3 = l3[3], M3 = c3.exec(I3);
      for (ye2 && w3.push(45); M3 != null; ) {
        if (M3[0].includes("-")) {
          let S3 = M3[0].split("-").map((y3) => {
            var L3;
            return (L3 = y3.codePointAt(0)) != null ? L3 : Number.NaN;
          });
          if (a3 = S3[0], n3 = S3[1], a3 > n3)
            throw new u2("Character range provided is out of order.");
          for (let y3 = a3; y3 <= n3; y3++)
            if (t2 && Number.isNaN(Number(String.fromCodePoint(y3)))) {
              let L3 = String.fromCodePoint(y3);
              w3.push((A3 = L3.toUpperCase().codePointAt(0)) != null ? A3 : Number.NaN, (x3 = L3.toLowerCase().codePointAt(0)) != null ? x3 : Number.NaN);
            } else
              w3.push(y3);
        } else
          t2 && Number.isNaN(Number(M3[0])) ? w3.push((T3 = M3[0].toUpperCase().codePointAt(0)) != null ? T3 : Number.NaN, (Se2 = M3[0].toLowerCase().codePointAt(0)) != null ? Se2 : Number.NaN) : w3.push((Te2 = M3[0].codePointAt(0)) != null ? Te2 : Number.NaN);
        I3 = I3.substring(M3[0].length), M3 = c3.exec(I3);
      }
      if (s3 = _e2(this.faker, ur, ke2, mr), ge2) {
        let S3 = -1;
        for (let y3 = 48; y3 <= 57; y3++) {
          if (S3 = w3.indexOf(y3), S3 > -1) {
            w3.splice(S3, 1);
            continue;
          }
          w3.push(y3);
        }
        for (let y3 = 65; y3 <= 90; y3++) {
          if (S3 = w3.indexOf(y3), S3 > -1) {
            w3.splice(S3, 1);
            continue;
          }
          w3.push(y3);
        }
        for (let y3 = 97; y3 <= 122; y3++) {
          if (S3 = w3.indexOf(y3), S3 > -1) {
            w3.splice(S3, 1);
            continue;
          }
          w3.push(y3);
        }
      }
      let pr = this.multiple(() => String.fromCodePoint(this.arrayElement(w3)), { count: s3 }).join("");
      r3 = r3.slice(0, l3.index) + pr + r3.slice(l3.index + l3[0].length), l3 = p3.exec(r3);
    }
    let h3 = /(.)\{(\d+),(\d+)\}/;
    for (l3 = h3.exec(r3); l3 != null; ) {
      if (a3 = Number.parseInt(l3[2]), n3 = Number.parseInt(l3[3]), a3 > n3)
        throw new u2("Numbers out of order in {} quantifier.");
      s3 = this.faker.number.int({ min: a3, max: n3 }), r3 = r3.slice(0, l3.index) + l3[1].repeat(s3) + r3.slice(l3.index + l3[0].length), l3 = h3.exec(r3);
    }
    let d3 = /(.)\{(\d+)\}/;
    for (l3 = d3.exec(r3); l3 != null; )
      s3 = Number.parseInt(l3[2]), r3 = r3.slice(0, l3.index) + l3[1].repeat(s3) + r3.slice(l3.index + l3[0].length), l3 = d3.exec(r3);
    return r3;
  }
  shuffle(r3, t2 = {}) {
    let { inplace: a3 = false } = t2;
    a3 || (r3 = [...r3]);
    for (let n3 = r3.length - 1; n3 > 0; --n3) {
      let s3 = this.faker.number.int(n3);
      [r3[n3], r3[s3]] = [r3[s3], r3[n3]];
    }
    return r3;
  }
  uniqueArray(r3, t2) {
    if (Array.isArray(r3)) {
      let s3 = [...new Set(r3)];
      return this.shuffle(s3).splice(0, t2);
    }
    let a3 = /* @__PURE__ */ new Set();
    try {
      if (typeof r3 == "function") {
        let n3 = 1e3 * t2, s3 = 0;
        for (; a3.size < t2 && s3 < n3; )
          a3.add(r3()), s3++;
      }
    } catch {
    }
    return [...a3];
  }
  mustache(r3, t2) {
    if (r3 == null)
      return "";
    for (let a3 in t2) {
      let n3 = new RegExp(`{{${a3}}}`, "g"), s3 = t2[a3];
      typeof s3 == "string" && (s3 = s3.replace(/\$/g, "$$$$")), r3 = r3.replace(n3, s3);
    }
    return r3;
  }
  maybe(r3, t2 = {}) {
    if (this.faker.datatype.boolean(t2))
      return r3();
  }
  objectKey(r3) {
    let t2 = Object.keys(r3);
    return this.arrayElement(t2);
  }
  objectValue(r3) {
    let t2 = this.faker.helpers.objectKey(r3);
    return r3[t2];
  }
  objectEntry(r3) {
    let t2 = this.faker.helpers.objectKey(r3);
    return [t2, r3[t2]];
  }
  arrayElement(r3) {
    if (r3 == null)
      throw new u2("Calling `faker.helpers.arrayElement()` without arguments is no longer supported.");
    if (r3.length === 0)
      throw new u2("Cannot get value from empty dataset.");
    let t2 = r3.length > 1 ? this.faker.number.int({ max: r3.length - 1 }) : 0;
    return r3[t2];
  }
  weightedArrayElement(r3) {
    if (r3.length === 0)
      throw new u2("weightedArrayElement expects an array with at least one element");
    if (!r3.every((s3) => s3.weight > 0))
      throw new u2("weightedArrayElement expects an array of { weight, value } objects where weight is a positive number");
    let t2 = r3.reduce((s3, { weight: o2 }) => s3 + o2, 0), a3 = this.faker.number.float({ min: 0, max: t2 }), n3 = 0;
    for (let { weight: s3, value: o2 } of r3)
      if (n3 += s3, a3 < n3)
        return o2;
    return r3[r3.length - 1].value;
  }
  arrayElements(r3, t2) {
    if (r3 == null)
      throw new u2("Calling `faker.helpers.arrayElements()` without arguments is no longer supported.");
    if (r3.length === 0)
      return [];
    let a3 = this.rangeToNumber(t2 != null ? t2 : { min: 1, max: r3.length });
    if (a3 >= r3.length)
      return this.shuffle(r3);
    if (a3 <= 0)
      return [];
    let n3 = [...r3], s3 = r3.length, o2 = s3 - a3, l3, c3;
    for (; s3-- > o2; )
      c3 = this.faker.number.int(s3), l3 = n3[c3], n3[c3] = n3[s3], n3[s3] = l3;
    return n3.slice(o2);
  }
  enumValue(r3) {
    let t2 = Object.keys(r3).filter((n3) => Number.isNaN(Number(n3))), a3 = this.arrayElement(t2);
    return r3[a3];
  }
  rangeToNumber(r3) {
    return typeof r3 == "number" ? r3 : this.faker.number.int(r3);
  }
  unique(r3, t2 = [], a3 = {}) {
    m2({ deprecated: "faker.helpers.unique", proposed: "https://github.com/faker-js/faker/issues/1785#issuecomment-1407773744", since: "8.0", until: "9.0" });
    let { maxTime: n3 = 50, maxRetries: s3 = 50, exclude: o2 = [], store: l3 = this.uniqueStore } = a3;
    return Ae2(r3, t2, { ...a3, startTime: Date.now(), maxTime: n3, maxRetries: s3, currentIterations: 0, exclude: o2, store: l3 });
  }
  multiple(r3, t2 = {}) {
    var n3;
    let a3 = this.rangeToNumber((n3 = t2.count) != null ? n3 : 3);
    return a3 <= 0 ? [] : Array.from({ length: a3 }, r3);
  }
};
var V2 = class extends B2 {
  constructor(r3) {
    super(r3);
    this.faker = r3;
  }
  fake(r3) {
    r3 = typeof r3 == "string" ? r3 : this.arrayElement(r3);
    let t2 = r3.search(/{{[a-z]/), a3 = r3.indexOf("}}", t2);
    if (t2 === -1 || a3 === -1)
      return r3;
    let s3 = r3.substring(t2 + 2, a3 + 2).replace("}}", "").replace("{{", ""), o2 = Be2(s3, this.faker), l3 = String(o2), c3 = r3.substring(0, t2) + l3 + r3.substring(a3 + 2);
    return this.fake(c3);
  }
};
var H2 = class extends E2 {
  int(e2 = {}) {
    typeof e2 == "number" && (e2 = { max: e2 });
    let { min: r3 = 0, max: t2 = Number.MAX_SAFE_INTEGER } = e2, a3 = Math.ceil(r3), n3 = Math.floor(t2);
    if (a3 === n3)
      return a3;
    if (n3 < a3)
      throw t2 >= r3 ? new u2(`No integer value between ${r3} and ${t2} found.`) : new u2(`Max ${t2} should be greater than min ${r3}.`);
    let o2 = this.faker._randomizer.next();
    return Math.floor(o2 * (n3 + 1 - a3) + a3);
  }
  float(e2 = {}) {
    typeof e2 == "number" && (e2 = { max: e2 });
    let { min: r3 = 0, max: t2 = 1, fractionDigits: a3, precision: n3, multipleOf: s3 = n3, multipleOf: o2 = n3 != null ? n3 : a3 == null ? void 0 : 10 ** -a3 } = e2;
    if (n3 != null && m2({ deprecated: "faker.number.float({ precision })", proposed: "faker.number.float({ multipleOf })", since: "8.4", until: "9.0" }), t2 === r3)
      return r3;
    if (t2 < r3)
      throw new u2(`Max ${t2} should be greater than min ${r3}.`);
    if (a3 != null) {
      if (s3 != null)
        throw new u2("multipleOf and fractionDigits cannot be set at the same time.");
      if (!Number.isInteger(a3))
        throw new u2("fractionDigits should be an integer.");
      if (a3 < 0)
        throw new u2("fractionDigits should be greater than or equal to 0.");
    }
    if (o2 != null) {
      if (o2 <= 0)
        throw new u2("multipleOf/precision should be greater than 0.");
      let p3 = Math.log10(o2), h3 = o2 < 1 && Number.isInteger(p3) ? 10 ** -p3 : 1 / o2;
      return this.int({ min: r3 * h3, max: t2 * h3 }) / h3;
    }
    return this.faker._randomizer.next() * (t2 - r3) + r3;
  }
  binary(e2 = {}) {
    typeof e2 == "number" && (e2 = { max: e2 });
    let { min: r3 = 0, max: t2 = 1 } = e2;
    return this.int({ max: t2, min: r3 }).toString(2);
  }
  octal(e2 = {}) {
    typeof e2 == "number" && (e2 = { max: e2 });
    let { min: r3 = 0, max: t2 = 7 } = e2;
    return this.int({ max: t2, min: r3 }).toString(8);
  }
  hex(e2 = {}) {
    typeof e2 == "number" && (e2 = { max: e2 });
    let { min: r3 = 0, max: t2 = 15 } = e2;
    return this.int({ max: t2, min: r3 }).toString(16);
  }
  bigInt(e2 = {}) {
    var s3, o2;
    (typeof e2 == "bigint" || typeof e2 == "number" || typeof e2 == "string" || typeof e2 == "boolean") && (e2 = { max: e2 });
    let r3 = BigInt((s3 = e2.min) != null ? s3 : 0), t2 = BigInt((o2 = e2.max) != null ? o2 : r3 + BigInt(999999999999999));
    if (t2 === r3)
      return r3;
    if (t2 < r3)
      throw new u2(`Max ${t2} should be larger then min ${r3}.`);
    let a3 = t2 - r3, n3 = BigInt(this.faker.string.numeric({ length: a3.toString(10).length, allowLeadingZeros: true })) % (a3 + BigInt(1));
    return r3 + n3;
  }
};
var W2 = [..."ABCDEFGHIJKLMNOPQRSTUVWXYZ"];
var Y2 = [..."abcdefghijklmnopqrstuvwxyz"];
var Ue2 = [..."0123456789"];
var Z2 = class extends E2 {
  fromCharacters(e2, r3 = 1) {
    if (r3 = this.faker.helpers.rangeToNumber(r3), r3 <= 0)
      return "";
    if (typeof e2 == "string" && (e2 = [...e2]), e2.length === 0)
      throw new u2("Unable to generate string: No characters to select from.");
    return this.faker.helpers.multiple(() => this.faker.helpers.arrayElement(e2), { count: r3 }).join("");
  }
  alpha(e2 = {}) {
    var s3;
    typeof e2 == "number" && (e2 = { length: e2 });
    let r3 = this.faker.helpers.rangeToNumber((s3 = e2.length) != null ? s3 : 1);
    if (r3 <= 0)
      return "";
    let { casing: t2 = "mixed" } = e2, { exclude: a3 = [] } = e2;
    typeof a3 == "string" && (a3 = [...a3]);
    let n3;
    switch (t2) {
      case "upper":
        n3 = [...W2];
        break;
      case "lower":
        n3 = [...Y2];
        break;
      case "mixed":
      default:
        n3 = [...Y2, ...W2];
        break;
    }
    return n3 = n3.filter((o2) => !a3.includes(o2)), this.fromCharacters(n3, r3);
  }
  alphanumeric(e2 = {}) {
    var s3;
    typeof e2 == "number" && (e2 = { length: e2 });
    let r3 = this.faker.helpers.rangeToNumber((s3 = e2.length) != null ? s3 : 1);
    if (r3 <= 0)
      return "";
    let { casing: t2 = "mixed" } = e2, { exclude: a3 = [] } = e2;
    typeof a3 == "string" && (a3 = [...a3]);
    let n3 = [...Ue2];
    switch (t2) {
      case "upper":
        n3.push(...W2);
        break;
      case "lower":
        n3.push(...Y2);
        break;
      case "mixed":
      default:
        n3.push(...Y2, ...W2);
        break;
    }
    return n3 = n3.filter((o2) => !a3.includes(o2)), this.fromCharacters(n3, r3);
  }
  binary(e2 = {}) {
    var a3;
    let { prefix: r3 = "0b" } = e2, t2 = r3;
    return t2 += this.fromCharacters(["0", "1"], (a3 = e2.length) != null ? a3 : 1), t2;
  }
  octal(e2 = {}) {
    var a3;
    let { prefix: r3 = "0o" } = e2, t2 = r3;
    return t2 += this.fromCharacters(["0", "1", "2", "3", "4", "5", "6", "7"], (a3 = e2.length) != null ? a3 : 1), t2;
  }
  hexadecimal(e2 = {}) {
    var s3;
    let { casing: r3 = "mixed", prefix: t2 = "0x" } = e2, a3 = this.faker.helpers.rangeToNumber((s3 = e2.length) != null ? s3 : 1);
    if (a3 <= 0)
      return t2;
    let n3 = this.fromCharacters(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"], a3);
    return r3 === "upper" ? n3 = n3.toUpperCase() : r3 === "lower" && (n3 = n3.toLowerCase()), `${t2}${n3}`;
  }
  numeric(e2 = {}) {
    var o2;
    typeof e2 == "number" && (e2 = { length: e2 });
    let r3 = this.faker.helpers.rangeToNumber((o2 = e2.length) != null ? o2 : 1);
    if (r3 <= 0)
      return "";
    let { allowLeadingZeros: t2 = true } = e2, { exclude: a3 = [] } = e2;
    typeof a3 == "string" && (a3 = [...a3]);
    let n3 = Ue2.filter((l3) => !a3.includes(l3));
    if (n3.length === 0 || n3.length === 1 && !t2 && n3[0] === "0")
      throw new u2("Unable to generate numeric string, because all possible digits are excluded.");
    let s3 = "";
    return !t2 && !a3.includes("0") && (s3 += this.faker.helpers.arrayElement(n3.filter((l3) => l3 !== "0"))), s3 += this.fromCharacters(n3, r3 - s3.length), s3;
  }
  sample(e2 = 10) {
    e2 = this.faker.helpers.rangeToNumber(e2);
    let r3 = { min: 33, max: 125 }, t2 = "";
    for (; t2.length < e2; )
      t2 += String.fromCodePoint(this.faker.number.int(r3));
    return t2;
  }
  uuid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/x/g, () => this.faker.number.hex({ min: 0, max: 15 })).replace(/y/g, () => this.faker.number.hex({ min: 8, max: 11 }));
  }
  nanoid(e2 = 21) {
    if (e2 = this.faker.helpers.rangeToNumber(e2), e2 <= 0)
      return "";
    let r3 = [{ value: () => this.alphanumeric(1), weight: 62 }, { value: () => this.faker.helpers.arrayElement(["_", "-"]), weight: 2 }], t2 = "";
    for (; t2.length < e2; ) {
      let a3 = this.faker.helpers.weightedArrayElement(r3);
      t2 += a3();
    }
    return t2;
  }
  symbol(e2 = 1) {
    return this.fromCharacters(["!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"], e2);
  }
};
var F2 = class {
  constructor(e2 = {}) {
    f2(this, "_defaultRefDate", () => /* @__PURE__ */ new Date());
    f2(this, "_randomizer");
    f2(this, "datatype", new K2(this));
    f2(this, "date", new $2(this));
    f2(this, "helpers", new B2(this));
    f2(this, "number", new H2(this));
    f2(this, "string", new Z2(this));
    let { randomizer: r3 = $e2() } = e2;
    this._randomizer = r3;
  }
  get defaultRefDate() {
    return this._defaultRefDate;
  }
  setDefaultRefDate(e2 = () => /* @__PURE__ */ new Date()) {
    typeof e2 == "function" ? this._defaultRefDate = e2 : this._defaultRefDate = () => new Date(e2);
  }
  seed(e2 = Math.ceil(Math.random() * Number.MAX_SAFE_INTEGER)) {
    return this._randomizer.seed(e2), e2;
  }
};
var Yt = new F2();
function Oe2(i4) {
  let e2 = {};
  for (let r3 of i4)
    for (let t2 in r3) {
      let a3 = r3[t2];
      e2[t2] === void 0 ? e2[t2] = { ...a3 } : e2[t2] = { ...a3, ...e2[t2] };
    }
  return e2;
}
var J2 = class extends b2 {
  dog() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.dog);
  }
  cat() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.cat);
  }
  snake() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.snake);
  }
  bear() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.bear);
  }
  lion() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.lion);
  }
  cetacean() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.cetacean);
  }
  horse() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.horse);
  }
  bird() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.bird);
  }
  cow() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.cow);
  }
  fish() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.fish);
  }
  crocodilia() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.crocodilia);
  }
  insect() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.insect);
  }
  rabbit() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.rabbit);
  }
  rodent() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.rodent);
  }
  type() {
    return this.faker.helpers.arrayElement(this.faker.definitions.animal.type);
  }
};
var Dr = { 0: [[1999999, 2], [2279999, 3], [2289999, 4], [3689999, 3], [3699999, 4], [6389999, 3], [6397999, 4], [6399999, 7], [6449999, 3], [6459999, 7], [6479999, 3], [6489999, 7], [6549999, 3], [6559999, 4], [6999999, 3], [8499999, 4], [8999999, 5], [9499999, 6], [9999999, 7]], 1: [[99999, 3], [299999, 2], [349999, 3], [399999, 4], [499999, 3], [699999, 2], [999999, 4], [3979999, 3], [5499999, 4], [6499999, 5], [6799999, 4], [6859999, 5], [7139999, 4], [7169999, 3], [7319999, 4], [7399999, 7], [7749999, 5], [7753999, 7], [7763999, 5], [7764999, 7], [7769999, 5], [7782999, 7], [7899999, 5], [7999999, 4], [8004999, 5], [8049999, 5], [8379999, 5], [8384999, 7], [8671999, 5], [8675999, 4], [8697999, 5], [9159999, 6], [9165059, 7], [9168699, 6], [9169079, 7], [9195999, 6], [9196549, 7], [9729999, 6], [9877999, 4], [9911499, 6], [9911999, 7], [9989899, 6], [9999999, 7]] };
var X2 = class extends b2 {
  department() {
    return this.faker.helpers.arrayElement(this.faker.definitions.commerce.department);
  }
  productName() {
    return `${this.productAdjective()} ${this.productMaterial()} ${this.product()}`;
  }
  price(e2 = {}, r3 = 1e3, t2 = 2, a3 = "") {
    typeof e2 == "number" && (m2({ deprecated: "faker.commerce.price(min, max, dec, symbol)", proposed: "faker.commerce.price({ min, max, dec, symbol })", since: "8.0", until: "9.0" }), e2 = { min: e2, dec: t2, max: r3, symbol: a3 });
    let { dec: n3 = 2, max: s3 = 1e3, min: o2 = 1, symbol: l3 = "" } = e2;
    if (o2 < 0 || s3 < 0)
      return `${l3}0`;
    let c3 = this.faker.number.int({ min: o2, max: s3 });
    return l3 + c3.toFixed(n3);
  }
  productAdjective() {
    return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.adjective);
  }
  productMaterial() {
    return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.material);
  }
  product() {
    return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.product);
  }
  productDescription() {
    return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_description);
  }
  isbn(e2 = {}) {
    var A3;
    typeof e2 == "number" && (e2 = { variant: e2 });
    let { variant: r3 = 13, separator: t2 = "-" } = e2, a3 = "978", [n3, s3] = this.faker.helpers.objectEntry(Dr), o2 = this.faker.string.numeric(8), l3 = Number.parseInt(o2.slice(0, -1)), c3 = (A3 = s3.find(([x3]) => l3 <= x3)) == null ? void 0 : A3[1];
    if (!c3)
      throw new u2(`Unable to find a registrant length for the group ${n3}`);
    let p3 = o2.slice(0, c3), h3 = o2.slice(c3), d3 = [a3, n3, p3, h3];
    r3 === 10 && d3.shift();
    let g3 = d3.join(""), k3 = 0;
    for (let x3 = 0; x3 < r3 - 1; x3++) {
      let T3 = r3 === 10 ? x3 + 1 : x3 % 2 ? 3 : 1;
      k3 += T3 * Number.parseInt(g3[x3]);
    }
    return k3 = r3 === 10 ? k3 % 11 : (10 - k3 % 10) % 10, d3.push(k3 === 10 ? "X" : k3.toString()), d3.join(t2);
  }
};
var q2 = class extends b2 {
  suffixes() {
    return m2({ deprecated: "faker.company.suffixes", proposed: "faker.company.name", since: "8.0", until: "9.0" }), [...this.faker.definitions.company.suffix];
  }
  name() {
    return this.faker.helpers.fake(this.faker.definitions.company.name_pattern);
  }
  companySuffix() {
    return m2({ deprecated: "faker.company.companySuffix", proposed: "faker.company.name", since: "8.0", until: "9.0" }), this.faker.helpers.arrayElement(this.suffixes());
  }
  catchPhrase() {
    return [this.catchPhraseAdjective(), this.catchPhraseDescriptor(), this.catchPhraseNoun()].join(" ");
  }
  bs() {
    return m2({ deprecated: "faker.company.bs", proposed: "faker.company.buzzPhrase", since: "8.0", until: "9.0" }), this.buzzPhrase();
  }
  buzzPhrase() {
    return [this.buzzVerb(), this.buzzAdjective(), this.buzzNoun()].join(" ");
  }
  catchPhraseAdjective() {
    return this.faker.helpers.arrayElement(this.faker.definitions.company.adjective);
  }
  catchPhraseDescriptor() {
    return this.faker.helpers.arrayElement(this.faker.definitions.company.descriptor);
  }
  catchPhraseNoun() {
    return this.faker.helpers.arrayElement(this.faker.definitions.company.noun);
  }
  bsAdjective() {
    return m2({ deprecated: "faker.company.bsAdjective", proposed: "faker.company.buzzAdjective", since: "8.0", until: "9.0" }), this.buzzAdjective();
  }
  buzzAdjective() {
    return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_adjective);
  }
  bsBuzz() {
    return m2({ deprecated: "faker.company.bsBuzz", proposed: "faker.company.buzzVerb", since: "8.0", until: "9.0" }), this.buzzVerb();
  }
  buzzVerb() {
    return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_verb);
  }
  bsNoun() {
    return m2({ deprecated: "faker.company.bsNoun", proposed: "faker.company.buzzNoun", since: "8.0", until: "9.0" }), this.buzzNoun();
  }
  buzzNoun() {
    return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_noun);
  }
};
var Q2 = class extends b2 {
  column() {
    return this.faker.helpers.arrayElement(this.faker.definitions.database.column);
  }
  type() {
    return this.faker.helpers.arrayElement(this.faker.definitions.database.type);
  }
  collation() {
    return this.faker.helpers.arrayElement(this.faker.definitions.database.collation);
  }
  engine() {
    return this.faker.helpers.arrayElement(this.faker.definitions.database.engine);
  }
  mongodbObjectId() {
    return this.faker.string.hexadecimal({ length: 24, casing: "lower", prefix: "" });
  }
};
var Rr = { alpha: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"], formats: [{ country: "AL", total: 28, bban: [{ type: "n", count: 8 }, { type: "c", count: 16 }], format: "ALkk bbbs sssx cccc cccc cccc cccc" }, { country: "AD", total: 24, bban: [{ type: "n", count: 8 }, { type: "c", count: 12 }], format: "ADkk bbbb ssss cccc cccc cccc" }, { country: "AT", total: 20, bban: [{ type: "n", count: 5 }, { type: "n", count: 11 }], format: "ATkk bbbb bccc cccc cccc" }, { country: "AZ", total: 28, bban: [{ type: "a", count: 4 }, { type: "n", count: 20 }], format: "AZkk bbbb cccc cccc cccc cccc cccc" }, { country: "BH", total: 22, bban: [{ type: "a", count: 4 }, { type: "c", count: 14 }], format: "BHkk bbbb cccc cccc cccc cc" }, { country: "BE", total: 16, bban: [{ type: "n", count: 3 }, { type: "n", count: 9 }], format: "BEkk bbbc cccc ccxx" }, { country: "BA", total: 20, bban: [{ type: "n", count: 6 }, { type: "n", count: 10 }], format: "BAkk bbbs sscc cccc ccxx" }, { country: "BR", total: 29, bban: [{ type: "n", count: 13 }, { type: "n", count: 10 }, { type: "a", count: 1 }, { type: "c", count: 1 }], format: "BRkk bbbb bbbb ssss sccc cccc ccct n" }, { country: "BG", total: 22, bban: [{ type: "a", count: 4 }, { type: "n", count: 6 }, { type: "c", count: 8 }], format: "BGkk bbbb ssss ddcc cccc cc" }, { country: "CR", total: 22, bban: [{ type: "n", count: 1 }, { type: "n", count: 3 }, { type: "n", count: 14 }], format: "CRkk xbbb cccc cccc cccc cc" }, { country: "HR", total: 21, bban: [{ type: "n", count: 7 }, { type: "n", count: 10 }], format: "HRkk bbbb bbbc cccc cccc c" }, { country: "CY", total: 28, bban: [{ type: "n", count: 8 }, { type: "c", count: 16 }], format: "CYkk bbbs ssss cccc cccc cccc cccc" }, { country: "CZ", total: 24, bban: [{ type: "n", count: 10 }, { type: "n", count: 10 }], format: "CZkk bbbb ssss sscc cccc cccc" }, { country: "DK", total: 18, bban: [{ type: "n", count: 4 }, { type: "n", count: 10 }], format: "DKkk bbbb cccc cccc cc" }, { country: "DO", total: 28, bban: [{ type: "a", count: 4 }, { type: "n", count: 20 }], format: "DOkk bbbb cccc cccc cccc cccc cccc" }, { country: "TL", total: 23, bban: [{ type: "n", count: 3 }, { type: "n", count: 16 }], format: "TLkk bbbc cccc cccc cccc cxx" }, { country: "EE", total: 20, bban: [{ type: "n", count: 4 }, { type: "n", count: 12 }], format: "EEkk bbss cccc cccc cccx" }, { country: "FO", total: 18, bban: [{ type: "n", count: 4 }, { type: "n", count: 10 }], format: "FOkk bbbb cccc cccc cx" }, { country: "FI", total: 18, bban: [{ type: "n", count: 6 }, { type: "n", count: 8 }], format: "FIkk bbbb bbcc cccc cx" }, { country: "FR", total: 27, bban: [{ type: "n", count: 10 }, { type: "c", count: 11 }, { type: "n", count: 2 }], format: "FRkk bbbb bggg ggcc cccc cccc cxx" }, { country: "GE", total: 22, bban: [{ type: "a", count: 2 }, { type: "n", count: 16 }], format: "GEkk bbcc cccc cccc cccc cc" }, { country: "DE", total: 22, bban: [{ type: "n", count: 8 }, { type: "n", count: 10 }], format: "DEkk bbbb bbbb cccc cccc cc" }, { country: "GI", total: 23, bban: [{ type: "a", count: 4 }, { type: "c", count: 15 }], format: "GIkk bbbb cccc cccc cccc ccc" }, { country: "GR", total: 27, bban: [{ type: "n", count: 7 }, { type: "c", count: 16 }], format: "GRkk bbbs sssc cccc cccc cccc ccc" }, { country: "GL", total: 18, bban: [{ type: "n", count: 4 }, { type: "n", count: 10 }], format: "GLkk bbbb cccc cccc cc" }, { country: "GT", total: 28, bban: [{ type: "c", count: 4 }, { type: "c", count: 4 }, { type: "c", count: 16 }], format: "GTkk bbbb mmtt cccc cccc cccc cccc" }, { country: "HU", total: 28, bban: [{ type: "n", count: 8 }, { type: "n", count: 16 }], format: "HUkk bbbs sssk cccc cccc cccc cccx" }, { country: "IS", total: 26, bban: [{ type: "n", count: 6 }, { type: "n", count: 16 }], format: "ISkk bbbb sscc cccc iiii iiii ii" }, { country: "IE", total: 22, bban: [{ type: "c", count: 4 }, { type: "n", count: 6 }, { type: "n", count: 8 }], format: "IEkk aaaa bbbb bbcc cccc cc" }, { country: "IL", total: 23, bban: [{ type: "n", count: 6 }, { type: "n", count: 13 }], format: "ILkk bbbn nncc cccc cccc ccc" }, { country: "IT", total: 27, bban: [{ type: "a", count: 1 }, { type: "n", count: 10 }, { type: "c", count: 12 }], format: "ITkk xaaa aabb bbbc cccc cccc ccc" }, { country: "JO", total: 30, bban: [{ type: "a", count: 4 }, { type: "n", count: 4 }, { type: "n", count: 18 }], format: "JOkk bbbb nnnn cccc cccc cccc cccc cc" }, { country: "KZ", total: 20, bban: [{ type: "n", count: 3 }, { type: "c", count: 13 }], format: "KZkk bbbc cccc cccc cccc" }, { country: "XK", total: 20, bban: [{ type: "n", count: 4 }, { type: "n", count: 12 }], format: "XKkk bbbb cccc cccc cccc" }, { country: "KW", total: 30, bban: [{ type: "a", count: 4 }, { type: "c", count: 22 }], format: "KWkk bbbb cccc cccc cccc cccc cccc cc" }, { country: "LV", total: 21, bban: [{ type: "a", count: 4 }, { type: "c", count: 13 }], format: "LVkk bbbb cccc cccc cccc c" }, { country: "LB", total: 28, bban: [{ type: "n", count: 4 }, { type: "c", count: 20 }], format: "LBkk bbbb cccc cccc cccc cccc cccc" }, { country: "LI", total: 21, bban: [{ type: "n", count: 5 }, { type: "c", count: 12 }], format: "LIkk bbbb bccc cccc cccc c" }, { country: "LT", total: 20, bban: [{ type: "n", count: 5 }, { type: "n", count: 11 }], format: "LTkk bbbb bccc cccc cccc" }, { country: "LU", total: 20, bban: [{ type: "n", count: 3 }, { type: "c", count: 13 }], format: "LUkk bbbc cccc cccc cccc" }, { country: "MK", total: 19, bban: [{ type: "n", count: 3 }, { type: "c", count: 10 }, { type: "n", count: 2 }], format: "MKkk bbbc cccc cccc cxx" }, { country: "MT", total: 31, bban: [{ type: "a", count: 4 }, { type: "n", count: 5 }, { type: "c", count: 18 }], format: "MTkk bbbb ssss sccc cccc cccc cccc ccc" }, { country: "MR", total: 27, bban: [{ type: "n", count: 10 }, { type: "n", count: 13 }], format: "MRkk bbbb bsss sscc cccc cccc cxx" }, { country: "MU", total: 30, bban: [{ type: "a", count: 4 }, { type: "n", count: 4 }, { type: "n", count: 15 }, { type: "a", count: 3 }], format: "MUkk bbbb bbss cccc cccc cccc 000d dd" }, { country: "MC", total: 27, bban: [{ type: "n", count: 10 }, { type: "c", count: 11 }, { type: "n", count: 2 }], format: "MCkk bbbb bsss sscc cccc cccc cxx" }, { country: "MD", total: 24, bban: [{ type: "c", count: 2 }, { type: "c", count: 18 }], format: "MDkk bbcc cccc cccc cccc cccc" }, { country: "ME", total: 22, bban: [{ type: "n", count: 3 }, { type: "n", count: 15 }], format: "MEkk bbbc cccc cccc cccc xx" }, { country: "NL", total: 18, bban: [{ type: "a", count: 4 }, { type: "n", count: 10 }], format: "NLkk bbbb cccc cccc cc" }, { country: "NO", total: 15, bban: [{ type: "n", count: 4 }, { type: "n", count: 7 }], format: "NOkk bbbb cccc ccx" }, { country: "PK", total: 24, bban: [{ type: "a", count: 4 }, { type: "n", count: 16 }], format: "PKkk bbbb cccc cccc cccc cccc" }, { country: "PS", total: 29, bban: [{ type: "c", count: 4 }, { type: "n", count: 9 }, { type: "n", count: 12 }], format: "PSkk bbbb xxxx xxxx xccc cccc cccc c" }, { country: "PL", total: 28, bban: [{ type: "n", count: 8 }, { type: "n", count: 16 }], format: "PLkk bbbs sssx cccc cccc cccc cccc" }, { country: "PT", total: 25, bban: [{ type: "n", count: 8 }, { type: "n", count: 13 }], format: "PTkk bbbb ssss cccc cccc cccx x" }, { country: "QA", total: 29, bban: [{ type: "a", count: 4 }, { type: "c", count: 21 }], format: "QAkk bbbb cccc cccc cccc cccc cccc c" }, { country: "RO", total: 24, bban: [{ type: "a", count: 4 }, { type: "c", count: 16 }], format: "ROkk bbbb cccc cccc cccc cccc" }, { country: "SM", total: 27, bban: [{ type: "a", count: 1 }, { type: "n", count: 10 }, { type: "c", count: 12 }], format: "SMkk xaaa aabb bbbc cccc cccc ccc" }, { country: "SA", total: 24, bban: [{ type: "n", count: 2 }, { type: "c", count: 18 }], format: "SAkk bbcc cccc cccc cccc cccc" }, { country: "RS", total: 22, bban: [{ type: "n", count: 3 }, { type: "n", count: 15 }], format: "RSkk bbbc cccc cccc cccc xx" }, { country: "SK", total: 24, bban: [{ type: "n", count: 10 }, { type: "n", count: 10 }], format: "SKkk bbbb ssss sscc cccc cccc" }, { country: "SI", total: 19, bban: [{ type: "n", count: 5 }, { type: "n", count: 10 }], format: "SIkk bbss sccc cccc cxx" }, { country: "ES", total: 24, bban: [{ type: "n", count: 10 }, { type: "n", count: 10 }], format: "ESkk bbbb gggg xxcc cccc cccc" }, { country: "SE", total: 24, bban: [{ type: "n", count: 3 }, { type: "n", count: 17 }], format: "SEkk bbbc cccc cccc cccc cccc" }, { country: "CH", total: 21, bban: [{ type: "n", count: 5 }, { type: "c", count: 12 }], format: "CHkk bbbb bccc cccc cccc c" }, { country: "TN", total: 24, bban: [{ type: "n", count: 5 }, { type: "n", count: 15 }], format: "TNkk bbss sccc cccc cccc cccc" }, { country: "TR", total: 26, bban: [{ type: "n", count: 5 }, { type: "n", count: 1 }, { type: "n", count: 16 }], format: "TRkk bbbb bxcc cccc cccc cccc cc" }, { country: "AE", total: 23, bban: [{ type: "n", count: 3 }, { type: "n", count: 16 }], format: "AEkk bbbc cccc cccc cccc ccc" }, { country: "GB", total: 22, bban: [{ type: "a", count: 4 }, { type: "n", count: 6 }, { type: "n", count: 8 }], format: "GBkk bbbb ssss sscc cccc cc" }, { country: "VG", total: 24, bban: [{ type: "a", count: 4 }, { type: "n", count: 16 }], format: "VGkk bbbb cccc cccc cccc cccc" }], iso3166: ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "XK", "YE", "YT", "ZA", "ZM", "ZW"], mod97: (i4) => {
  let e2 = 0;
  for (let r3 of i4)
    e2 = (e2 * 10 + +r3) % 97;
  return e2;
}, pattern10: ["01", "02", "03", "04", "05", "06", "07", "08", "09"], pattern100: ["001", "002", "003", "004", "005", "006", "007", "008", "009"], toDigitString: (i4) => i4.replace(/[A-Z]/gi, (e2) => {
  var r3;
  return String(((r3 = e2.toUpperCase().codePointAt(0)) != null ? r3 : Number.NaN) - 55);
}) };
var C2 = Rr;
function vr(i4) {
  let e2 = "";
  for (let r3 = 0; r3 < i4.length; r3 += 4)
    e2 += `${i4.substring(r3, r3 + 4)} `;
  return e2.trimEnd();
}
var ee2 = class extends b2 {
  account(e2) {
    return m2({ deprecated: "faker.finance.account", proposed: "faker.finance.accountNumber", since: "8.0", until: "9.0" }), this.accountNumber(e2);
  }
  accountNumber(e2 = {}) {
    typeof e2 == "number" && (e2 = { length: e2 });
    let { length: r3 = 8 } = e2;
    return this.faker.string.numeric({ length: r3, allowLeadingZeros: true });
  }
  accountName() {
    return [this.faker.helpers.arrayElement(this.faker.definitions.finance.account_type), "Account"].join(" ");
  }
  routingNumber() {
    let e2 = this.faker.string.numeric({ length: 8, allowLeadingZeros: true }), r3 = 0;
    for (let t2 = 0; t2 < e2.length; t2 += 3)
      r3 += Number(e2[t2]) * 3, r3 += Number(e2[t2 + 1]) * 7, r3 += Number(e2[t2 + 2]) || 0;
    return `${e2}${Math.ceil(r3 / 10) * 10 - r3}`;
  }
  mask(e2, r3, t2) {
    return m2({ deprecated: "faker.finance.mask", proposed: "faker.finance.maskedNumber", since: "8.0", until: "9.0" }), this.maskedNumber({ length: e2, parens: r3, ellipsis: t2 });
  }
  maskedNumber(e2 = {}) {
    typeof e2 == "number" && (e2 = { length: e2 });
    let { ellipsis: r3 = true, length: t2 = 4, parens: a3 = true } = e2, n3 = this.faker.string.numeric({ length: t2 });
    return r3 && (n3 = `...${n3}`), a3 && (n3 = `(${n3})`), n3;
  }
  amount(e2 = {}, r3 = 1e3, t2 = 2, a3 = "", n3 = false) {
    typeof e2 == "number" && (m2({ deprecated: "faker.finance.amount(min, max, dec, symbol, autoFormat)", proposed: "faker.finance.amount({ min, max, dec, symbol, autoFormat })", since: "8.0", until: "9.0" }), e2 = { min: e2 });
    let { autoFormat: s3 = n3, dec: o2 = t2, max: l3 = r3, min: c3 = 0, symbol: p3 = a3 } = e2, h3 = this.faker.number.float({ max: l3, min: c3, fractionDigits: o2 }), d3 = s3 ? h3.toLocaleString(void 0, { minimumFractionDigits: o2 }) : h3.toFixed(o2);
    return p3 + d3;
  }
  transactionType() {
    return this.faker.helpers.arrayElement(this.faker.definitions.finance.transaction_type);
  }
  currency() {
    return this.faker.helpers.arrayElement(this.faker.definitions.finance.currency);
  }
  currencyCode() {
    return this.currency().code;
  }
  currencyName() {
    return this.currency().name;
  }
  currencySymbol() {
    let e2;
    do
      e2 = this.currency().symbol;
    while (e2.length === 0);
    return e2;
  }
  bitcoinAddress() {
    let e2 = this.faker.number.int({ min: 25, max: 39 }), r3 = this.faker.helpers.arrayElement(["1", "3"]);
    return r3 += this.faker.string.alphanumeric({ length: e2, casing: "mixed", exclude: "0OIl" }), r3;
  }
  litecoinAddress() {
    let e2 = this.faker.number.int({ min: 26, max: 33 });
    return this.faker.string.fromCharacters("LM3") + this.faker.string.fromCharacters("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", e2 - 1);
  }
  creditCardNumber(e2 = {}) {
    typeof e2 == "string" && (e2 = { issuer: e2 });
    let { issuer: r3 = "" } = e2, t2, a3 = this.faker.definitions.finance.credit_card, n3 = r3.toLowerCase();
    if (n3 in a3)
      t2 = this.faker.helpers.arrayElement(a3[n3]);
    else if (r3.includes("#"))
      t2 = r3;
    else {
      let s3 = this.faker.helpers.objectValue(a3);
      t2 = this.faker.helpers.arrayElement(s3);
    }
    return t2 = t2.replace(/\//g, ""), this.faker.helpers.replaceCreditCardSymbols(t2);
  }
  creditCardCVV() {
    return this.faker.string.numeric({ length: 3, allowLeadingZeros: true });
  }
  creditCardIssuer() {
    return this.faker.helpers.objectKey(this.faker.definitions.finance.credit_card);
  }
  pin(e2 = {}) {
    typeof e2 == "number" && (e2 = { length: e2 });
    let { length: r3 = 4 } = e2;
    if (r3 < 1)
      throw new u2("minimum length is 1");
    return this.faker.string.numeric({ length: r3, allowLeadingZeros: true });
  }
  ethereumAddress() {
    return this.faker.string.hexadecimal({ length: 40, casing: "lower" });
  }
  iban(e2 = {}, r3) {
    typeof e2 == "boolean" && (m2({ deprecated: "faker.finance.iban(formatted, countryCode)", proposed: "faker.finance.iban({ formatted, countryCode })", since: "8.0", until: "9.0" }), e2 = { formatted: e2 });
    let { countryCode: t2 = r3, formatted: a3 = false } = e2, n3 = t2 ? C2.formats.find((p3) => p3.country === t2) : this.faker.helpers.arrayElement(C2.formats);
    if (!n3)
      throw new u2(`Country code ${t2} not supported.`);
    let s3 = "", o2 = 0;
    for (let p3 of n3.bban) {
      let h3 = p3.count;
      for (o2 += p3.count; h3 > 0; )
        p3.type === "a" ? s3 += this.faker.helpers.arrayElement(C2.alpha) : p3.type === "c" ? this.faker.datatype.boolean(0.8) ? s3 += this.faker.number.int(9) : s3 += this.faker.helpers.arrayElement(C2.alpha) : h3 >= 3 && this.faker.datatype.boolean(0.3) ? this.faker.datatype.boolean() ? (s3 += this.faker.helpers.arrayElement(C2.pattern100), h3 -= 2) : (s3 += this.faker.helpers.arrayElement(C2.pattern10), h3--) : s3 += this.faker.number.int(9), h3--;
      s3 = s3.substring(0, o2);
    }
    let l3 = 98 - C2.mod97(C2.toDigitString(`${s3}${n3.country}00`));
    l3 < 10 && (l3 = `0${l3}`);
    let c3 = `${n3.country}${l3}${s3}`;
    return a3 ? vr(c3) : c3;
  }
  bic(e2 = {}) {
    let { includeBranchCode: r3 = this.faker.datatype.boolean() } = e2, t2 = this.faker.string.alpha({ length: 4, casing: "upper" }), a3 = this.faker.helpers.arrayElement(C2.iso3166), n3 = this.faker.string.alphanumeric({ length: 2, casing: "upper" }), s3 = r3 ? this.faker.datatype.boolean() ? this.faker.string.alphanumeric({ length: 3, casing: "upper" }) : "XXX" : "";
    return `${t2}${a3}${n3}${s3}`;
  }
  transactionDescription() {
    let e2 = this.amount(), r3 = this.faker.company.name(), t2 = this.transactionType(), a3 = this.accountNumber(), n3 = this.maskedNumber(), s3 = this.currencyCode();
    return `${t2} transaction at ${r3} using card ending with ***${n3} for ${s3} ${e2} in account ***${a3}`;
  }
};
var Lr = " ";
var re2 = class extends b2 {
  branch() {
    let e2 = this.faker.hacker.noun().replace(" ", "-"), r3 = this.faker.hacker.verb().replace(" ", "-");
    return `${e2}-${r3}`;
  }
  commitEntry(e2 = {}) {
    let { merge: r3 = this.faker.datatype.boolean({ probability: 0.2 }), eol: t2 = "CRLF", refDate: a3 } = e2, n3 = [`commit ${this.faker.git.commitSha()}`];
    r3 && n3.push(`Merge: ${this.commitSha({ length: 7 })} ${this.commitSha({ length: 7 })}`);
    let s3 = this.faker.person.firstName(), o2 = this.faker.person.lastName(), l3 = this.faker.person.fullName({ firstName: s3, lastName: o2 }), c3 = this.faker.internet.userName({ firstName: s3, lastName: o2 }), p3 = this.faker.helpers.arrayElement([l3, c3]), h3 = this.faker.internet.email({ firstName: s3, lastName: o2 });
    p3 = p3.replace(/^[.,:;"\\']|[<>\n]|[.,:;"\\']$/g, ""), n3.push(`Author: ${p3} <${h3}>`, `Date: ${this.commitDate({ refDate: a3 })}`, "", `${Lr.repeat(4)}${this.commitMessage()}`, "");
    let d3 = t2 === "CRLF" ? `\r
` : `
`;
    return n3.join(d3);
  }
  commitMessage() {
    return `${this.faker.hacker.verb()} ${this.faker.hacker.adjective()} ${this.faker.hacker.noun()}`;
  }
  commitDate(e2 = {}) {
    let { refDate: r3 = this.faker.defaultRefDate() } = e2, t2 = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], a3 = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], n3 = this.faker.date.recent({ days: 1, refDate: r3 }), s3 = t2[n3.getUTCDay()], o2 = a3[n3.getUTCMonth()], l3 = n3.getUTCDate(), c3 = n3.getUTCHours().toString().padStart(2, "0"), p3 = n3.getUTCMinutes().toString().padStart(2, "0"), h3 = n3.getUTCSeconds().toString().padStart(2, "0"), d3 = n3.getUTCFullYear(), g3 = this.faker.number.int({ min: -11, max: 12 }), k3 = Math.abs(g3).toString().padStart(2, "0"), A3 = "00", x3 = g3 >= 0 ? "+" : "-";
    return `${s3} ${o2} ${l3} ${c3}:${p3}:${h3} ${d3} ${x3}${k3}${A3}`;
  }
  commitSha(e2 = {}) {
    let { length: r3 = 40 } = e2;
    return this.faker.string.hexadecimal({ length: r3, casing: "lower", prefix: "" });
  }
  shortSha() {
    return m2({ deprecated: "faker.git.shortSha()", proposed: "faker.git.commitSha({ length: 7 })", since: "8.0", until: "9.0" }), this.commitSha({ length: 7 });
  }
};
var te2 = class extends b2 {
  abbreviation() {
    return this.faker.helpers.arrayElement(this.faker.definitions.hacker.abbreviation);
  }
  adjective() {
    return this.faker.helpers.arrayElement(this.faker.definitions.hacker.adjective);
  }
  noun() {
    return this.faker.helpers.arrayElement(this.faker.definitions.hacker.noun);
  }
  verb() {
    return this.faker.helpers.arrayElement(this.faker.definitions.hacker.verb);
  }
  ingverb() {
    return this.faker.helpers.arrayElement(this.faker.definitions.hacker.ingverb);
  }
  phrase() {
    let e2 = { abbreviation: this.abbreviation, adjective: this.adjective, ingverb: this.ingverb, noun: this.noun, verb: this.verb }, r3 = this.faker.helpers.arrayElement(this.faker.definitions.hacker.phrase);
    return this.faker.helpers.mustache(r3, e2);
  }
};
var ae2 = class {
  constructor(e2) {
    this.faker = e2;
  }
  image(e2, r3, t2, a3) {
    return m2({ deprecated: "faker.lorempicsum.image", proposed: "faker.image.urlPicsumPhotos", since: "8.0", until: "9.0" }), this.imageUrl(e2, r3, t2, a3);
  }
  imageGrayscale(e2, r3, t2) {
    return m2({ deprecated: "faker.lorempicsum.imageGrayscale", proposed: "faker.image.urlPicsumPhotos", since: "8.0", until: "9.0" }), this.imageUrl(e2, r3, t2);
  }
  imageBlurred(e2, r3, t2) {
    return m2({ deprecated: "faker.lorempicsum.imageBlurred", proposed: "faker.image.urlPicsumPhotos", since: "8.0", until: "9.0" }), this.imageUrl(e2, r3, void 0, t2);
  }
  imageRandomSeeded(e2, r3, t2, a3, n3) {
    return m2({ deprecated: "faker.lorempicsum.imageRandomSeeded", proposed: "faker.image.urlPicsumPhotos", since: "8.0", until: "9.0" }), this.imageUrl(e2, r3, t2, a3, n3);
  }
  imageUrl(e2, r3, t2, a3, n3) {
    m2({ deprecated: "faker.lorempicsum.imageUrl", proposed: "faker.image.urlPicsumPhotos", since: "8.0", until: "9.0" }), e2 = e2 || 640, r3 = r3 || 480;
    let s3 = "https://picsum.photos";
    return n3 && (s3 += `/seed/${n3}`), s3 += `/${e2}/${r3}`, t2 && a3 ? `${s3}?grayscale&blur=${a3}` : t2 ? `${s3}?grayscale` : a3 ? `${s3}?blur=${a3}` : s3;
  }
};
var ne2 = class i2 {
  constructor(e2) {
    this.faker = e2;
    for (let r3 of Object.getOwnPropertyNames(i2.prototype))
      r3 === "constructor" || typeof this[r3] != "function" || (this[r3] = this[r3].bind(this));
  }
  imageUrl(e2, r3, t2, a3, n3, s3) {
    m2({ deprecated: "faker.placeholder.imageUrl", proposed: "faker.image.urlPlaceholder", since: "8.0", until: "9.0" }), e2 = e2 || 640, r3 = r3 || e2;
    let o2 = "https://via.placeholder.com";
    if (o2 += `/${e2}x${r3}`, n3 != null && (o2 += `/${n3.replace("#", "").toUpperCase()}`, s3 != null && (o2 += `/${s3.replace("#", "").toUpperCase()}`)), a3 != null && (o2 += `.${a3}`), t2 != null) {
      let l3 = new URLSearchParams({ text: t2 });
      o2 += `?${l3.toString()}`;
    }
    return o2;
  }
  randomUrl(e2, r3, t2) {
    return m2({ deprecated: "faker.placeholder.randomUrl", proposed: "faker.image.urlPlaceholder", since: "8.0", until: "9.0" }), this.imageUrl(e2, r3, this.faker.lorem.word(), t2, this.faker.color.rgb({ casing: "upper", prefix: "" }), this.faker.color.rgb({ casing: "upper", prefix: "" }));
  }
};
var ie2 = class {
  constructor(e2) {
    this.faker = e2;
  }
  image(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.image", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(e2, r3, void 0, t2);
  }
  imageUrl(e2, r3, t2, a3) {
    m2({ deprecated: "faker.unsplash.imageUrl", proposed: "faker.image.url", since: "8.0", until: "9.0" }), e2 = e2 || 640, r3 = r3 || 480;
    let n3 = "https://source.unsplash.com";
    return t2 != null && (n3 += `/category/${t2}`), n3 += `/${e2}x${r3}`, a3 != null && /^([A-Za-z0-9].+,[A-Za-z0-9]+)$|^([A-Za-z0-9]+)$/.test(a3) && (n3 += `?${a3}`), n3;
  }
  food(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.food", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.faker.image.unsplash.imageUrl(e2, r3, "food", t2);
  }
  people(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.people", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.faker.image.unsplash.imageUrl(e2, r3, "people", t2);
  }
  nature(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.nature", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.faker.image.unsplash.imageUrl(e2, r3, "nature", t2);
  }
  technology(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.technology", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.faker.image.unsplash.imageUrl(e2, r3, "technology", t2);
  }
  objects(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.objects", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.faker.image.unsplash.imageUrl(e2, r3, "objects", t2);
  }
  buildings(e2, r3, t2) {
    return m2({ deprecated: "faker.unsplash.buildings", proposed: "faker.image.url", since: "8.0", until: "9.0" }), this.faker.image.unsplash.imageUrl(e2, r3, "buildings", t2);
  }
};
var se2 = class extends b2 {
  constructor(r3) {
    super(r3);
    f2(this, "unsplash");
    f2(this, "lorempicsum");
    f2(this, "placeholder");
    this.unsplash = new ie2(this.faker), this.lorempicsum = new ae2(this.faker), this.placeholder = new ne2(this.faker);
  }
  avatar() {
    return this.faker.helpers.arrayElement([this.avatarLegacy, this.avatarGitHub])();
  }
  avatarGitHub() {
    return `https://avatars.githubusercontent.com/u/${this.faker.number.int(1e8)}`;
  }
  avatarLegacy() {
    return `https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/${this.faker.number.int(1249)}.jpg`;
  }
  url(r3 = {}) {
    let { width: t2 = 640, height: a3 = 480 } = r3;
    return this.faker.helpers.arrayElement([this.urlLoremFlickr, this.urlPicsumPhotos])({ width: t2, height: a3 });
  }
  urlLoremFlickr(r3 = {}) {
    let { width: t2 = 640, height: a3 = 480, category: n3 } = r3;
    return `https://loremflickr.com/${t2}/${a3}${n3 == null ? "" : `/${n3}`}?lock=${this.faker.number.int()}`;
  }
  urlPicsumPhotos(r3 = {}) {
    let { width: t2 = 640, height: a3 = 480, grayscale: n3 = false, blur: s3 } = r3, o2 = `https://picsum.photos/seed/${this.faker.string.alphanumeric({ length: { min: 5, max: 10 } })}/${t2}/${a3}`, l3 = typeof s3 == "number" && s3 >= 1 && s3 <= 10;
    return (n3 || l3) && (o2 += "?", n3 && (o2 += "grayscale"), n3 && l3 && (o2 += "&"), l3 && (o2 += `blur=${s3}`)), o2;
  }
  urlPlaceholder(r3 = {}) {
    let { width: t2 = this.faker.number.int({ min: 1, max: 3999 }), height: a3 = this.faker.number.int({ min: 1, max: 3999 }), backgroundColor: n3 = this.faker.color.rgb({ format: "hex", prefix: "" }), textColor: s3 = this.faker.color.rgb({ format: "hex", prefix: "" }), format: o2 = this.faker.helpers.arrayElement(["gif", "jpeg", "jpg", "png", "webp"]), text: l3 = this.faker.lorem.words() } = r3, c3 = "https://via.placeholder.com";
    return c3 += `/${t2}`, c3 += `x${a3}`, c3 += `/${n3}`, c3 += `/${s3}`, c3 += `.${o2}`, c3 += `?text=${encodeURIComponent(l3)}`, c3;
  }
  dataUri(r3 = {}) {
    let { width: t2 = 640, height: a3 = 480, color: n3 = this.faker.color.rgb(), type: s3 = "svg-uri" } = r3, o2 = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="${t2}" height="${a3}"><rect width="100%" height="100%" fill="${n3}"/><text x="${t2 / 2}" y="${a3 / 2}" font-size="20" alignment-baseline="middle" text-anchor="middle" fill="white">${t2}x${a3}</text></svg>`;
    return s3 === "svg-uri" ? `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(o2)}` : `data:image/svg+xml;base64,${Buffer.from(o2).toString("base64")}`;
  }
  image(r3, t2, a3) {
    m2({ deprecated: "faker.image.image", proposed: "faker.image.url", since: "8.0", until: "9.0" });
    let n3 = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
    return this[this.faker.helpers.arrayElement(n3)](r3, t2, a3);
  }
  imageUrl(r3, t2, a3, n3) {
    m2({ deprecated: "faker.image.imageUrl", proposed: "faker.image.url", since: "8.0", until: "9.0" }), r3 = r3 || 640, t2 = t2 || 480;
    let s3 = `https://loremflickr.com/${r3}/${t2}`;
    return a3 != null && (s3 += `/${a3}`), n3 && (s3 += `?lock=${this.faker.number.int()}`), s3;
  }
  abstract(r3, t2, a3) {
    return m2({ deprecated: "faker.image.abstract", proposed: "faker.image.urlLoremFlickr({ category: 'abstract' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "abstract", a3);
  }
  animals(r3, t2, a3) {
    return m2({ deprecated: "faker.image.animals", proposed: "faker.image.urlLoremFlickr({ category: 'animals' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "animals", a3);
  }
  business(r3, t2, a3) {
    return m2({ deprecated: "faker.image.business", proposed: "faker.image.urlLoremFlickr({ category: 'business' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "business", a3);
  }
  cats(r3, t2, a3) {
    return m2({ deprecated: "faker.image.cats", proposed: "faker.image.urlLoremFlickr({ category: 'cats' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "cats", a3);
  }
  city(r3, t2, a3) {
    return m2({ deprecated: "faker.image.city", proposed: "faker.image.urlLoremFlickr({ category: 'city' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "city", a3);
  }
  food(r3, t2, a3) {
    return m2({ deprecated: "faker.image.food", proposed: "faker.image.urlLoremFlickr({ category: 'food' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "food", a3);
  }
  nightlife(r3, t2, a3) {
    return m2({ deprecated: "faker.image.nightlife", proposed: "faker.image.urlLoremFlickr({ category: 'nightlife' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "nightlife", a3);
  }
  fashion(r3, t2, a3) {
    return m2({ deprecated: "faker.image.fashion", proposed: "faker.image.urlLoremFlickr({ category: 'fashion' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "fashion", a3);
  }
  people(r3, t2, a3) {
    return m2({ deprecated: "faker.image.people", proposed: "faker.image.urlLoremFlickr({ category: 'people' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "people", a3);
  }
  nature(r3, t2, a3) {
    return m2({ deprecated: "faker.image.nature", proposed: "faker.image.urlLoremFlickr({ category: 'nature' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "nature", a3);
  }
  sports(r3, t2, a3) {
    return m2({ deprecated: "faker.image.sports", proposed: "faker.image.urlLoremFlickr({ category: 'sports' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "sports", a3);
  }
  technics(r3, t2, a3) {
    return m2({ deprecated: "faker.image.technics", proposed: "faker.image.urlLoremFlickr({ category: 'technics' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "technics", a3);
  }
  transport(r3, t2, a3) {
    return m2({ deprecated: "faker.image.transport", proposed: "faker.image.urlLoremFlickr({ category: 'transport' }) or faker.image.url", since: "8.0", until: "9.0" }), this.imageUrl(r3, t2, "transport", a3);
  }
};
var Pr = Object.fromEntries([["А", "A"], ["а", "a"], ["Б", "B"], ["б", "b"], ["В", "V"], ["в", "v"], ["Г", "G"], ["г", "g"], ["Д", "D"], ["д", "d"], ["ъе", "ye"], ["Ъе", "Ye"], ["ъЕ", "yE"], ["ЪЕ", "YE"], ["Е", "E"], ["е", "e"], ["Ё", "Yo"], ["ё", "yo"], ["Ж", "Zh"], ["ж", "zh"], ["З", "Z"], ["з", "z"], ["И", "I"], ["и", "i"], ["ый", "iy"], ["Ый", "Iy"], ["ЫЙ", "IY"], ["ыЙ", "iY"], ["Й", "Y"], ["й", "y"], ["К", "K"], ["к", "k"], ["Л", "L"], ["л", "l"], ["М", "M"], ["м", "m"], ["Н", "N"], ["н", "n"], ["О", "O"], ["о", "o"], ["П", "P"], ["п", "p"], ["Р", "R"], ["р", "r"], ["С", "S"], ["с", "s"], ["Т", "T"], ["т", "t"], ["У", "U"], ["у", "u"], ["Ф", "F"], ["ф", "f"], ["Х", "Kh"], ["х", "kh"], ["Ц", "Ts"], ["ц", "ts"], ["Ч", "Ch"], ["ч", "ch"], ["Ш", "Sh"], ["ш", "sh"], ["Щ", "Sch"], ["щ", "sch"], ["Ъ", ""], ["ъ", ""], ["Ы", "Y"], ["ы", "y"], ["Ь", ""], ["ь", ""], ["Э", "E"], ["э", "e"], ["Ю", "Yu"], ["ю", "yu"], ["Я", "Ya"], ["я", "ya"]]);
var $r = Object.fromEntries([["α", "a"], ["β", "v"], ["γ", "g"], ["δ", "d"], ["ε", "e"], ["ζ", "z"], ["η", "i"], ["θ", "th"], ["ι", "i"], ["κ", "k"], ["λ", "l"], ["μ", "m"], ["ν", "n"], ["ξ", "ks"], ["ο", "o"], ["π", "p"], ["ρ", "r"], ["σ", "s"], ["τ", "t"], ["υ", "y"], ["φ", "f"], ["χ", "x"], ["ψ", "ps"], ["ω", "o"], ["ά", "a"], ["έ", "e"], ["ί", "i"], ["ό", "o"], ["ύ", "y"], ["ή", "i"], ["ώ", "o"], ["ς", "s"], ["ϊ", "i"], ["ΰ", "y"], ["ϋ", "y"], ["ΐ", "i"], ["Α", "A"], ["Β", "B"], ["Γ", "G"], ["Δ", "D"], ["Ε", "E"], ["Ζ", "Z"], ["Η", "I"], ["Θ", "TH"], ["Ι", "I"], ["Κ", "K"], ["Λ", "L"], ["Μ", "M"], ["Ν", "N"], ["Ξ", "KS"], ["Ο", "O"], ["Π", "P"], ["Ρ", "R"], ["Σ", "S"], ["Τ", "T"], ["Υ", "Y"], ["Φ", "F"], ["Χ", "X"], ["Ψ", "PS"], ["Ω", "O"], ["Ά", "A"], ["Έ", "E"], ["Ί", "I"], ["Ό", "O"], ["Ύ", "Y"], ["Ή", "I"], ["Ώ", "O"], ["Ϊ", "I"], ["Ϋ", "Y"]]);
var Br = Object.fromEntries([["ء", "e"], ["آ", "a"], ["أ", "a"], ["ؤ", "w"], ["إ", "i"], ["ئ", "y"], ["ا", "a"], ["ب", "b"], ["ة", "t"], ["ت", "t"], ["ث", "th"], ["ج", "j"], ["ح", "h"], ["خ", "kh"], ["د", "d"], ["ذ", "dh"], ["ر", "r"], ["ز", "z"], ["س", "s"], ["ش", "sh"], ["ص", "s"], ["ض", "d"], ["ط", "t"], ["ظ", "z"], ["ع", "e"], ["غ", "gh"], ["ـ", "_"], ["ف", "f"], ["ق", "q"], ["ك", "k"], ["ل", "l"], ["م", "m"], ["ن", "n"], ["ه", "h"], ["و", "w"], ["ى", "a"], ["ي", "y"], ["َ‎", "a"], ["ُ", "u"], ["ِ‎", "i"]]);
var Fr = Object.fromEntries([["ա", "a"], ["Ա", "A"], ["բ", "b"], ["Բ", "B"], ["գ", "g"], ["Գ", "G"], ["դ", "d"], ["Դ", "D"], ["ե", "ye"], ["Ե", "Ye"], ["զ", "z"], ["Զ", "Z"], ["է", "e"], ["Է", "E"], ["ը", "y"], ["Ը", "Y"], ["թ", "t"], ["Թ", "T"], ["ժ", "zh"], ["Ժ", "Zh"], ["ի", "i"], ["Ի", "I"], ["լ", "l"], ["Լ", "L"], ["խ", "kh"], ["Խ", "Kh"], ["ծ", "ts"], ["Ծ", "Ts"], ["կ", "k"], ["Կ", "K"], ["հ", "h"], ["Հ", "H"], ["ձ", "dz"], ["Ձ", "Dz"], ["ղ", "gh"], ["Ղ", "Gh"], ["ճ", "tch"], ["Ճ", "Tch"], ["մ", "m"], ["Մ", "M"], ["յ", "y"], ["Յ", "Y"], ["ն", "n"], ["Ն", "N"], ["շ", "sh"], ["Շ", "Sh"], ["ո", "vo"], ["Ո", "Vo"], ["չ", "ch"], ["Չ", "Ch"], ["պ", "p"], ["Պ", "P"], ["ջ", "j"], ["Ջ", "J"], ["ռ", "r"], ["Ռ", "R"], ["ս", "s"], ["Ս", "S"], ["վ", "v"], ["Վ", "V"], ["տ", "t"], ["Տ", "T"], ["ր", "r"], ["Ր", "R"], ["ց", "c"], ["Ց", "C"], ["ու", "u"], ["ՈՒ", "U"], ["Ու", "U"], ["փ", "p"], ["Փ", "P"], ["ք", "q"], ["Ք", "Q"], ["օ", "o"], ["Օ", "O"], ["ֆ", "f"], ["Ֆ", "F"], ["և", "yev"]]);
var Ir = Object.fromEntries([["چ", "ch"], ["ک", "k"], ["گ", "g"], ["پ", "p"], ["ژ", "zh"], ["ی", "y"]]);
var we2 = { ...Pr, ...$r, ...Br, ...Ir, ...Fr };
function Ke2(i4) {
  let e2 = () => i4.helpers.arrayElement(["AB", "AF", "AN", "AR", "AS", "AZ", "BE", "BG", "BN", "BO", "BR", "BS", "CA", "CE", "CO", "CS", "CU", "CY", "DA", "DE", "EL", "EN", "EO", "ES", "ET", "EU", "FA", "FI", "FJ", "FO", "FR", "FY", "GA", "GD", "GL", "GV", "HE", "HI", "HR", "HT", "HU", "HY", "ID", "IS", "IT", "JA", "JV", "KA", "KG", "KO", "KU", "KW", "KY", "LA", "LB", "LI", "LN", "LT", "LV", "MG", "MK", "MN", "MO", "MS", "MT", "MY", "NB", "NE", "NL", "NN", "NO", "OC", "PL", "PT", "RM", "RO", "RU", "SC", "SE", "SK", "SL", "SO", "SQ", "SR", "SV", "SW", "TK", "TR", "TY", "UK", "UR", "UZ", "VI", "VO", "YI", "ZH"]), r3 = () => {
    let c3 = { chrome: ["win", "mac", "lin"], firefox: ["win", "mac", "lin"], opera: ["win", "mac", "lin"], safari: ["win", "mac"], iexplorer: ["win"] }, p3 = i4.helpers.objectKey(c3), h3 = i4.helpers.arrayElement(c3[p3]);
    return [p3, h3];
  }, t2 = (c3) => i4.helpers.arrayElement({ lin: ["i686", "x86_64"], mac: ["Intel", "PPC", "U; Intel", "U; PPC"], win: ["", "WOW64", "Win64; x64"] }[c3]), a3 = (c3) => {
    let p3 = "";
    for (let h3 = 0; h3 < c3; h3++)
      p3 += `.${i4.string.numeric({ allowLeadingZeros: true })}`;
    return p3;
  }, n3 = { net() {
    return [i4.number.int({ min: 1, max: 4 }), i4.number.int(9), i4.number.int({ min: 1e4, max: 99999 }), i4.number.int(9)].join(".");
  }, nt() {
    return [i4.number.int({ min: 5, max: 6 }), i4.number.int(3)].join(".");
  }, ie() {
    return i4.number.int({ min: 7, max: 11 });
  }, trident() {
    return [i4.number.int({ min: 3, max: 7 }), i4.number.int(1)].join(".");
  }, osx(c3) {
    return [10, i4.number.int({ min: 5, max: 10 }), i4.number.int(9)].join(c3 || ".");
  }, chrome() {
    return [i4.number.int({ min: 13, max: 39 }), 0, i4.number.int({ min: 800, max: 899 }), 0].join(".");
  }, presto() {
    return `2.9.${i4.number.int({ min: 160, max: 190 })}`;
  }, presto2() {
    return `${i4.number.int({ min: 10, max: 12 })}.00`;
  }, safari() {
    return [i4.number.int({ min: 531, max: 538 }), i4.number.int(2), i4.number.int(2)].join(".");
  } }, s3 = { firefox(c3) {
    let p3 = `${i4.number.int({ min: 5, max: 15 })}${a3(2)}`, h3 = `Gecko/20100101 Firefox/${p3}`, d3 = t2(c3);
    return `Mozilla/5.0 ${c3 === "win" ? `(Windows NT ${n3.nt()}${d3 ? `; ${d3}` : ""}` : c3 === "mac" ? `(Macintosh; ${d3} Mac OS X ${n3.osx()}` : `(X11; Linux ${d3}`}; rv:${p3.slice(0, -2)}) ${h3}`;
  }, iexplorer() {
    let c3 = n3.ie();
    return c3 >= 11 ? `Mozilla/5.0 (Windows NT 6.${i4.number.int({ min: 1, max: 3 })}; Trident/7.0; ${i4.datatype.boolean() ? "Touch; " : ""}rv:11.0) like Gecko` : `Mozilla/5.0 (compatible; MSIE ${c3}.0; Windows NT ${n3.nt()}; Trident/${n3.trident()}${i4.datatype.boolean() ? `; .NET CLR ${n3.net()}` : ""})`;
  }, opera(c3) {
    let p3 = ` Presto/${n3.presto()} Version/${n3.presto2()})`, h3 = c3 === "win" ? `(Windows NT ${n3.nt()}; U; ${e2()}${p3}` : c3 === "lin" ? `(X11; Linux ${t2(c3)}; U; ${e2()}${p3}` : `(Macintosh; Intel Mac OS X ${n3.osx()} U; ${e2()} Presto/${n3.presto()} Version/${n3.presto2()})`;
    return `Opera/${i4.number.int({ min: 9, max: 14 })}.${i4.number.int(99)} ${h3}`;
  }, safari(c3) {
    let p3 = n3.safari(), h3 = `${i4.number.int({ min: 4, max: 7 })}.${i4.number.int(1)}.${i4.number.int(10)}`;
    return `Mozilla/5.0 ${c3 === "mac" ? `(Macintosh; ${t2("mac")} Mac OS X ${n3.osx("_")} rv:${i4.number.int({ min: 2, max: 6 })}.0; ${e2()}) ` : `(Windows; U; Windows NT ${n3.nt()})`}AppleWebKit/${p3} (KHTML, like Gecko) Version/${h3} Safari/${p3}`;
  }, chrome(c3) {
    let p3 = n3.safari();
    return `Mozilla/5.0 ${c3 === "mac" ? `(Macintosh; ${t2("mac")} Mac OS X ${n3.osx("_")}) ` : c3 === "win" ? `(Windows; U; Windows NT ${n3.nt()})` : `(X11; Linux ${t2(c3)}`} AppleWebKit/${p3} (KHTML, like Gecko) Chrome/${n3.chrome()} Safari/${p3}`;
  } }, [o2, l3] = r3();
  return s3[o2](l3);
}
var oe2 = class extends b2 {
  avatar() {
    return m2({ deprecated: "faker.internet.avatar()", proposed: "faker.image.avatarLegacy() or faker.image.avatar()", since: "8.4", until: "9.0" }), this.faker.image.avatarLegacy();
  }
  email(e2 = {}, r3, t2, a3) {
    var p3;
    (typeof e2 == "string" || r3 != null || t2 != null || a3 != null) && m2({ deprecated: "faker.internet.email(firstName, lastName, provider, options)", proposed: "faker.internet.email({ firstName, lastName, provider, ... })", since: "8.0", until: "9.0" }), typeof e2 == "string" && (e2 = { firstName: e2 });
    let { firstName: n3, lastName: s3 = r3, provider: o2 = t2 != null ? t2 : this.faker.helpers.arrayElement(this.faker.definitions.internet.free_email), allowSpecialCharacters: l3 = (p3 = a3 == null ? void 0 : a3.allowSpecialCharacters) != null ? p3 : false } = e2, c3 = this.userName({ firstName: n3, lastName: s3 });
    if (c3 = c3.replace(/[^A-Za-z0-9._+-]+/g, ""), c3 = c3.substring(0, 50), l3) {
      let h3 = [..."._-"], d3 = [...".!#$%&'*+-/=?^_`{|}~"];
      c3 = c3.replace(this.faker.helpers.arrayElement(h3), this.faker.helpers.arrayElement(d3));
    }
    return c3 = c3.replace(/\.{2,}/g, "."), c3 = c3.replace(/^\./, ""), c3 = c3.replace(/\.$/, ""), `${c3}@${o2}`;
  }
  exampleEmail(e2 = {}, r3, t2) {
    var l3;
    (typeof e2 == "string" || r3 != null || t2 != null) && m2({ deprecated: "faker.internet.exampleEmail(firstName, lastName, options)", proposed: "faker.internet.exampleEmail({ firstName, lastName, ... })", since: "8.0", until: "9.0" }), typeof e2 == "string" && (e2 = { firstName: e2 });
    let { firstName: a3, lastName: n3 = r3, allowSpecialCharacters: s3 = (l3 = t2 == null ? void 0 : t2.allowSpecialCharacters) != null ? l3 : false } = e2, o2 = this.faker.helpers.arrayElement(this.faker.definitions.internet.example_email);
    return this.email({ firstName: a3, lastName: n3, provider: o2, allowSpecialCharacters: s3 });
  }
  userName(e2 = {}, r3) {
    (typeof e2 == "string" || r3 != null) && m2({ deprecated: "faker.internet.userName(firstName, lastName)", proposed: "faker.internet.userName({ firstName, lastName })", since: "8.0", until: "9.0" }), typeof e2 == "string" && (e2 = { firstName: e2 });
    let { firstName: t2 = this.faker.person.firstName(), lastName: a3 = r3 != null ? r3 : this.faker.person.lastName(), lastName: n3 = r3 } = e2, s3, o2 = this.faker.number.int(n3 ? 1 : 2), l3 = this.faker.helpers.arrayElement([".", "_"]);
    switch (o2) {
      case 0:
        s3 = `${t2}${l3}${a3}${this.faker.number.int(99)}`;
        break;
      case 1:
        s3 = `${t2}${l3}${a3}`;
        break;
      case 2:
      default:
        s3 = `${t2}${this.faker.number.int(99)}`;
        break;
    }
    return s3 = s3.normalize("NFKD").replace(/[\u0300-\u036F]/g, ""), s3 = [...s3].map((c3) => {
      var h3;
      if (we2[c3])
        return we2[c3];
      let p3 = (h3 = c3.codePointAt(0)) != null ? h3 : Number.NaN;
      return p3 < 128 ? c3 : p3.toString(36);
    }).join(""), s3 = s3.toString().replace(/'/g, ""), s3 = s3.replace(/ /g, ""), s3;
  }
  displayName(e2 = {}, r3) {
    (typeof e2 == "string" || r3 != null) && m2({ deprecated: "faker.internet.displayName(firstName, lastName)", proposed: "faker.internet.displayName({ firstName, lastName })", since: "8.0", until: "9.0" }), typeof e2 == "string" && (e2 = { firstName: e2 });
    let { firstName: t2 = this.faker.person.firstName(), lastName: a3 = r3 != null ? r3 : this.faker.person.lastName() } = e2, n3;
    switch (this.faker.number.int(2)) {
      case 0:
        n3 = `${t2}${this.faker.number.int(99)}`;
        break;
      case 1:
        n3 = t2 + this.faker.helpers.arrayElement([".", "_"]) + a3;
        break;
      case 2:
      default:
        n3 = `${t2}${this.faker.helpers.arrayElement([".", "_"])}${a3}${this.faker.number.int(99)}`;
        break;
    }
    return n3 = n3.toString().replace(/'/g, ""), n3 = n3.replace(/ /g, ""), n3;
  }
  protocol() {
    let e2 = ["http", "https"];
    return this.faker.helpers.arrayElement(e2);
  }
  httpMethod() {
    let e2 = ["GET", "POST", "PUT", "DELETE", "PATCH"];
    return this.faker.helpers.arrayElement(e2);
  }
  httpStatusCode(e2 = {}) {
    let { types: r3 = Object.keys(this.faker.definitions.internet.http_status_code) } = e2, t2 = this.faker.helpers.arrayElement(r3);
    return this.faker.helpers.arrayElement(this.faker.definitions.internet.http_status_code[t2]);
  }
  url(e2 = {}) {
    let { appendSlash: r3 = this.faker.datatype.boolean(), protocol: t2 = "https" } = e2;
    return `${t2}://${this.domainName()}${r3 ? "/" : ""}`;
  }
  domainName() {
    return `${this.domainWord()}.${this.domainSuffix()}`;
  }
  domainSuffix() {
    return this.faker.helpers.arrayElement(this.faker.definitions.internet.domain_suffix);
  }
  domainWord() {
    return this.faker.helpers.slugify(`${this.faker.word.adjective()}-${this.faker.word.noun()}`).toLowerCase();
  }
  ip() {
    return this.faker.datatype.boolean() ? this.ipv4() : this.ipv6();
  }
  ipv4() {
    return Array.from({ length: 4 }, () => this.faker.number.int(255)).join(".");
  }
  ipv6() {
    return Array.from({ length: 8 }, () => this.faker.string.hexadecimal({ length: 4, casing: "lower", prefix: "" })).join(":");
  }
  port() {
    return this.faker.number.int(65535);
  }
  userAgent() {
    return Ke2(this.faker);
  }
  color(e2 = {}, r3, t2) {
    (typeof e2 == "number" || t2 != null || r3 != null) && m2({ deprecated: "faker.internet.color(redBase, greenBase, blueBase)", proposed: "faker.internet.color({ redBase, greenBase, blueBase })", since: "8.0", until: "9.0" }), typeof e2 == "number" && (e2 = { redBase: e2 });
    let { redBase: a3 = 0, greenBase: n3 = r3 != null ? r3 : 0, blueBase: s3 = t2 != null ? t2 : 0 } = e2, o2 = (h3) => Math.floor((this.faker.number.int(256) + h3) / 2).toString(16).padStart(2, "0"), l3 = o2(a3), c3 = o2(n3), p3 = o2(s3);
    return `#${l3}${c3}${p3}`;
  }
  mac(e2 = {}) {
    typeof e2 == "string" && (e2 = { separator: e2 });
    let { separator: r3 = ":" } = e2, t2, a3 = "";
    for ([":", "-", ""].includes(r3) || (r3 = ":"), t2 = 0; t2 < 12; t2++)
      a3 += this.faker.number.hex(15), t2 % 2 === 1 && t2 !== 11 && (a3 += r3);
    return a3;
  }
  password(e2 = {}, r3, t2, a3) {
    let n3 = /[aeiouAEIOU]$/, s3 = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/, o2 = (d3, g3, k3, A3) => {
      if (A3.length >= d3)
        return A3;
      g3 && (k3 = s3.test(A3) ? n3 : s3);
      let x3 = this.faker.number.int(94) + 33, T3 = String.fromCodePoint(x3);
      return g3 && (T3 = T3.toLowerCase()), k3.test(T3) ? o2(d3, g3, k3, A3 + T3) : o2(d3, g3, k3, A3);
    };
    (typeof e2 == "string" || r3 != null || t2 != null || a3 != null) && m2({ deprecated: "faker.internet.password(length, memorable, pattern, prefix)", proposed: "faker.internet.password({ length, memorable, pattern, prefix })", since: "8.0", until: "9.0" }), typeof e2 == "number" && (e2 = { length: e2 });
    let { length: l3 = 15, memorable: c3 = r3 != null ? r3 : false, pattern: p3 = t2 != null ? t2 : /\w/, prefix: h3 = a3 != null ? a3 : "" } = e2;
    return o2(l3, c3, p3, h3);
  }
  emoji(e2 = {}) {
    let { types: r3 = Object.keys(this.faker.definitions.internet.emoji) } = e2, t2 = this.faker.helpers.arrayElement(r3);
    return this.faker.helpers.arrayElement(this.faker.definitions.internet.emoji[t2]);
  }
};
var ce2 = class extends b2 {
  zipCode(e2 = {}) {
    typeof e2 == "string" && (e2 = { format: e2 });
    let { state: r3 } = e2;
    if (r3) {
      let a3 = this.faker.definitions.location.postcode_by_state[r3];
      if (a3)
        return this.faker.helpers.fake(a3);
      throw new u2(`No zip code definition found for state "${r3}"`);
    }
    let { format: t2 = this.faker.definitions.location.postcode } = e2;
    return typeof t2 == "string" && (t2 = [t2]), t2 = this.faker.helpers.arrayElement(t2), this.faker.helpers.replaceSymbols(t2);
  }
  zipCodeByState(e2 = {}) {
    m2({ deprecated: "faker.location.zipCodeByState", proposed: "faker.location.zipCode({ state })", since: "8.0", until: "9.0" }), typeof e2 == "string" && (e2 = { state: e2 });
    let { state: r3 } = e2;
    return this.zipCode({ state: r3 });
  }
  city() {
    return this.faker.helpers.fake(this.faker.definitions.location.city_pattern);
  }
  cityName() {
    return m2({ deprecated: "faker.location.cityName", proposed: "faker.location.city", since: "8.0", until: "9.0" }), this.faker.helpers.arrayElement(this.faker.definitions.location.city_name);
  }
  buildingNumber() {
    return this.faker.helpers.arrayElement(this.faker.definitions.location.building_number).replace(/#+/g, (e2) => this.faker.string.numeric({ length: e2.length, allowLeadingZeros: false }));
  }
  street() {
    return this.faker.helpers.fake(this.faker.definitions.location.street_pattern);
  }
  streetName() {
    return m2({ deprecated: "faker.location.streetName", proposed: "faker.location.street", since: "8.0", until: "9.0" }), this.faker.helpers.arrayElement(this.faker.definitions.location.street_name);
  }
  streetAddress(e2 = {}) {
    typeof e2 == "boolean" && (e2 = { useFullAddress: e2 });
    let { useFullAddress: r3 } = e2, a3 = this.faker.definitions.location.street_address[r3 ? "full" : "normal"];
    return this.faker.helpers.fake(a3);
  }
  secondaryAddress() {
    return this.faker.helpers.arrayElement(this.faker.definitions.location.secondary_address).replace(/#+/g, (e2) => this.faker.string.numeric({ length: e2.length, allowLeadingZeros: false }));
  }
  county() {
    return this.faker.helpers.arrayElement(this.faker.definitions.location.county);
  }
  country() {
    return this.faker.helpers.arrayElement(this.faker.definitions.location.country);
  }
  countryCode(e2 = {}) {
    typeof e2 == "string" && (e2 = { variant: e2 });
    let { variant: r3 = "alpha-2" } = e2, t2 = (() => {
      switch (r3) {
        case "numeric":
          return "numeric";
        case "alpha-3":
          return "alpha3";
        case "alpha-2":
        default:
          return "alpha2";
      }
    })();
    return this.faker.helpers.arrayElement(this.faker.definitions.location.country_code)[t2];
  }
  state(e2 = {}) {
    let { abbreviated: r3 = false } = e2, t2 = r3 ? this.faker.definitions.location.state_abbr : this.faker.definitions.location.state;
    return this.faker.helpers.arrayElement(t2);
  }
  stateAbbr() {
    return m2({ deprecated: "faker.location.stateAbbr()", proposed: "faker.location.state({ abbreviated: true })", since: "8.0", until: "9.0" }), this.state({ abbreviated: true });
  }
  latitude(e2 = {}, r3 = -90, t2 = 4) {
    typeof e2 == "number" && (m2({ deprecated: "faker.location.latitude(max, min, precision)", proposed: "faker.location.latitude({ max, min, precision })", since: "8.0", until: "9.0" }), e2 = { max: e2 });
    let { max: a3 = 90, min: n3 = r3, precision: s3 = t2 } = e2;
    return this.faker.number.float({ min: n3, max: a3, fractionDigits: s3 });
  }
  longitude(e2 = {}, r3 = -180, t2 = 4) {
    typeof e2 == "number" && (m2({ deprecated: "faker.location.longitude(max, min, precision)", proposed: "faker.location.longitude({ max, min, precision })", since: "8.0", until: "9.0" }), e2 = { max: e2 });
    let { max: a3 = 180, min: n3 = r3, precision: s3 = t2 } = e2;
    return this.faker.number.float({ max: a3, min: n3, fractionDigits: s3 });
  }
  direction(e2 = {}) {
    typeof e2 == "boolean" && (m2({ deprecated: "faker.location.direction(abbreviated)", proposed: "faker.location.direction({ abbreviated })", since: "8.0", until: "9.0" }), e2 = { abbreviated: e2 });
    let { abbreviated: r3 = false } = e2;
    return r3 ? this.faker.helpers.arrayElement(this.faker.definitions.location.direction_abbr) : this.faker.helpers.arrayElement(this.faker.definitions.location.direction);
  }
  cardinalDirection(e2 = {}) {
    typeof e2 == "boolean" && (m2({ deprecated: "faker.location.cardinalDirection(abbreviated)", proposed: "faker.location.cardinalDirection({ abbreviated })", since: "8.0", until: "9.0" }), e2 = { abbreviated: e2 });
    let { abbreviated: r3 = false } = e2;
    return r3 ? this.faker.helpers.arrayElement(this.faker.definitions.location.direction_abbr.slice(0, 4)) : this.faker.helpers.arrayElement(this.faker.definitions.location.direction.slice(0, 4));
  }
  ordinalDirection(e2 = {}) {
    typeof e2 == "boolean" && (m2({ deprecated: "faker.location.ordinalDirection(abbreviated)", proposed: "faker.location.ordinalDirection({ abbreviated })", since: "8.0", until: "9.0" }), e2 = { abbreviated: e2 });
    let { abbreviated: r3 = false } = e2;
    return r3 ? this.faker.helpers.arrayElement(this.faker.definitions.location.direction_abbr.slice(4, 8)) : this.faker.helpers.arrayElement(this.faker.definitions.location.direction.slice(4, 8));
  }
  nearbyGPSCoordinate(e2 = {}, r3 = 10, t2 = false) {
    Array.isArray(e2) && (m2({ deprecated: "faker.location.nearbyGPSCoordinate(coordinate, radius, isMetric)", proposed: "faker.location.nearbyGPSCoordinate({ origin, radius, isMetric })", since: "8.0", until: "9.0" }), e2 = { origin: e2 });
    let { origin: a3, radius: n3 = r3, isMetric: s3 = t2 } = e2;
    if (a3 == null)
      return [this.latitude(), this.longitude()];
    let o2 = this.faker.number.float({ max: 2 * Math.PI, fractionDigits: 5 }), l3 = s3 ? n3 : n3 * 1.60934, p3 = this.faker.number.float({ max: l3, fractionDigits: 3 }) * 0.995, h3 = 4e4 / 360, d3 = p3 / h3, g3 = [a3[0] + Math.sin(o2) * d3, a3[1] + Math.cos(o2) * d3];
    return g3[0] = g3[0] % 180, (g3[0] < -90 || g3[0] > 90) && (g3[0] = Math.sign(g3[0]) * 180 - g3[0], g3[1] += 180), g3[1] = (g3[1] % 360 + 540) % 360 - 180, [g3[0], g3[1]];
  }
  timeZone() {
    return this.faker.helpers.arrayElement(this.faker.definitions.location.time_zone);
  }
};
function je2(i4, e2, r3 = (t2) => t2) {
  let t2 = {};
  for (let a3 of i4) {
    let n3 = e2(a3);
    t2[n3] === void 0 && (t2[n3] = []), t2[n3].push(r3(a3));
  }
  return t2;
}
var Ee2 = { fail: () => {
  throw new u2("No words found that match the given length.");
}, closest: (i4, e2) => {
  let r3 = je2(i4, (o2) => o2.length), t2 = Object.keys(r3).map(Number), a3 = Math.min(...t2), n3 = Math.max(...t2), s3 = Math.min(e2.min - a3, n3 - e2.max);
  return i4.filter((o2) => o2.length === e2.min - s3 || o2.length === e2.max + s3);
}, shortest: (i4) => {
  let e2 = Math.min(...i4.map((r3) => r3.length));
  return i4.filter((r3) => r3.length === e2);
}, longest: (i4) => {
  let e2 = Math.max(...i4.map((r3) => r3.length));
  return i4.filter((r3) => r3.length === e2);
}, "any-length": (i4) => [...i4] };
function N2(i4) {
  let { wordList: e2, length: r3, strategy: t2 = "any-length" } = i4;
  if (r3) {
    let a3 = typeof r3 == "number" ? (s3) => s3.length === r3 : (s3) => s3.length >= r3.min && s3.length <= r3.max, n3 = e2.filter(a3);
    return n3.length > 0 ? n3 : typeof r3 == "number" ? Ee2[t2](e2, { min: r3, max: r3 }) : Ee2[t2](e2, r3);
  } else if (t2 === "shortest" || t2 === "longest")
    return Ee2[t2](e2);
  return [...e2];
}
var le2 = class extends b2 {
  word(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.lorem.words }));
  }
  words(e2 = 3) {
    return this.faker.helpers.multiple(() => this.word(), { count: e2 }).join(" ");
  }
  sentence(e2 = { min: 3, max: 10 }) {
    let r3 = this.words(e2);
    return `${r3.charAt(0).toUpperCase() + r3.substring(1)}.`;
  }
  slug(e2 = 3) {
    let r3 = this.words(e2);
    return this.faker.helpers.slugify(r3);
  }
  sentences(e2 = { min: 2, max: 6 }, r3 = " ") {
    return this.faker.helpers.multiple(() => this.sentence(), { count: e2 }).join(r3);
  }
  paragraph(e2 = 3) {
    return this.sentences(e2);
  }
  paragraphs(e2 = 3, r3 = `
`) {
    return this.faker.helpers.multiple(() => this.paragraph(), { count: e2 }).join(r3);
  }
  text() {
    let e2 = ["sentence", "sentences", "paragraph", "paragraphs", "lines"], r3 = this.faker.helpers.arrayElement(e2);
    return this[r3]();
  }
  lines(e2 = { min: 1, max: 5 }) {
    return this.sentences(e2, `
`);
  }
};
var me2 = class extends b2 {
  genre() {
    return this.faker.helpers.arrayElement(this.faker.definitions.music.genre);
  }
  songName() {
    return this.faker.helpers.arrayElement(this.faker.definitions.music.song_name);
  }
};
var ue2 = class extends b2 {
  number(e2) {
    return e2 != null && m2({ deprecated: "faker.phone.number(format)", proposed: "faker.phone.number(), faker.string.numeric() or faker.helpers.fromRegExp()", since: "8.1", until: "9.0" }), e2 = e2 != null ? e2 : this.faker.helpers.arrayElement(this.faker.definitions.phone_number.formats), z2(this.faker, e2);
  }
  imei() {
    return this.faker.helpers.replaceCreditCardSymbols("##-######-######-L", "#");
  }
};
var pe2 = class extends b2 {
  word() {
    m2({ deprecated: "faker.random.word()", proposed: "faker.lorem.word() or faker.word.sample()", since: "8.0", until: "9.0" });
    let e2 = [() => this.faker.location.cardinalDirection(), this.faker.location.country, this.faker.location.county, () => this.faker.location.direction(), () => this.faker.location.ordinalDirection(), this.faker.location.state, this.faker.location.street, this.faker.color.human, this.faker.commerce.department, this.faker.commerce.product, this.faker.commerce.productAdjective, this.faker.commerce.productMaterial, this.faker.commerce.productName, this.faker.company.buzzAdjective, this.faker.company.buzzNoun, this.faker.company.buzzVerb, this.faker.company.catchPhraseAdjective, this.faker.company.catchPhraseDescriptor, this.faker.company.catchPhraseNoun, this.faker.finance.accountName, this.faker.finance.currencyName, this.faker.finance.transactionType, this.faker.hacker.abbreviation, this.faker.hacker.adjective, this.faker.hacker.ingverb, this.faker.hacker.noun, this.faker.hacker.verb, this.faker.lorem.word, this.faker.music.genre, this.faker.person.gender, this.faker.person.jobArea, this.faker.person.jobDescriptor, this.faker.person.jobTitle, this.faker.person.jobType, this.faker.person.sex, () => this.faker.science.chemicalElement().name, () => this.faker.science.unit().name, this.faker.vehicle.bicycle, this.faker.vehicle.color, this.faker.vehicle.fuel, this.faker.vehicle.manufacturer, this.faker.vehicle.type, this.faker.word.adjective, this.faker.word.adverb, this.faker.word.conjunction, this.faker.word.interjection, this.faker.word.noun, this.faker.word.preposition, this.faker.word.verb], r3 = ["!", "#", "%", "&", "*", ")", "(", "+", "=", ".", "<", ">", "{", "}", "[", "]", ":", ";", "'", '"', "_", "-"], t2 = "", a3 = 0;
    do {
      let n3 = this.faker.helpers.arrayElement(e2);
      try {
        t2 = n3();
      } catch {
        if (a3++, a3 > 100)
          throw new u2("No matching word data available for the current locale");
        continue;
      }
    } while (!t2 || r3.some((n3) => t2.includes(n3)));
    return this.faker.helpers.arrayElement(t2.split(" "));
  }
  words(e2 = { min: 1, max: 3 }) {
    return m2({ deprecated: "faker.random.words()", proposed: "faker.lorem.words() or faker.word.words()", since: "8.0", until: "9.0" }), this.faker.helpers.multiple(this.word, { count: e2 }).join(" ");
  }
  locale() {
    throw new u2("This method has been removed. Please use `faker.helpers.objectKey(allLocales/allFakers)` instead.");
  }
  alpha(e2 = {}) {
    return m2({ deprecated: "faker.random.alpha()", proposed: "faker.string.alpha()", since: "8.0", until: "9.0" }), typeof e2 == "number" ? this.faker.string.alpha(e2) : this.faker.string.alpha({ length: e2.count, casing: e2.casing, exclude: e2.bannedChars });
  }
  alphaNumeric(e2 = 1, r3 = {}) {
    return m2({ deprecated: "faker.random.alphaNumeric()", proposed: "faker.string.alphanumeric()", since: "8.0", until: "9.0" }), this.faker.string.alphanumeric({ length: e2, exclude: r3.bannedChars, casing: r3.casing });
  }
  numeric(e2 = 1, r3 = {}) {
    return m2({ deprecated: "faker.random.numeric()", proposed: "faker.string.numeric()", since: "8.0", until: "9.0" }), this.faker.string.numeric({ length: e2, allowLeadingZeros: r3.allowLeadingZeros, exclude: r3.bannedDigits });
  }
};
var he2 = class extends b2 {
  chemicalElement() {
    return this.faker.helpers.arrayElement(this.faker.definitions.science.chemicalElement);
  }
  unit() {
    return this.faker.helpers.arrayElement(this.faker.definitions.science.unit);
  }
};
var Gr = ["video", "audio", "image", "text", "application"];
var Ur = ["application/pdf", "audio/mpeg", "audio/wav", "image/png", "image/jpeg", "image/gif", "video/mp4", "video/mpeg", "text/html"];
var Or = ["en", "wl", "ww"];
var ze2 = { index: "o", slot: "s", mac: "x", pci: "p" };
var Kr = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
var fe2 = class extends b2 {
  fileName(e2 = {}) {
    let { extensionCount: r3 = 1 } = e2, t2 = this.faker.word.words().toLowerCase().replace(/\W/g, "_"), a3 = this.faker.helpers.multiple(() => this.fileExt(), { count: r3 }).join(".");
    return a3.length === 0 ? t2 : `${t2}.${a3}`;
  }
  commonFileName(e2) {
    return `${this.fileName({ extensionCount: 0 })}.${e2 || this.commonFileExt()}`;
  }
  mimeType() {
    let e2 = Object.keys(this.faker.definitions.system.mimeTypes);
    return this.faker.helpers.arrayElement(e2);
  }
  commonFileType() {
    return this.faker.helpers.arrayElement(Gr);
  }
  commonFileExt() {
    return this.fileExt(this.faker.helpers.arrayElement(Ur));
  }
  fileType() {
    let e2 = this.faker.definitions.system.mimeTypes, r3 = new Set(Object.keys(e2).map((t2) => t2.split("/")[0]));
    return this.faker.helpers.arrayElement([...r3]);
  }
  fileExt(e2) {
    let r3 = this.faker.definitions.system.mimeTypes;
    if (typeof e2 == "string")
      return this.faker.helpers.arrayElement(r3[e2].extensions);
    let t2 = new Set(Object.values(r3).flatMap(({ extensions: a3 }) => a3));
    return this.faker.helpers.arrayElement([...t2]);
  }
  directoryPath() {
    let e2 = this.faker.definitions.system.directoryPaths;
    return this.faker.helpers.arrayElement(e2);
  }
  filePath() {
    return `${this.directoryPath()}/${this.fileName()}`;
  }
  semver() {
    return [this.faker.number.int(9), this.faker.number.int(9), this.faker.number.int(9)].join(".");
  }
  networkInterface(e2 = {}) {
    var o2, l3, c3, p3, h3;
    let { interfaceType: r3 = this.faker.helpers.arrayElement(Or), interfaceSchema: t2 = this.faker.helpers.objectKey(ze2) } = e2, a3, n3 = "", s3 = () => this.faker.string.numeric({ allowLeadingZeros: true });
    switch (t2) {
      case "index":
        a3 = s3();
        break;
      case "slot":
        a3 = `${s3()}${(o2 = this.faker.helpers.maybe(() => `f${s3()}`)) != null ? o2 : ""}${(l3 = this.faker.helpers.maybe(() => `d${s3()}`)) != null ? l3 : ""}`;
        break;
      case "mac":
        a3 = this.faker.internet.mac("");
        break;
      case "pci":
        n3 = (c3 = this.faker.helpers.maybe(() => `P${s3()}`)) != null ? c3 : "", a3 = `${s3()}s${s3()}${(p3 = this.faker.helpers.maybe(() => `f${s3()}`)) != null ? p3 : ""}${(h3 = this.faker.helpers.maybe(() => `d${s3()}`)) != null ? h3 : ""}`;
        break;
    }
    return `${n3}${r3}${ze2[t2]}${a3}`;
  }
  cron(e2 = {}) {
    let { includeYear: r3 = false, includeNonStandard: t2 = false } = e2, a3 = [this.faker.number.int(59), "*"], n3 = [this.faker.number.int(23), "*"], s3 = [this.faker.number.int({ min: 1, max: 31 }), "*", "?"], o2 = [this.faker.number.int({ min: 1, max: 12 }), "*"], l3 = [this.faker.number.int(6), this.faker.helpers.arrayElement(Kr), "*", "?"], c3 = [this.faker.number.int({ min: 1970, max: 2099 }), "*"], p3 = this.faker.helpers.arrayElement(a3), h3 = this.faker.helpers.arrayElement(n3), d3 = this.faker.helpers.arrayElement(s3), g3 = this.faker.helpers.arrayElement(o2), k3 = this.faker.helpers.arrayElement(l3), A3 = this.faker.helpers.arrayElement(c3), x3 = `${p3} ${h3} ${d3} ${g3} ${k3}`;
    r3 && (x3 += ` ${A3}`);
    let T3 = ["@annually", "@daily", "@hourly", "@monthly", "@reboot", "@weekly", "@yearly"];
    return !t2 || this.faker.datatype.boolean() ? x3 : this.faker.helpers.arrayElement(T3);
  }
};
var be2 = class extends b2 {
  vehicle() {
    return `${this.manufacturer()} ${this.model()}`;
  }
  manufacturer() {
    return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.manufacturer);
  }
  model() {
    return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.model);
  }
  type() {
    return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.type);
  }
  fuel() {
    return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.fuel);
  }
  vin() {
    let e2 = ["o", "i", "q", "O", "I", "Q"];
    return `${this.faker.string.alphanumeric({ length: 10, casing: "upper", exclude: e2 })}${this.faker.string.alpha({ length: 1, casing: "upper", exclude: e2 })}${this.faker.string.alphanumeric({ length: 1, casing: "upper", exclude: e2 })}${this.faker.number.int({ min: 1e4, max: 99999 })}`;
  }
  color() {
    return this.faker.color.human();
  }
  vrm() {
    return `${this.faker.string.alpha({ length: 2, casing: "upper" })}${this.faker.string.numeric({ length: 2, allowLeadingZeros: true })}${this.faker.string.alpha({ length: 3, casing: "upper" })}`;
  }
  bicycle() {
    return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.bicycle_type);
  }
};
var de2 = class extends b2 {
  adjective(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.adjective }));
  }
  adverb(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.adverb }));
  }
  conjunction(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.conjunction }));
  }
  interjection(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.interjection }));
  }
  noun(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.noun }));
  }
  preposition(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.preposition }));
  }
  verb(e2 = {}) {
    let r3 = typeof e2 == "number" ? { length: e2 } : e2;
    return this.faker.helpers.arrayElement(N2({ ...r3, wordList: this.faker.definitions.word.verb }));
  }
  sample(e2 = {}) {
    let r3 = this.faker.helpers.shuffle([this.adjective, this.adverb, this.conjunction, this.interjection, this.noun, this.preposition, this.verb]);
    for (let t2 of r3)
      try {
        return t2(e2);
      } catch {
        continue;
      }
    throw new u2("No matching word data available for the current locale");
  }
  words(e2 = {}) {
    typeof e2 == "number" && (e2 = { count: e2 });
    let { count: r3 = { min: 1, max: 3 } } = e2;
    return this.faker.helpers.multiple(() => this.sample(), { count: r3 }).join(" ");
  }
};
var Ve2 = class extends F2 {
  constructor(r3) {
    super({ randomizer: r3.randomizer });
    f2(this, "rawDefinitions");
    f2(this, "definitions");
    f2(this, "random", new pe2(this));
    f2(this, "airline", new _2(this));
    f2(this, "animal", new J2(this));
    f2(this, "color", new G2(this));
    f2(this, "commerce", new X2(this));
    f2(this, "company", new q2(this));
    f2(this, "database", new Q2(this));
    f2(this, "date", new j2(this));
    f2(this, "finance", new ee2(this));
    f2(this, "git", new re2(this));
    f2(this, "hacker", new te2(this));
    f2(this, "helpers", new V2(this));
    f2(this, "image", new se2(this));
    f2(this, "internet", new oe2(this));
    f2(this, "location", new ce2(this));
    f2(this, "lorem", new le2(this));
    f2(this, "music", new me2(this));
    f2(this, "person", new O2(this));
    f2(this, "phone", new ue2(this));
    f2(this, "science", new he2(this));
    f2(this, "system", new fe2(this));
    f2(this, "vehicle", new be2(this));
    f2(this, "word", new de2(this));
    let { locales: t2 } = r3;
    if (t2 != null) {
      m2({ deprecated: "new Faker({ locales: {a, b}, locale: 'a', localeFallback: 'b' })", proposed: "new Faker({ locale: [a, b, ...] }) or new Faker({ locale: a })", since: "8.0", until: "9.0" });
      let { locale: n3 = "en", localeFallback: s3 = "en" } = r3;
      r3 = { locale: [t2[n3], t2[s3]] };
    }
    let { locale: a3 } = r3;
    if (Array.isArray(a3)) {
      if (a3.length === 0)
        throw new u2("The locale option must contain at least one locale definition.");
      a3 = Oe2(a3);
    }
    this.rawDefinitions = a3, this.definitions = Le2(this.rawDefinitions);
  }
  get address() {
    return m2({ deprecated: "faker.address", proposed: "faker.location", since: "8.0", until: "10.0" }), this.location;
  }
  get name() {
    return m2({ deprecated: "faker.name", proposed: "faker.person", since: "8.0", until: "10.0" }), this.person;
  }
  getMetadata() {
    var r3;
    return (r3 = this.rawDefinitions.metadata) != null ? r3 : {};
  }
  get locales() {
    throw new u2("The locales property has been removed. Please use the constructor instead.");
  }
  set locales(r3) {
    throw new u2("The locales property has been removed. Please use the constructor instead.");
  }
  get locale() {
    throw new u2("The locale property has been removed. Please use the constructor instead.");
  }
  set locale(r3) {
    throw new u2("The locale property has been removed. Please use the constructor instead.");
  }
  get localeFallback() {
    throw new u2("The localeFallback property has been removed. Please use the constructor instead.");
  }
  set localeFallback(r3) {
    throw new u2("The localeFallback property has been removed. Please use the constructor instead.");
  }
  setLocale() {
    throw new u2("This method has been removed. Please use the constructor instead.");
  }
};
var He2 = ["CIE 1931 XYZ", "CIEUVW", "Uniform Color Spaces (UCSs)", "CIELUV", "CIELAB", "HSLuv", "sRGB", "Adobe RGB", "Adobe Wide Gamut RGB", "Rec. 2100", "ProPhoto RGB Color Space", "scRGB", "DCI-P3", "Display-P3", "Rec. 601", "Rec. 709", "Academy Color Encoding System (ACES)", "Rec. 2020", "YPbPr", "YDbDr", "YIQ", "xvYCC", "sYCC", "HSV", "HSL", "HWB", "RGBA", "HSLA", "LCh", "CMY", "CMYK", "Munsell Color System", "Natural Color System (NSC)", "Pantone Matching System (PMS)", "RAL", "Federal Standard 595C", "British Standard Colour (BS)", "HKS", "LMS", "RG", "RGK"];
var jr = { space: He2 };
var We2 = jr;
var Ye2 = ["utf8_unicode_ci", "utf8_general_ci", "utf8_bin", "ascii_bin", "ascii_general_ci", "cp1250_bin", "cp1250_general_ci"];
var Ze2 = ["InnoDB", "MyISAM", "MEMORY", "CSV", "BLACKHOLE", "ARCHIVE"];
var Je2 = ["int", "varchar", "text", "date", "datetime", "tinyint", "time", "timestamp", "smallint", "mediumint", "bigint", "decimal", "float", "double", "real", "bit", "boolean", "serial", "blob", "binary", "enum", "set", "geometry", "point"];
var zr = { collation: Ye2, engine: Ze2, type: Je2 };
var Xe2 = zr;
var qe2 = ["ADP", "AGP", "AI", "API", "ASCII", "CLI", "COM", "CSS", "DNS", "DRAM", "EXE", "FTP", "GB", "HDD", "HEX", "HTTP", "IB", "IP", "JBOD", "JSON", "OCR", "PCI", "PNG", "RAM", "RSS", "SAS", "SCSI", "SDD", "SMS", "SMTP", "SQL", "SSD", "SSL", "TCP", "THX", "TLS", "UDP", "USB", "UTF8", "VGA", "XML", "XSS"];
var Vr = { abbreviation: qe2 };
var Qe2 = Vr;
var er2 = { smiley: ["😀", "😃", "😄", "😁", "😆", "😅", "🤣", "😂", "🙂", "🙃", "😉", "😊", "😇", "🥰", "😍", "🤩", "😘", "😗", "☺️", "😚", "😙", "🥲", "😋", "😛", "😜", "🤪", "😝", "🤑", "🤗", "🤭", "🤫", "🤔", "🤐", "🤨", "😐", "😑", "😶", "😶‍🌫️", "😏", "😒", "🙄", "😬", "😮‍💨", "🤥", "😌", "😔", "😪", "🤤", "😴", "😷", "🤒", "🤕", "🤢", "🤮", "🤧", "🥵", "🥶", "🥴", "😵", "😵‍💫", "🤯", "🤠", "🥳", "🥸", "😎", "🤓", "🧐", "😕", "😟", "🙁", "☹️", "😮", "😯", "😲", "😳", "🥺", "😦", "😧", "😨", "😰", "😥", "😢", "😭", "😱", "😖", "😣", "😞", "😓", "😩", "😫", "🥱", "😤", "😡", "😠", "🤬", "😈", "👿", "💀", "☠️", "💩", "🤡", "👹", "👺", "👻", "👽", "👾", "🤖", "😺", "😸", "😹", "😻", "😼", "😽", "🙀", "😿", "😾", "🙈", "🙉", "🙊", "💋", "💌", "💘", "💝", "💖", "💗", "💓", "💞", "💕", "💟", "❣️", "💔", "❤️‍🔥", "❤️‍🩹", "❤️", "🧡", "💛", "💚", "💙", "💜", "🤎", "🖤", "🤍", "💯", "💢", "💥", "💫", "💦", "💨", "🕳️", "💣", "💬", "👁️‍🗨️", "🗨️", "🗯️", "💭", "💤"], body: ["👋", "👋🏻", "👋🏼", "👋🏽", "👋🏾", "👋🏿", "🤚", "🤚🏻", "🤚🏼", "🤚🏽", "🤚🏾", "🤚🏿", "🖐️", "🖐🏻", "🖐🏼", "🖐🏽", "🖐🏾", "🖐🏿", "✋", "✋🏻", "✋🏼", "✋🏽", "✋🏾", "✋🏿", "🖖", "🖖🏻", "🖖🏼", "🖖🏽", "🖖🏾", "🖖🏿", "👌", "👌🏻", "👌🏼", "👌🏽", "👌🏾", "👌🏿", "🤌", "🤌🏻", "🤌🏼", "🤌🏽", "🤌🏾", "🤌🏿", "🤏", "🤏🏻", "🤏🏼", "🤏🏽", "🤏🏾", "🤏🏿", "✌️", "✌🏻", "✌🏼", "✌🏽", "✌🏾", "✌🏿", "🤞", "🤞🏻", "🤞🏼", "🤞🏽", "🤞🏾", "🤞🏿", "🤟", "🤟🏻", "🤟🏼", "🤟🏽", "🤟🏾", "🤟🏿", "🤘", "🤘🏻", "🤘🏼", "🤘🏽", "🤘🏾", "🤘🏿", "🤙", "🤙🏻", "🤙🏼", "🤙🏽", "🤙🏾", "🤙🏿", "👈", "👈🏻", "👈🏼", "👈🏽", "👈🏾", "👈🏿", "👉", "👉🏻", "👉🏼", "👉🏽", "👉🏾", "👉🏿", "👆", "👆🏻", "👆🏼", "👆🏽", "👆🏾", "👆🏿", "🖕", "🖕🏻", "🖕🏼", "🖕🏽", "🖕🏾", "🖕🏿", "👇", "👇🏻", "👇🏼", "👇🏽", "👇🏾", "👇🏿", "☝️", "☝🏻", "☝🏼", "☝🏽", "☝🏾", "☝🏿", "👍", "👍🏻", "👍🏼", "👍🏽", "👍🏾", "👍🏿", "👎", "👎🏻", "👎🏼", "👎🏽", "👎🏾", "👎🏿", "✊", "✊🏻", "✊🏼", "✊🏽", "✊🏾", "✊🏿", "👊", "👊🏻", "👊🏼", "👊🏽", "👊🏾", "👊🏿", "🤛", "🤛🏻", "🤛🏼", "🤛🏽", "🤛🏾", "🤛🏿", "🤜", "🤜🏻", "🤜🏼", "🤜🏽", "🤜🏾", "🤜🏿", "👏", "👏🏻", "👏🏼", "👏🏽", "👏🏾", "👏🏿", "🙌", "🙌🏻", "🙌🏼", "🙌🏽", "🙌🏾", "🙌🏿", "👐", "👐🏻", "👐🏼", "👐🏽", "👐🏾", "👐🏿", "🤲", "🤲🏻", "🤲🏼", "🤲🏽", "🤲🏾", "🤲🏿", "🤝", "🙏", "🙏🏻", "🙏🏼", "🙏🏽", "🙏🏾", "🙏🏿", "✍️", "✍🏻", "✍🏼", "✍🏽", "✍🏾", "✍🏿", "💅", "💅🏻", "💅🏼", "💅🏽", "💅🏾", "💅🏿", "🤳", "🤳🏻", "🤳🏼", "🤳🏽", "🤳🏾", "🤳🏿", "💪", "💪🏻", "💪🏼", "💪🏽", "💪🏾", "💪🏿", "🦾", "🦿", "🦵", "🦵🏻", "🦵🏼", "🦵🏽", "🦵🏾", "🦵🏿", "🦶", "🦶🏻", "🦶🏼", "🦶🏽", "🦶🏾", "🦶🏿", "👂", "👂🏻", "👂🏼", "👂🏽", "👂🏾", "👂🏿", "🦻", "🦻🏻", "🦻🏼", "🦻🏽", "🦻🏾", "🦻🏿", "👃", "👃🏻", "👃🏼", "👃🏽", "👃🏾", "👃🏿", "🧠", "🫀", "🫁", "🦷", "🦴", "👀", "👁️", "👅", "👄"], person: ["👶", "👶🏻", "👶🏼", "👶🏽", "👶🏾", "👶🏿", "🧒", "🧒🏻", "🧒🏼", "🧒🏽", "🧒🏾", "🧒🏿", "👦", "👦🏻", "👦🏼", "👦🏽", "👦🏾", "👦🏿", "👧", "👧🏻", "👧🏼", "👧🏽", "👧🏾", "👧🏿", "🧑", "🧑🏻", "🧑🏼", "🧑🏽", "🧑🏾", "🧑🏿", "👱", "👱🏻", "👱🏼", "👱🏽", "👱🏾", "👱🏿", "👨", "👨🏻", "👨🏼", "👨🏽", "👨🏾", "👨🏿", "🧔", "🧔🏻", "🧔🏼", "🧔🏽", "🧔🏾", "🧔🏿", "🧔‍♂️", "🧔🏻‍♂️", "🧔🏼‍♂️", "🧔🏽‍♂️", "🧔🏾‍♂️", "🧔🏿‍♂️", "🧔‍♀️", "🧔🏻‍♀️", "🧔🏼‍♀️", "🧔🏽‍♀️", "🧔🏾‍♀️", "🧔🏿‍♀️", "👨‍🦰", "👨🏻‍🦰", "👨🏼‍🦰", "👨🏽‍🦰", "👨🏾‍🦰", "👨🏿‍🦰", "👨‍🦱", "👨🏻‍🦱", "👨🏼‍🦱", "👨🏽‍🦱", "👨🏾‍🦱", "👨🏿‍🦱", "👨‍🦳", "👨🏻‍🦳", "👨🏼‍🦳", "👨🏽‍🦳", "👨🏾‍🦳", "👨🏿‍🦳", "👨‍🦲", "👨🏻‍🦲", "👨🏼‍🦲", "👨🏽‍🦲", "👨🏾‍🦲", "👨🏿‍🦲", "👩", "👩🏻", "👩🏼", "👩🏽", "👩🏾", "👩🏿", "👩‍🦰", "👩🏻‍🦰", "👩🏼‍🦰", "👩🏽‍🦰", "👩🏾‍🦰", "👩🏿‍🦰", "🧑‍🦰", "🧑🏻‍🦰", "🧑🏼‍🦰", "🧑🏽‍🦰", "🧑🏾‍🦰", "🧑🏿‍🦰", "👩‍🦱", "👩🏻‍🦱", "👩🏼‍🦱", "👩🏽‍🦱", "👩🏾‍🦱", "👩🏿‍🦱", "🧑‍🦱", "🧑🏻‍🦱", "🧑🏼‍🦱", "🧑🏽‍🦱", "🧑🏾‍🦱", "🧑🏿‍🦱", "👩‍🦳", "👩🏻‍🦳", "👩🏼‍🦳", "👩🏽‍🦳", "👩🏾‍🦳", "👩🏿‍🦳", "🧑‍🦳", "🧑🏻‍🦳", "🧑🏼‍🦳", "🧑🏽‍🦳", "🧑🏾‍🦳", "🧑🏿‍🦳", "👩‍🦲", "👩🏻‍🦲", "👩🏼‍🦲", "👩🏽‍🦲", "👩🏾‍🦲", "👩🏿‍🦲", "🧑‍🦲", "🧑🏻‍🦲", "🧑🏼‍🦲", "🧑🏽‍🦲", "🧑🏾‍🦲", "🧑🏿‍🦲", "👱‍♀️", "👱🏻‍♀️", "👱🏼‍♀️", "👱🏽‍♀️", "👱🏾‍♀️", "👱🏿‍♀️", "👱‍♂️", "👱🏻‍♂️", "👱🏼‍♂️", "👱🏽‍♂️", "👱🏾‍♂️", "👱🏿‍♂️", "🧓", "🧓🏻", "🧓🏼", "🧓🏽", "🧓🏾", "🧓🏿", "👴", "👴🏻", "👴🏼", "👴🏽", "👴🏾", "👴🏿", "👵", "👵🏻", "👵🏼", "👵🏽", "👵🏾", "👵🏿", "🙍", "🙍🏻", "🙍🏼", "🙍🏽", "🙍🏾", "🙍🏿", "🙍‍♂️", "🙍🏻‍♂️", "🙍🏼‍♂️", "🙍🏽‍♂️", "🙍🏾‍♂️", "🙍🏿‍♂️", "🙍‍♀️", "🙍🏻‍♀️", "🙍🏼‍♀️", "🙍🏽‍♀️", "🙍🏾‍♀️", "🙍🏿‍♀️", "🙎", "🙎🏻", "🙎🏼", "🙎🏽", "🙎🏾", "🙎🏿", "🙎‍♂️", "🙎🏻‍♂️", "🙎🏼‍♂️", "🙎🏽‍♂️", "🙎🏾‍♂️", "🙎🏿‍♂️", "🙎‍♀️", "🙎🏻‍♀️", "🙎🏼‍♀️", "🙎🏽‍♀️", "🙎🏾‍♀️", "🙎🏿‍♀️", "🙅", "🙅🏻", "🙅🏼", "🙅🏽", "🙅🏾", "🙅🏿", "🙅‍♂️", "🙅🏻‍♂️", "🙅🏼‍♂️", "🙅🏽‍♂️", "🙅🏾‍♂️", "🙅🏿‍♂️", "🙅‍♀️", "🙅🏻‍♀️", "🙅🏼‍♀️", "🙅🏽‍♀️", "🙅🏾‍♀️", "🙅🏿‍♀️", "🙆", "🙆🏻", "🙆🏼", "🙆🏽", "🙆🏾", "🙆🏿", "🙆‍♂️", "🙆🏻‍♂️", "🙆🏼‍♂️", "🙆🏽‍♂️", "🙆🏾‍♂️", "🙆🏿‍♂️", "🙆‍♀️", "🙆🏻‍♀️", "🙆🏼‍♀️", "🙆🏽‍♀️", "🙆🏾‍♀️", "🙆🏿‍♀️", "💁", "💁🏻", "💁🏼", "💁🏽", "💁🏾", "💁🏿", "💁‍♂️", "💁🏻‍♂️", "💁🏼‍♂️", "💁🏽‍♂️", "💁🏾‍♂️", "💁🏿‍♂️", "💁‍♀️", "💁🏻‍♀️", "💁🏼‍♀️", "💁🏽‍♀️", "💁🏾‍♀️", "💁🏿‍♀️", "🙋", "🙋🏻", "🙋🏼", "🙋🏽", "🙋🏾", "🙋🏿", "🙋‍♂️", "🙋🏻‍♂️", "🙋🏼‍♂️", "🙋🏽‍♂️", "🙋🏾‍♂️", "🙋🏿‍♂️", "🙋‍♀️", "🙋🏻‍♀️", "🙋🏼‍♀️", "🙋🏽‍♀️", "🙋🏾‍♀️", "🙋🏿‍♀️", "🧏", "🧏🏻", "🧏🏼", "🧏🏽", "🧏🏾", "🧏🏿", "🧏‍♂️", "🧏🏻‍♂️", "🧏🏼‍♂️", "🧏🏽‍♂️", "🧏🏾‍♂️", "🧏🏿‍♂️", "🧏‍♀️", "🧏🏻‍♀️", "🧏🏼‍♀️", "🧏🏽‍♀️", "🧏🏾‍♀️", "🧏🏿‍♀️", "🙇", "🙇🏻", "🙇🏼", "🙇🏽", "🙇🏾", "🙇🏿", "🙇‍♂️", "🙇🏻‍♂️", "🙇🏼‍♂️", "🙇🏽‍♂️", "🙇🏾‍♂️", "🙇🏿‍♂️", "🙇‍♀️", "🙇🏻‍♀️", "🙇🏼‍♀️", "🙇🏽‍♀️", "🙇🏾‍♀️", "🙇🏿‍♀️", "🤦", "🤦🏻", "🤦🏼", "🤦🏽", "🤦🏾", "🤦🏿", "🤦‍♂️", "🤦🏻‍♂️", "🤦🏼‍♂️", "🤦🏽‍♂️", "🤦🏾‍♂️", "🤦🏿‍♂️", "🤦‍♀️", "🤦🏻‍♀️", "🤦🏼‍♀️", "🤦🏽‍♀️", "🤦🏾‍♀️", "🤦🏿‍♀️", "🤷", "🤷🏻", "🤷🏼", "🤷🏽", "🤷🏾", "🤷🏿", "🤷‍♂️", "🤷🏻‍♂️", "🤷🏼‍♂️", "🤷🏽‍♂️", "🤷🏾‍♂️", "🤷🏿‍♂️", "🤷‍♀️", "🤷🏻‍♀️", "🤷🏼‍♀️", "🤷🏽‍♀️", "🤷🏾‍♀️", "🤷🏿‍♀️", "🧑‍⚕️", "🧑🏻‍⚕️", "🧑🏼‍⚕️", "🧑🏽‍⚕️", "🧑🏾‍⚕️", "🧑🏿‍⚕️", "👨‍⚕️", "👨🏻‍⚕️", "👨🏼‍⚕️", "👨🏽‍⚕️", "👨🏾‍⚕️", "👨🏿‍⚕️", "👩‍⚕️", "👩🏻‍⚕️", "👩🏼‍⚕️", "👩🏽‍⚕️", "👩🏾‍⚕️", "👩🏿‍⚕️", "🧑‍🎓", "🧑🏻‍🎓", "🧑🏼‍🎓", "🧑🏽‍🎓", "🧑🏾‍🎓", "🧑🏿‍🎓", "👨‍🎓", "👨🏻‍🎓", "👨🏼‍🎓", "👨🏽‍🎓", "👨🏾‍🎓", "👨🏿‍🎓", "👩‍🎓", "👩🏻‍🎓", "👩🏼‍🎓", "👩🏽‍🎓", "👩🏾‍🎓", "👩🏿‍🎓", "🧑‍🏫", "🧑🏻‍🏫", "🧑🏼‍🏫", "🧑🏽‍🏫", "🧑🏾‍🏫", "🧑🏿‍🏫", "👨‍🏫", "👨🏻‍🏫", "👨🏼‍🏫", "👨🏽‍🏫", "👨🏾‍🏫", "👨🏿‍🏫", "👩‍🏫", "👩🏻‍🏫", "👩🏼‍🏫", "👩🏽‍🏫", "👩🏾‍🏫", "👩🏿‍🏫", "🧑‍⚖️", "🧑🏻‍⚖️", "🧑🏼‍⚖️", "🧑🏽‍⚖️", "🧑🏾‍⚖️", "🧑🏿‍⚖️", "👨‍⚖️", "👨🏻‍⚖️", "👨🏼‍⚖️", "👨🏽‍⚖️", "👨🏾‍⚖️", "👨🏿‍⚖️", "👩‍⚖️", "👩🏻‍⚖️", "👩🏼‍⚖️", "👩🏽‍⚖️", "👩🏾‍⚖️", "👩🏿‍⚖️", "🧑‍🌾", "🧑🏻‍🌾", "🧑🏼‍🌾", "🧑🏽‍🌾", "🧑🏾‍🌾", "🧑🏿‍🌾", "👨‍🌾", "👨🏻‍🌾", "👨🏼‍🌾", "👨🏽‍🌾", "👨🏾‍🌾", "👨🏿‍🌾", "👩‍🌾", "👩🏻‍🌾", "👩🏼‍🌾", "👩🏽‍🌾", "👩🏾‍🌾", "👩🏿‍🌾", "🧑‍🍳", "🧑🏻‍🍳", "🧑🏼‍🍳", "🧑🏽‍🍳", "🧑🏾‍🍳", "🧑🏿‍🍳", "👨‍🍳", "👨🏻‍🍳", "👨🏼‍🍳", "👨🏽‍🍳", "👨🏾‍🍳", "👨🏿‍🍳", "👩‍🍳", "👩🏻‍🍳", "👩🏼‍🍳", "👩🏽‍🍳", "👩🏾‍🍳", "👩🏿‍🍳", "🧑‍🔧", "🧑🏻‍🔧", "🧑🏼‍🔧", "🧑🏽‍🔧", "🧑🏾‍🔧", "🧑🏿‍🔧", "👨‍🔧", "👨🏻‍🔧", "👨🏼‍🔧", "👨🏽‍🔧", "👨🏾‍🔧", "👨🏿‍🔧", "👩‍🔧", "👩🏻‍🔧", "👩🏼‍🔧", "👩🏽‍🔧", "👩🏾‍🔧", "👩🏿‍🔧", "🧑‍🏭", "🧑🏻‍🏭", "🧑🏼‍🏭", "🧑🏽‍🏭", "🧑🏾‍🏭", "🧑🏿‍🏭", "👨‍🏭", "👨🏻‍🏭", "👨🏼‍🏭", "👨🏽‍🏭", "👨🏾‍🏭", "👨🏿‍🏭", "👩‍🏭", "👩🏻‍🏭", "👩🏼‍🏭", "👩🏽‍🏭", "👩🏾‍🏭", "👩🏿‍🏭", "🧑‍💼", "🧑🏻‍💼", "🧑🏼‍💼", "🧑🏽‍💼", "🧑🏾‍💼", "🧑🏿‍💼", "👨‍💼", "👨🏻‍💼", "👨🏼‍💼", "👨🏽‍💼", "👨🏾‍💼", "👨🏿‍💼", "👩‍💼", "👩🏻‍💼", "👩🏼‍💼", "👩🏽‍💼", "👩🏾‍💼", "👩🏿‍💼", "🧑‍🔬", "🧑🏻‍🔬", "🧑🏼‍🔬", "🧑🏽‍🔬", "🧑🏾‍🔬", "🧑🏿‍🔬", "👨‍🔬", "👨🏻‍🔬", "👨🏼‍🔬", "👨🏽‍🔬", "👨🏾‍🔬", "👨🏿‍🔬", "👩‍🔬", "👩🏻‍🔬", "👩🏼‍🔬", "👩🏽‍🔬", "👩🏾‍🔬", "👩🏿‍🔬", "🧑‍💻", "🧑🏻‍💻", "🧑🏼‍💻", "🧑🏽‍💻", "🧑🏾‍💻", "🧑🏿‍💻", "👨‍💻", "👨🏻‍💻", "👨🏼‍💻", "👨🏽‍💻", "👨🏾‍💻", "👨🏿‍💻", "👩‍💻", "👩🏻‍💻", "👩🏼‍💻", "👩🏽‍💻", "👩🏾‍💻", "👩🏿‍💻", "🧑‍🎤", "🧑🏻‍🎤", "🧑🏼‍🎤", "🧑🏽‍🎤", "🧑🏾‍🎤", "🧑🏿‍🎤", "👨‍🎤", "👨🏻‍🎤", "👨🏼‍🎤", "👨🏽‍🎤", "👨🏾‍🎤", "👨🏿‍🎤", "👩‍🎤", "👩🏻‍🎤", "👩🏼‍🎤", "👩🏽‍🎤", "👩🏾‍🎤", "👩🏿‍🎤", "🧑‍🎨", "🧑🏻‍🎨", "🧑🏼‍🎨", "🧑🏽‍🎨", "🧑🏾‍🎨", "🧑🏿‍🎨", "👨‍🎨", "👨🏻‍🎨", "👨🏼‍🎨", "👨🏽‍🎨", "👨🏾‍🎨", "👨🏿‍🎨", "👩‍🎨", "👩🏻‍🎨", "👩🏼‍🎨", "👩🏽‍🎨", "👩🏾‍🎨", "👩🏿‍🎨", "🧑‍✈️", "🧑🏻‍✈️", "🧑🏼‍✈️", "🧑🏽‍✈️", "🧑🏾‍✈️", "🧑🏿‍✈️", "👨‍✈️", "👨🏻‍✈️", "👨🏼‍✈️", "👨🏽‍✈️", "👨🏾‍✈️", "👨🏿‍✈️", "👩‍✈️", "👩🏻‍✈️", "👩🏼‍✈️", "👩🏽‍✈️", "👩🏾‍✈️", "👩🏿‍✈️", "🧑‍🚀", "🧑🏻‍🚀", "🧑🏼‍🚀", "🧑🏽‍🚀", "🧑🏾‍🚀", "🧑🏿‍🚀", "👨‍🚀", "👨🏻‍🚀", "👨🏼‍🚀", "👨🏽‍🚀", "👨🏾‍🚀", "👨🏿‍🚀", "👩‍🚀", "👩🏻‍🚀", "👩🏼‍🚀", "👩🏽‍🚀", "👩🏾‍🚀", "👩🏿‍🚀", "🧑‍🚒", "🧑🏻‍🚒", "🧑🏼‍🚒", "🧑🏽‍🚒", "🧑🏾‍🚒", "🧑🏿‍🚒", "👨‍🚒", "👨🏻‍🚒", "👨🏼‍🚒", "👨🏽‍🚒", "👨🏾‍🚒", "👨🏿‍🚒", "👩‍🚒", "👩🏻‍🚒", "👩🏼‍🚒", "👩🏽‍🚒", "👩🏾‍🚒", "👩🏿‍🚒", "👮", "👮🏻", "👮🏼", "👮🏽", "👮🏾", "👮🏿", "👮‍♂️", "👮🏻‍♂️", "👮🏼‍♂️", "👮🏽‍♂️", "👮🏾‍♂️", "👮🏿‍♂️", "👮‍♀️", "👮🏻‍♀️", "👮🏼‍♀️", "👮🏽‍♀️", "👮🏾‍♀️", "👮🏿‍♀️", "🕵️", "🕵🏻", "🕵🏼", "🕵🏽", "🕵🏾", "🕵🏿", "🕵️‍♂️", "🕵🏻‍♂️", "🕵🏼‍♂️", "🕵🏽‍♂️", "🕵🏾‍♂️", "🕵🏿‍♂️", "🕵️‍♀️", "🕵🏻‍♀️", "🕵🏼‍♀️", "🕵🏽‍♀️", "🕵🏾‍♀️", "🕵🏿‍♀️", "💂", "💂🏻", "💂🏼", "💂🏽", "💂🏾", "💂🏿", "💂‍♂️", "💂🏻‍♂️", "💂🏼‍♂️", "💂🏽‍♂️", "💂🏾‍♂️", "💂🏿‍♂️", "💂‍♀️", "💂🏻‍♀️", "💂🏼‍♀️", "💂🏽‍♀️", "💂🏾‍♀️", "💂🏿‍♀️", "🥷", "🥷🏻", "🥷🏼", "🥷🏽", "🥷🏾", "🥷🏿", "👷", "👷🏻", "👷🏼", "👷🏽", "👷🏾", "👷🏿", "👷‍♂️", "👷🏻‍♂️", "👷🏼‍♂️", "👷🏽‍♂️", "👷🏾‍♂️", "👷🏿‍♂️", "👷‍♀️", "👷🏻‍♀️", "👷🏼‍♀️", "👷🏽‍♀️", "👷🏾‍♀️", "👷🏿‍♀️", "🤴", "🤴🏻", "🤴🏼", "🤴🏽", "🤴🏾", "🤴🏿", "👸", "👸🏻", "👸🏼", "👸🏽", "👸🏾", "👸🏿", "👳", "👳🏻", "👳🏼", "👳🏽", "👳🏾", "👳🏿", "👳‍♂️", "👳🏻‍♂️", "👳🏼‍♂️", "👳🏽‍♂️", "👳🏾‍♂️", "👳🏿‍♂️", "👳‍♀️", "👳🏻‍♀️", "👳🏼‍♀️", "👳🏽‍♀️", "👳🏾‍♀️", "👳🏿‍♀️", "👲", "👲🏻", "👲🏼", "👲🏽", "👲🏾", "👲🏿", "🧕", "🧕🏻", "🧕🏼", "🧕🏽", "🧕🏾", "🧕🏿", "🤵", "🤵🏻", "🤵🏼", "🤵🏽", "🤵🏾", "🤵🏿", "🤵‍♂️", "🤵🏻‍♂️", "🤵🏼‍♂️", "🤵🏽‍♂️", "🤵🏾‍♂️", "🤵🏿‍♂️", "🤵‍♀️", "🤵🏻‍♀️", "🤵🏼‍♀️", "🤵🏽‍♀️", "🤵🏾‍♀️", "🤵🏿‍♀️", "👰", "👰🏻", "👰🏼", "👰🏽", "👰🏾", "👰🏿", "👰‍♂️", "👰🏻‍♂️", "👰🏼‍♂️", "👰🏽‍♂️", "👰🏾‍♂️", "👰🏿‍♂️", "👰‍♀️", "👰🏻‍♀️", "👰🏼‍♀️", "👰🏽‍♀️", "👰🏾‍♀️", "👰🏿‍♀️", "🤰", "🤰🏻", "🤰🏼", "🤰🏽", "🤰🏾", "🤰🏿", "🤱", "🤱🏻", "🤱🏼", "🤱🏽", "🤱🏾", "🤱🏿", "👩‍🍼", "👩🏻‍🍼", "👩🏼‍🍼", "👩🏽‍🍼", "👩🏾‍🍼", "👩🏿‍🍼", "👨‍🍼", "👨🏻‍🍼", "👨🏼‍🍼", "👨🏽‍🍼", "👨🏾‍🍼", "👨🏿‍🍼", "🧑‍🍼", "🧑🏻‍🍼", "🧑🏼‍🍼", "🧑🏽‍🍼", "🧑🏾‍🍼", "🧑🏿‍🍼", "👼", "👼🏻", "👼🏼", "👼🏽", "👼🏾", "👼🏿", "🎅", "🎅🏻", "🎅🏼", "🎅🏽", "🎅🏾", "🎅🏿", "🤶", "🤶🏻", "🤶🏼", "🤶🏽", "🤶🏾", "🤶🏿", "🧑‍🎄", "🧑🏻‍🎄", "🧑🏼‍🎄", "🧑🏽‍🎄", "🧑🏾‍🎄", "🧑🏿‍🎄", "🦸", "🦸🏻", "🦸🏼", "🦸🏽", "🦸🏾", "🦸🏿", "🦸‍♂️", "🦸🏻‍♂️", "🦸🏼‍♂️", "🦸🏽‍♂️", "🦸🏾‍♂️", "🦸🏿‍♂️", "🦸‍♀️", "🦸🏻‍♀️", "🦸🏼‍♀️", "🦸🏽‍♀️", "🦸🏾‍♀️", "🦸🏿‍♀️", "🦹", "🦹🏻", "🦹🏼", "🦹🏽", "🦹🏾", "🦹🏿", "🦹‍♂️", "🦹🏻‍♂️", "🦹🏼‍♂️", "🦹🏽‍♂️", "🦹🏾‍♂️", "🦹🏿‍♂️", "🦹‍♀️", "🦹🏻‍♀️", "🦹🏼‍♀️", "🦹🏽‍♀️", "🦹🏾‍♀️", "🦹🏿‍♀️", "🧙", "🧙🏻", "🧙🏼", "🧙🏽", "🧙🏾", "🧙🏿", "🧙‍♂️", "🧙🏻‍♂️", "🧙🏼‍♂️", "🧙🏽‍♂️", "🧙🏾‍♂️", "🧙🏿‍♂️", "🧙‍♀️", "🧙🏻‍♀️", "🧙🏼‍♀️", "🧙🏽‍♀️", "🧙🏾‍♀️", "🧙🏿‍♀️", "🧚", "🧚🏻", "🧚🏼", "🧚🏽", "🧚🏾", "🧚🏿", "🧚‍♂️", "🧚🏻‍♂️", "🧚🏼‍♂️", "🧚🏽‍♂️", "🧚🏾‍♂️", "🧚🏿‍♂️", "🧚‍♀️", "🧚🏻‍♀️", "🧚🏼‍♀️", "🧚🏽‍♀️", "🧚🏾‍♀️", "🧚🏿‍♀️", "🧛", "🧛🏻", "🧛🏼", "🧛🏽", "🧛🏾", "🧛🏿", "🧛‍♂️", "🧛🏻‍♂️", "🧛🏼‍♂️", "🧛🏽‍♂️", "🧛🏾‍♂️", "🧛🏿‍♂️", "🧛‍♀️", "🧛🏻‍♀️", "🧛🏼‍♀️", "🧛🏽‍♀️", "🧛🏾‍♀️", "🧛🏿‍♀️", "🧜", "🧜🏻", "🧜🏼", "🧜🏽", "🧜🏾", "🧜🏿", "🧜‍♂️", "🧜🏻‍♂️", "🧜🏼‍♂️", "🧜🏽‍♂️", "🧜🏾‍♂️", "🧜🏿‍♂️", "🧜‍♀️", "🧜🏻‍♀️", "🧜🏼‍♀️", "🧜🏽‍♀️", "🧜🏾‍♀️", "🧜🏿‍♀️", "🧝", "🧝🏻", "🧝🏼", "🧝🏽", "🧝🏾", "🧝🏿", "🧝‍♂️", "🧝🏻‍♂️", "🧝🏼‍♂️", "🧝🏽‍♂️", "🧝🏾‍♂️", "🧝🏿‍♂️", "🧝‍♀️", "🧝🏻‍♀️", "🧝🏼‍♀️", "🧝🏽‍♀️", "🧝🏾‍♀️", "🧝🏿‍♀️", "🧞", "🧞‍♂️", "🧞‍♀️", "🧟", "🧟‍♂️", "🧟‍♀️", "💆", "💆🏻", "💆🏼", "💆🏽", "💆🏾", "💆🏿", "💆‍♂️", "💆🏻‍♂️", "💆🏼‍♂️", "💆🏽‍♂️", "💆🏾‍♂️", "💆🏿‍♂️", "💆‍♀️", "💆🏻‍♀️", "💆🏼‍♀️", "💆🏽‍♀️", "💆🏾‍♀️", "💆🏿‍♀️", "💇", "💇🏻", "💇🏼", "💇🏽", "💇🏾", "💇🏿", "💇‍♂️", "💇🏻‍♂️", "💇🏼‍♂️", "💇🏽‍♂️", "💇🏾‍♂️", "💇🏿‍♂️", "💇‍♀️", "💇🏻‍♀️", "💇🏼‍♀️", "💇🏽‍♀️", "💇🏾‍♀️", "💇🏿‍♀️", "🚶", "🚶🏻", "🚶🏼", "🚶🏽", "🚶🏾", "🚶🏿", "🚶‍♂️", "🚶🏻‍♂️", "🚶🏼‍♂️", "🚶🏽‍♂️", "🚶🏾‍♂️", "🚶🏿‍♂️", "🚶‍♀️", "🚶🏻‍♀️", "🚶🏼‍♀️", "🚶🏽‍♀️", "🚶🏾‍♀️", "🚶🏿‍♀️", "🧍", "🧍🏻", "🧍🏼", "🧍🏽", "🧍🏾", "🧍🏿", "🧍‍♂️", "🧍🏻‍♂️", "🧍🏼‍♂️", "🧍🏽‍♂️", "🧍🏾‍♂️", "🧍🏿‍♂️", "🧍‍♀️", "🧍🏻‍♀️", "🧍🏼‍♀️", "🧍🏽‍♀️", "🧍🏾‍♀️", "🧍🏿‍♀️", "🧎", "🧎🏻", "🧎🏼", "🧎🏽", "🧎🏾", "🧎🏿", "🧎‍♂️", "🧎🏻‍♂️", "🧎🏼‍♂️", "🧎🏽‍♂️", "🧎🏾‍♂️", "🧎🏿‍♂️", "🧎‍♀️", "🧎🏻‍♀️", "🧎🏼‍♀️", "🧎🏽‍♀️", "🧎🏾‍♀️", "🧎🏿‍♀️", "🧑‍🦯", "🧑🏻‍🦯", "🧑🏼‍🦯", "🧑🏽‍🦯", "🧑🏾‍🦯", "🧑🏿‍🦯", "👨‍🦯", "👨🏻‍🦯", "👨🏼‍🦯", "👨🏽‍🦯", "👨🏾‍🦯", "👨🏿‍🦯", "👩‍🦯", "👩🏻‍🦯", "👩🏼‍🦯", "👩🏽‍🦯", "👩🏾‍🦯", "👩🏿‍🦯", "🧑‍🦼", "🧑🏻‍🦼", "🧑🏼‍🦼", "🧑🏽‍🦼", "🧑🏾‍🦼", "🧑🏿‍🦼", "👨‍🦼", "👨🏻‍🦼", "👨🏼‍🦼", "👨🏽‍🦼", "👨🏾‍🦼", "👨🏿‍🦼", "👩‍🦼", "👩🏻‍🦼", "👩🏼‍🦼", "👩🏽‍🦼", "👩🏾‍🦼", "👩🏿‍🦼", "🧑‍🦽", "🧑🏻‍🦽", "🧑🏼‍🦽", "🧑🏽‍🦽", "🧑🏾‍🦽", "🧑🏿‍🦽", "👨‍🦽", "👨🏻‍🦽", "👨🏼‍🦽", "👨🏽‍🦽", "👨🏾‍🦽", "👨🏿‍🦽", "👩‍🦽", "👩🏻‍🦽", "👩🏼‍🦽", "👩🏽‍🦽", "👩🏾‍🦽", "👩🏿‍🦽", "🏃", "🏃🏻", "🏃🏼", "🏃🏽", "🏃🏾", "🏃🏿", "🏃‍♂️", "🏃🏻‍♂️", "🏃🏼‍♂️", "🏃🏽‍♂️", "🏃🏾‍♂️", "🏃🏿‍♂️", "🏃‍♀️", "🏃🏻‍♀️", "🏃🏼‍♀️", "🏃🏽‍♀️", "🏃🏾‍♀️", "🏃🏿‍♀️", "💃", "💃🏻", "💃🏼", "💃🏽", "💃🏾", "💃🏿", "🕺", "🕺🏻", "🕺🏼", "🕺🏽", "🕺🏾", "🕺🏿", "🕴️", "🕴🏻", "🕴🏼", "🕴🏽", "🕴🏾", "🕴🏿", "👯", "👯‍♂️", "👯‍♀️", "🧖", "🧖🏻", "🧖🏼", "🧖🏽", "🧖🏾", "🧖🏿", "🧖‍♂️", "🧖🏻‍♂️", "🧖🏼‍♂️", "🧖🏽‍♂️", "🧖🏾‍♂️", "🧖🏿‍♂️", "🧖‍♀️", "🧖🏻‍♀️", "🧖🏼‍♀️", "🧖🏽‍♀️", "🧖🏾‍♀️", "🧖🏿‍♀️", "🧗", "🧗🏻", "🧗🏼", "🧗🏽", "🧗🏾", "🧗🏿", "🧗‍♂️", "🧗🏻‍♂️", "🧗🏼‍♂️", "🧗🏽‍♂️", "🧗🏾‍♂️", "🧗🏿‍♂️", "🧗‍♀️", "🧗🏻‍♀️", "🧗🏼‍♀️", "🧗🏽‍♀️", "🧗🏾‍♀️", "🧗🏿‍♀️", "🤺", "🏇", "🏇🏻", "🏇🏼", "🏇🏽", "🏇🏾", "🏇🏿", "⛷️", "🏂", "🏂🏻", "🏂🏼", "🏂🏽", "🏂🏾", "🏂🏿", "🏌️", "🏌🏻", "🏌🏼", "🏌🏽", "🏌🏾", "🏌🏿", "🏌️‍♂️", "🏌🏻‍♂️", "🏌🏼‍♂️", "🏌🏽‍♂️", "🏌🏾‍♂️", "🏌🏿‍♂️", "🏌️‍♀️", "🏌🏻‍♀️", "🏌🏼‍♀️", "🏌🏽‍♀️", "🏌🏾‍♀️", "🏌🏿‍♀️", "🏄", "🏄🏻", "🏄🏼", "🏄🏽", "🏄🏾", "🏄🏿", "🏄‍♂️", "🏄🏻‍♂️", "🏄🏼‍♂️", "🏄🏽‍♂️", "🏄🏾‍♂️", "🏄🏿‍♂️", "🏄‍♀️", "🏄🏻‍♀️", "🏄🏼‍♀️", "🏄🏽‍♀️", "🏄🏾‍♀️", "🏄🏿‍♀️", "🚣", "🚣🏻", "🚣🏼", "🚣🏽", "🚣🏾", "🚣🏿", "🚣‍♂️", "🚣🏻‍♂️", "🚣🏼‍♂️", "🚣🏽‍♂️", "🚣🏾‍♂️", "🚣🏿‍♂️", "🚣‍♀️", "🚣🏻‍♀️", "🚣🏼‍♀️", "🚣🏽‍♀️", "🚣🏾‍♀️", "🚣🏿‍♀️", "🏊", "🏊🏻", "🏊🏼", "🏊🏽", "🏊🏾", "🏊🏿", "🏊‍♂️", "🏊🏻‍♂️", "🏊🏼‍♂️", "🏊🏽‍♂️", "🏊🏾‍♂️", "🏊🏿‍♂️", "🏊‍♀️", "🏊🏻‍♀️", "🏊🏼‍♀️", "🏊🏽‍♀️", "🏊🏾‍♀️", "🏊🏿‍♀️", "⛹️", "⛹🏻", "⛹🏼", "⛹🏽", "⛹🏾", "⛹🏿", "⛹️‍♂️", "⛹🏻‍♂️", "⛹🏼‍♂️", "⛹🏽‍♂️", "⛹🏾‍♂️", "⛹🏿‍♂️", "⛹️‍♀️", "⛹🏻‍♀️", "⛹🏼‍♀️", "⛹🏽‍♀️", "⛹🏾‍♀️", "⛹🏿‍♀️", "🏋️", "🏋🏻", "🏋🏼", "🏋🏽", "🏋🏾", "🏋🏿", "🏋️‍♂️", "🏋🏻‍♂️", "🏋🏼‍♂️", "🏋🏽‍♂️", "🏋🏾‍♂️", "🏋🏿‍♂️", "🏋️‍♀️", "🏋🏻‍♀️", "🏋🏼‍♀️", "🏋🏽‍♀️", "🏋🏾‍♀️", "🏋🏿‍♀️", "🚴", "🚴🏻", "🚴🏼", "🚴🏽", "🚴🏾", "🚴🏿", "🚴‍♂️", "🚴🏻‍♂️", "🚴🏼‍♂️", "🚴🏽‍♂️", "🚴🏾‍♂️", "🚴🏿‍♂️", "🚴‍♀️", "🚴🏻‍♀️", "🚴🏼‍♀️", "🚴🏽‍♀️", "🚴🏾‍♀️", "🚴🏿‍♀️", "🚵", "🚵🏻", "🚵🏼", "🚵🏽", "🚵🏾", "🚵🏿", "🚵‍♂️", "🚵🏻‍♂️", "🚵🏼‍♂️", "🚵🏽‍♂️", "🚵🏾‍♂️", "🚵🏿‍♂️", "🚵‍♀️", "🚵🏻‍♀️", "🚵🏼‍♀️", "🚵🏽‍♀️", "🚵🏾‍♀️", "🚵🏿‍♀️", "🤸", "🤸🏻", "🤸🏼", "🤸🏽", "🤸🏾", "🤸🏿", "🤸‍♂️", "🤸🏻‍♂️", "🤸🏼‍♂️", "🤸🏽‍♂️", "🤸🏾‍♂️", "🤸🏿‍♂️", "🤸‍♀️", "🤸🏻‍♀️", "🤸🏼‍♀️", "🤸🏽‍♀️", "🤸🏾‍♀️", "🤸🏿‍♀️", "🤼", "🤼‍♂️", "🤼‍♀️", "🤽", "🤽🏻", "🤽🏼", "🤽🏽", "🤽🏾", "🤽🏿", "🤽‍♂️", "🤽🏻‍♂️", "🤽🏼‍♂️", "🤽🏽‍♂️", "🤽🏾‍♂️", "🤽🏿‍♂️", "🤽‍♀️", "🤽🏻‍♀️", "🤽🏼‍♀️", "🤽🏽‍♀️", "🤽🏾‍♀️", "🤽🏿‍♀️", "🤾", "🤾🏻", "🤾🏼", "🤾🏽", "🤾🏾", "🤾🏿", "🤾‍♂️", "🤾🏻‍♂️", "🤾🏼‍♂️", "🤾🏽‍♂️", "🤾🏾‍♂️", "🤾🏿‍♂️", "🤾‍♀️", "🤾🏻‍♀️", "🤾🏼‍♀️", "🤾🏽‍♀️", "🤾🏾‍♀️", "🤾🏿‍♀️", "🤹", "🤹🏻", "🤹🏼", "🤹🏽", "🤹🏾", "🤹🏿", "🤹‍♂️", "🤹🏻‍♂️", "🤹🏼‍♂️", "🤹🏽‍♂️", "🤹🏾‍♂️", "🤹🏿‍♂️", "🤹‍♀️", "🤹🏻‍♀️", "🤹🏼‍♀️", "🤹🏽‍♀️", "🤹🏾‍♀️", "🤹🏿‍♀️", "🧘", "🧘🏻", "🧘🏼", "🧘🏽", "🧘🏾", "🧘🏿", "🧘‍♂️", "🧘🏻‍♂️", "🧘🏼‍♂️", "🧘🏽‍♂️", "🧘🏾‍♂️", "🧘🏿‍♂️", "🧘‍♀️", "🧘🏻‍♀️", "🧘🏼‍♀️", "🧘🏽‍♀️", "🧘🏾‍♀️", "🧘🏿‍♀️", "🛀", "🛀🏻", "🛀🏼", "🛀🏽", "🛀🏾", "🛀🏿", "🛌", "🛌🏻", "🛌🏼", "🛌🏽", "🛌🏾", "🛌🏿", "🧑‍🤝‍🧑", "🧑🏻‍🤝‍🧑🏻", "🧑🏻‍🤝‍🧑🏼", "🧑🏻‍🤝‍🧑🏽", "🧑🏻‍🤝‍🧑🏾", "🧑🏻‍🤝‍🧑🏿", "🧑🏼‍🤝‍🧑🏻", "🧑🏼‍🤝‍🧑🏼", "🧑🏼‍🤝‍🧑🏽", "🧑🏼‍🤝‍🧑🏾", "🧑🏼‍🤝‍🧑🏿", "🧑🏽‍🤝‍🧑🏻", "🧑🏽‍🤝‍🧑🏼", "🧑🏽‍🤝‍🧑🏽", "🧑🏽‍🤝‍🧑🏾", "🧑🏽‍🤝‍🧑🏿", "🧑🏾‍🤝‍🧑🏻", "🧑🏾‍🤝‍🧑🏼", "🧑🏾‍🤝‍🧑🏽", "🧑🏾‍🤝‍🧑🏾", "🧑🏾‍🤝‍🧑🏿", "🧑🏿‍🤝‍🧑🏻", "🧑🏿‍🤝‍🧑🏼", "🧑🏿‍🤝‍🧑🏽", "🧑🏿‍🤝‍🧑🏾", "🧑🏿‍🤝‍🧑🏿", "👭", "👭🏻", "👩🏻‍🤝‍👩🏼", "👩🏻‍🤝‍👩🏽", "👩🏻‍🤝‍👩🏾", "👩🏻‍🤝‍👩🏿", "👩🏼‍🤝‍👩🏻", "👭🏼", "👩🏼‍🤝‍👩🏽", "👩🏼‍🤝‍👩🏾", "👩🏼‍🤝‍👩🏿", "👩🏽‍🤝‍👩🏻", "👩🏽‍🤝‍👩🏼", "👭🏽", "👩🏽‍🤝‍👩🏾", "👩🏽‍🤝‍👩🏿", "👩🏾‍🤝‍👩🏻", "👩🏾‍🤝‍👩🏼", "👩🏾‍🤝‍👩🏽", "👭🏾", "👩🏾‍🤝‍👩🏿", "👩🏿‍🤝‍👩🏻", "👩🏿‍🤝‍👩🏼", "👩🏿‍🤝‍👩🏽", "👩🏿‍🤝‍👩🏾", "👭🏿", "👫", "👫🏻", "👩🏻‍🤝‍👨🏼", "👩🏻‍🤝‍👨🏽", "👩🏻‍🤝‍👨🏾", "👩🏻‍🤝‍👨🏿", "👩🏼‍🤝‍👨🏻", "👫🏼", "👩🏼‍🤝‍👨🏽", "👩🏼‍🤝‍👨🏾", "👩🏼‍🤝‍👨🏿", "👩🏽‍🤝‍👨🏻", "👩🏽‍🤝‍👨🏼", "👫🏽", "👩🏽‍🤝‍👨🏾", "👩🏽‍🤝‍👨🏿", "👩🏾‍🤝‍👨🏻", "👩🏾‍🤝‍👨🏼", "👩🏾‍🤝‍👨🏽", "👫🏾", "👩🏾‍🤝‍👨🏿", "👩🏿‍🤝‍👨🏻", "👩🏿‍🤝‍👨🏼", "👩🏿‍🤝‍👨🏽", "👩🏿‍🤝‍👨🏾", "👫🏿", "👬", "👬🏻", "👨🏻‍🤝‍👨🏼", "👨🏻‍🤝‍👨🏽", "👨🏻‍🤝‍👨🏾", "👨🏻‍🤝‍👨🏿", "👨🏼‍🤝‍👨🏻", "👬🏼", "👨🏼‍🤝‍👨🏽", "👨🏼‍🤝‍👨🏾", "👨🏼‍🤝‍👨🏿", "👨🏽‍🤝‍👨🏻", "👨🏽‍🤝‍👨🏼", "👬🏽", "👨🏽‍🤝‍👨🏾", "👨🏽‍🤝‍👨🏿", "👨🏾‍🤝‍👨🏻", "👨🏾‍🤝‍👨🏼", "👨🏾‍🤝‍👨🏽", "👬🏾", "👨🏾‍🤝‍👨🏿", "👨🏿‍🤝‍👨🏻", "👨🏿‍🤝‍👨🏼", "👨🏿‍🤝‍👨🏽", "👨🏿‍🤝‍👨🏾", "👬🏿", "💏", "💏🏻", "💏🏼", "💏🏽", "💏🏾", "💏🏿", "🧑🏻‍❤️‍💋‍🧑🏼", "🧑🏻‍❤️‍💋‍🧑🏽", "🧑🏻‍❤️‍💋‍🧑🏾", "🧑🏻‍❤️‍💋‍🧑🏿", "🧑🏼‍❤️‍💋‍🧑🏻", "🧑🏼‍❤️‍💋‍🧑🏽", "🧑🏼‍❤️‍💋‍🧑🏾", "🧑🏼‍❤️‍💋‍🧑🏿", "🧑🏽‍❤️‍💋‍🧑🏻", "🧑🏽‍❤️‍💋‍🧑🏼", "🧑🏽‍❤️‍💋‍🧑🏾", "🧑🏽‍❤️‍💋‍🧑🏿", "🧑🏾‍❤️‍💋‍🧑🏻", "🧑🏾‍❤️‍💋‍🧑🏼", "🧑🏾‍❤️‍💋‍🧑🏽", "🧑🏾‍❤️‍💋‍🧑🏿", "🧑🏿‍❤️‍💋‍🧑🏻", "🧑🏿‍❤️‍💋‍🧑🏼", "🧑🏿‍❤️‍💋‍🧑🏽", "🧑🏿‍❤️‍💋‍🧑🏾", "👩‍❤️‍💋‍👨", "👩🏻‍❤️‍💋‍👨🏻", "👩🏻‍❤️‍💋‍👨🏼", "👩🏻‍❤️‍💋‍👨🏽", "👩🏻‍❤️‍💋‍👨🏾", "👩🏻‍❤️‍💋‍👨🏿", "👩🏼‍❤️‍💋‍👨🏻", "👩🏼‍❤️‍💋‍👨🏼", "👩🏼‍❤️‍💋‍👨🏽", "👩🏼‍❤️‍💋‍👨🏾", "👩🏼‍❤️‍💋‍👨🏿", "👩🏽‍❤️‍💋‍👨🏻", "👩🏽‍❤️‍💋‍👨🏼", "👩🏽‍❤️‍💋‍👨🏽", "👩🏽‍❤️‍💋‍👨🏾", "👩🏽‍❤️‍💋‍👨🏿", "👩🏾‍❤️‍💋‍👨🏻", "👩🏾‍❤️‍💋‍👨🏼", "👩🏾‍❤️‍💋‍👨🏽", "👩🏾‍❤️‍💋‍👨🏾", "👩🏾‍❤️‍💋‍👨🏿", "👩🏿‍❤️‍💋‍👨🏻", "👩🏿‍❤️‍💋‍👨🏼", "👩🏿‍❤️‍💋‍👨🏽", "👩🏿‍❤️‍💋‍👨🏾", "👩🏿‍❤️‍💋‍👨🏿", "👨‍❤️‍💋‍👨", "👨🏻‍❤️‍💋‍👨🏻", "👨🏻‍❤️‍💋‍👨🏼", "👨🏻‍❤️‍💋‍👨🏽", "👨🏻‍❤️‍💋‍👨🏾", "👨🏻‍❤️‍💋‍👨🏿", "👨🏼‍❤️‍💋‍👨🏻", "👨🏼‍❤️‍💋‍👨🏼", "👨🏼‍❤️‍💋‍👨🏽", "👨🏼‍❤️‍💋‍👨🏾", "👨🏼‍❤️‍💋‍👨🏿", "👨🏽‍❤️‍💋‍👨🏻", "👨🏽‍❤️‍💋‍👨🏼", "👨🏽‍❤️‍💋‍👨🏽", "👨🏽‍❤️‍💋‍👨🏾", "👨🏽‍❤️‍💋‍👨🏿", "👨🏾‍❤️‍💋‍👨🏻", "👨🏾‍❤️‍💋‍👨🏼", "👨🏾‍❤️‍💋‍👨🏽", "👨🏾‍❤️‍💋‍👨🏾", "👨🏾‍❤️‍💋‍👨🏿", "👨🏿‍❤️‍💋‍👨🏻", "👨🏿‍❤️‍💋‍👨🏼", "👨🏿‍❤️‍💋‍👨🏽", "👨🏿‍❤️‍💋‍👨🏾", "👨🏿‍❤️‍💋‍👨🏿", "👩‍❤️‍💋‍👩", "👩🏻‍❤️‍💋‍👩🏻", "👩🏻‍❤️‍💋‍👩🏼", "👩🏻‍❤️‍💋‍👩🏽", "👩🏻‍❤️‍💋‍👩🏾", "👩🏻‍❤️‍💋‍👩🏿", "👩🏼‍❤️‍💋‍👩🏻", "👩🏼‍❤️‍💋‍👩🏼", "👩🏼‍❤️‍💋‍👩🏽", "👩🏼‍❤️‍💋‍👩🏾", "👩🏼‍❤️‍💋‍👩🏿", "👩🏽‍❤️‍💋‍👩🏻", "👩🏽‍❤️‍💋‍👩🏼", "👩🏽‍❤️‍💋‍👩🏽", "👩🏽‍❤️‍💋‍👩🏾", "👩🏽‍❤️‍💋‍👩🏿", "👩🏾‍❤️‍💋‍👩🏻", "👩🏾‍❤️‍💋‍👩🏼", "👩🏾‍❤️‍💋‍👩🏽", "👩🏾‍❤️‍💋‍👩🏾", "👩🏾‍❤️‍💋‍👩🏿", "👩🏿‍❤️‍💋‍👩🏻", "👩🏿‍❤️‍💋‍👩🏼", "👩🏿‍❤️‍💋‍👩🏽", "👩🏿‍❤️‍💋‍👩🏾", "👩🏿‍❤️‍💋‍👩🏿", "💑", "💑🏻", "💑🏼", "💑🏽", "💑🏾", "💑🏿", "🧑🏻‍❤️‍🧑🏼", "🧑🏻‍❤️‍🧑🏽", "🧑🏻‍❤️‍🧑🏾", "🧑🏻‍❤️‍🧑🏿", "🧑🏼‍❤️‍🧑🏻", "🧑🏼‍❤️‍🧑🏽", "🧑🏼‍❤️‍🧑🏾", "🧑🏼‍❤️‍🧑🏿", "🧑🏽‍❤️‍🧑🏻", "🧑🏽‍❤️‍🧑🏼", "🧑🏽‍❤️‍🧑🏾", "🧑🏽‍❤️‍🧑🏿", "🧑🏾‍❤️‍🧑🏻", "🧑🏾‍❤️‍🧑🏼", "🧑🏾‍❤️‍🧑🏽", "🧑🏾‍❤️‍🧑🏿", "🧑🏿‍❤️‍🧑🏻", "🧑🏿‍❤️‍🧑🏼", "🧑🏿‍❤️‍🧑🏽", "🧑🏿‍❤️‍🧑🏾", "👩‍❤️‍👨", "👩🏻‍❤️‍👨🏻", "👩🏻‍❤️‍👨🏼", "👩🏻‍❤️‍👨🏽", "👩🏻‍❤️‍👨🏾", "👩🏻‍❤️‍👨🏿", "👩🏼‍❤️‍👨🏻", "👩🏼‍❤️‍👨🏼", "👩🏼‍❤️‍👨🏽", "👩🏼‍❤️‍👨🏾", "👩🏼‍❤️‍👨🏿", "👩🏽‍❤️‍👨🏻", "👩🏽‍❤️‍👨🏼", "👩🏽‍❤️‍👨🏽", "👩🏽‍❤️‍👨🏾", "👩🏽‍❤️‍👨🏿", "👩🏾‍❤️‍👨🏻", "👩🏾‍❤️‍👨🏼", "👩🏾‍❤️‍👨🏽", "👩🏾‍❤️‍👨🏾", "👩🏾‍❤️‍👨🏿", "👩🏿‍❤️‍👨🏻", "👩🏿‍❤️‍👨🏼", "👩🏿‍❤️‍👨🏽", "👩🏿‍❤️‍👨🏾", "👩🏿‍❤️‍👨🏿", "👨‍❤️‍👨", "👨🏻‍❤️‍👨🏻", "👨🏻‍❤️‍👨🏼", "👨🏻‍❤️‍👨🏽", "👨🏻‍❤️‍👨🏾", "👨🏻‍❤️‍👨🏿", "👨🏼‍❤️‍👨🏻", "👨🏼‍❤️‍👨🏼", "👨🏼‍❤️‍👨🏽", "👨🏼‍❤️‍👨🏾", "👨🏼‍❤️‍👨🏿", "👨🏽‍❤️‍👨🏻", "👨🏽‍❤️‍👨🏼", "👨🏽‍❤️‍👨🏽", "👨🏽‍❤️‍👨🏾", "👨🏽‍❤️‍👨🏿", "👨🏾‍❤️‍👨🏻", "👨🏾‍❤️‍👨🏼", "👨🏾‍❤️‍👨🏽", "👨🏾‍❤️‍👨🏾", "👨🏾‍❤️‍👨🏿", "👨🏿‍❤️‍👨🏻", "👨🏿‍❤️‍👨🏼", "👨🏿‍❤️‍👨🏽", "👨🏿‍❤️‍👨🏾", "👨🏿‍❤️‍👨🏿", "👩‍❤️‍👩", "👩🏻‍❤️‍👩🏻", "👩🏻‍❤️‍👩🏼", "👩🏻‍❤️‍👩🏽", "👩🏻‍❤️‍👩🏾", "👩🏻‍❤️‍👩🏿", "👩🏼‍❤️‍👩🏻", "👩🏼‍❤️‍👩🏼", "👩🏼‍❤️‍👩🏽", "👩🏼‍❤️‍👩🏾", "👩🏼‍❤️‍👩🏿", "👩🏽‍❤️‍👩🏻", "👩🏽‍❤️‍👩🏼", "👩🏽‍❤️‍👩🏽", "👩🏽‍❤️‍👩🏾", "👩🏽‍❤️‍👩🏿", "👩🏾‍❤️‍👩🏻", "👩🏾‍❤️‍👩🏼", "👩🏾‍❤️‍👩🏽", "👩🏾‍❤️‍👩🏾", "👩🏾‍❤️‍👩🏿", "👩🏿‍❤️‍👩🏻", "👩🏿‍❤️‍👩🏼", "👩🏿‍❤️‍👩🏽", "👩🏿‍❤️‍👩🏾", "👩🏿‍❤️‍👩🏿", "👪", "👨‍👩‍👦", "👨‍👩‍👧", "👨‍👩‍👧‍👦", "👨‍👩‍👦‍👦", "👨‍👩‍👧‍👧", "👨‍👨‍👦", "👨‍👨‍👧", "👨‍👨‍👧‍👦", "👨‍👨‍👦‍👦", "👨‍👨‍👧‍👧", "👩‍👩‍👦", "👩‍👩‍👧", "👩‍👩‍👧‍👦", "👩‍👩‍👦‍👦", "👩‍👩‍👧‍👧", "👨‍👦", "👨‍👦‍👦", "👨‍👧", "👨‍👧‍👦", "👨‍👧‍👧", "👩‍👦", "👩‍👦‍👦", "👩‍👧", "👩‍👧‍👦", "👩‍👧‍👧", "🗣️", "👤", "👥", "🫂", "👣"], nature: ["🐵", "🐒", "🦍", "🦧", "🐶", "🐕", "🦮", "🐕‍🦺", "🐩", "🐺", "🦊", "🦝", "🐱", "🐈", "🐈‍⬛", "🦁", "🐯", "🐅", "🐆", "🐴", "🐎", "🦄", "🦓", "🦌", "🦬", "🐮", "🐂", "🐃", "🐄", "🐷", "🐖", "🐗", "🐽", "🐏", "🐑", "🐐", "🐪", "🐫", "🦙", "🦒", "🐘", "🦣", "🦏", "🦛", "🐭", "🐁", "🐀", "🐹", "🐰", "🐇", "🐿️", "🦫", "🦔", "🦇", "🐻", "🐻‍❄️", "🐨", "🐼", "🦥", "🦦", "🦨", "🦘", "🦡", "🐾", "🦃", "🐔", "🐓", "🐣", "🐤", "🐥", "🐦", "🐧", "🕊️", "🦅", "🦆", "🦢", "🦉", "🦤", "🪶", "🦩", "🦚", "🦜", "🐸", "🐊", "🐢", "🦎", "🐍", "🐲", "🐉", "🦕", "🦖", "🐳", "🐋", "🐬", "🦭", "🐟", "🐠", "🐡", "🦈", "🐙", "🐚", "🐌", "🦋", "🐛", "🐜", "🐝", "🪲", "🐞", "🦗", "🪳", "🕷️", "🕸️", "🦂", "🦟", "🪰", "🪱", "🦠", "💐", "🌸", "💮", "🏵️", "🌹", "🥀", "🌺", "🌻", "🌼", "🌷", "🌱", "🪴", "🌲", "🌳", "🌴", "🌵", "🌾", "🌿", "☘️", "🍀", "🍁", "🍂", "🍃"], food: ["🍇", "🍈", "🍉", "🍊", "🍋", "🍌", "🍍", "🥭", "🍎", "🍏", "🍐", "🍑", "🍒", "🍓", "🫐", "🥝", "🍅", "🫒", "🥥", "🥑", "🍆", "🥔", "🥕", "🌽", "🌶️", "🫑", "🥒", "🥬", "🥦", "🧄", "🧅", "🍄", "🥜", "🌰", "🍞", "🥐", "🥖", "🫓", "🥨", "🥯", "🥞", "🧇", "🧀", "🍖", "🍗", "🥩", "🥓", "🍔", "🍟", "🍕", "🌭", "🥪", "🌮", "🌯", "🫔", "🥙", "🧆", "🥚", "🍳", "🥘", "🍲", "🫕", "🥣", "🥗", "🍿", "🧈", "🧂", "🥫", "🍱", "🍘", "🍙", "🍚", "🍛", "🍜", "🍝", "🍠", "🍢", "🍣", "🍤", "🍥", "🥮", "🍡", "🥟", "🥠", "🥡", "🦀", "🦞", "🦐", "🦑", "🦪", "🍦", "🍧", "🍨", "🍩", "🍪", "🎂", "🍰", "🧁", "🥧", "🍫", "🍬", "🍭", "🍮", "🍯", "🍼", "🥛", "☕", "🫖", "🍵", "🍶", "🍾", "🍷", "🍸", "🍹", "🍺", "🍻", "🥂", "🥃", "🥤", "🧋", "🧃", "🧉", "🧊", "🥢", "🍽️", "🍴", "🥄", "🔪", "🏺"], travel: ["🌍", "🌎", "🌏", "🌐", "🗺️", "🗾", "🧭", "🏔️", "⛰️", "🌋", "🗻", "🏕️", "🏖️", "🏜️", "🏝️", "🏞️", "🏟️", "🏛️", "🏗️", "🧱", "🪨", "🪵", "🛖", "🏘️", "🏚️", "🏠", "🏡", "🏢", "🏣", "🏤", "🏥", "🏦", "🏨", "🏩", "🏪", "🏫", "🏬", "🏭", "🏯", "🏰", "💒", "🗼", "🗽", "⛪", "🕌", "🛕", "🕍", "⛩️", "🕋", "⛲", "⛺", "🌁", "🌃", "🏙️", "🌄", "🌅", "🌆", "🌇", "🌉", "♨️", "🎠", "🎡", "🎢", "💈", "🎪", "🚂", "🚃", "🚄", "🚅", "🚆", "🚇", "🚈", "🚉", "🚊", "🚝", "🚞", "🚋", "🚌", "🚍", "🚎", "🚐", "🚑", "🚒", "🚓", "🚔", "🚕", "🚖", "🚗", "🚘", "🚙", "🛻", "🚚", "🚛", "🚜", "🏎️", "🏍️", "🛵", "🦽", "🦼", "🛺", "🚲", "🛴", "🛹", "🛼", "🚏", "🛣️", "🛤️", "🛢️", "⛽", "🚨", "🚥", "🚦", "🛑", "🚧", "⚓", "⛵", "🛶", "🚤", "🛳️", "⛴️", "🛥️", "🚢", "✈️", "🛩️", "🛫", "🛬", "🪂", "💺", "🚁", "🚟", "🚠", "🚡", "🛰️", "🚀", "🛸", "🛎️", "🧳", "⌛", "⏳", "⌚", "⏰", "⏱️", "⏲️", "🕰️", "🕛", "🕧", "🕐", "🕜", "🕑", "🕝", "🕒", "🕞", "🕓", "🕟", "🕔", "🕠", "🕕", "🕡", "🕖", "🕢", "🕗", "🕣", "🕘", "🕤", "🕙", "🕥", "🕚", "🕦", "🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘", "🌙", "🌚", "🌛", "🌜", "🌡️", "☀️", "🌝", "🌞", "🪐", "⭐", "🌟", "🌠", "🌌", "☁️", "⛅", "⛈️", "🌤️", "🌥️", "🌦️", "🌧️", "🌨️", "🌩️", "🌪️", "🌫️", "🌬️", "🌀", "🌈", "🌂", "☂️", "☔", "⛱️", "⚡", "❄️", "☃️", "⛄", "☄️", "🔥", "💧", "🌊"], activity: ["🎃", "🎄", "🎆", "🎇", "🧨", "✨", "🎈", "🎉", "🎊", "🎋", "🎍", "🎎", "🎏", "🎐", "🎑", "🧧", "🎀", "🎁", "🎗️", "🎟️", "🎫", "🎖️", "🏆", "🏅", "🥇", "🥈", "🥉", "⚽", "⚾", "🥎", "🏀", "🏐", "🏈", "🏉", "🎾", "🥏", "🎳", "🏏", "🏑", "🏒", "🥍", "🏓", "🏸", "🥊", "🥋", "🥅", "⛳", "⛸️", "🎣", "🤿", "🎽", "🎿", "🛷", "🥌", "🎯", "🪀", "🪁", "🎱", "🔮", "🪄", "🧿", "🎮", "🕹️", "🎰", "🎲", "🧩", "🧸", "🪅", "🪆", "♠️", "♥️", "♦️", "♣️", "♟️", "🃏", "🀄", "🎴", "🎭", "🖼️", "🎨", "🧵", "🪡", "🧶", "🪢"], object: ["👓", "🕶️", "🥽", "🥼", "🦺", "👔", "👕", "👖", "🧣", "🧤", "🧥", "🧦", "👗", "👘", "🥻", "🩱", "🩲", "🩳", "👙", "👚", "👛", "👜", "👝", "🛍️", "🎒", "🩴", "👞", "👟", "🥾", "🥿", "👠", "👡", "🩰", "👢", "👑", "👒", "🎩", "🎓", "🧢", "🪖", "⛑️", "📿", "💄", "💍", "💎", "🔇", "🔈", "🔉", "🔊", "📢", "📣", "📯", "🔔", "🔕", "🎼", "🎵", "🎶", "🎙️", "🎚️", "🎛️", "🎤", "🎧", "📻", "🎷", "🪗", "🎸", "🎹", "🎺", "🎻", "🪕", "🥁", "🪘", "📱", "📲", "☎️", "📞", "📟", "📠", "🔋", "🔌", "💻", "🖥️", "🖨️", "⌨️", "🖱️", "🖲️", "💽", "💾", "💿", "📀", "🧮", "🎥", "🎞️", "📽️", "🎬", "📺", "📷", "📸", "📹", "📼", "🔍", "🔎", "🕯️", "💡", "🔦", "🏮", "🪔", "📔", "📕", "📖", "📗", "📘", "📙", "📚", "📓", "📒", "📃", "📜", "📄", "📰", "🗞️", "📑", "🔖", "🏷️", "💰", "🪙", "💴", "💵", "💶", "💷", "💸", "💳", "🧾", "💹", "✉️", "📧", "📨", "📩", "📤", "📥", "📦", "📫", "📪", "📬", "📭", "📮", "🗳️", "✏️", "✒️", "🖋️", "🖊️", "🖌️", "🖍️", "📝", "💼", "📁", "📂", "🗂️", "📅", "📆", "🗒️", "🗓️", "📇", "📈", "📉", "📊", "📋", "📌", "📍", "📎", "🖇️", "📏", "📐", "✂️", "🗃️", "🗄️", "🗑️", "🔒", "🔓", "🔏", "🔐", "🔑", "🗝️", "🔨", "🪓", "⛏️", "⚒️", "🛠️", "🗡️", "⚔️", "🔫", "🪃", "🏹", "🛡️", "🪚", "🔧", "🪛", "🔩", "⚙️", "🗜️", "⚖️", "🦯", "🔗", "⛓️", "🪝", "🧰", "🧲", "🪜", "⚗️", "🧪", "🧫", "🧬", "🔬", "🔭", "📡", "💉", "🩸", "💊", "🩹", "🩺", "🚪", "🛗", "🪞", "🪟", "🛏️", "🛋️", "🪑", "🚽", "🪠", "🚿", "🛁", "🪤", "🪒", "🧴", "🧷", "🧹", "🧺", "🧻", "🪣", "🧼", "🪥", "🧽", "🧯", "🛒", "🚬", "⚰️", "🪦", "⚱️", "🗿", "🪧"], symbol: ["🏧", "🚮", "🚰", "♿", "🚹", "🚺", "🚻", "🚼", "🚾", "🛂", "🛃", "🛄", "🛅", "⚠️", "🚸", "⛔", "🚫", "🚳", "🚭", "🚯", "🚱", "🚷", "📵", "🔞", "☢️", "☣️", "⬆️", "↗️", "➡️", "↘️", "⬇️", "↙️", "⬅️", "↖️", "↕️", "↔️", "↩️", "↪️", "⤴️", "⤵️", "🔃", "🔄", "🔙", "🔚", "🔛", "🔜", "🔝", "🛐", "⚛️", "🕉️", "✡️", "☸️", "☯️", "✝️", "☦️", "☪️", "☮️", "🕎", "🔯", "♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓", "⛎", "🔀", "🔁", "🔂", "▶️", "⏩", "⏭️", "⏯️", "◀️", "⏪", "⏮️", "🔼", "⏫", "🔽", "⏬", "⏸️", "⏹️", "⏺️", "⏏️", "🎦", "🔅", "🔆", "📶", "📳", "📴", "♀️", "♂️", "⚧️", "✖️", "➕", "➖", "➗", "♾️", "‼️", "⁉️", "❓", "❔", "❕", "❗", "〰️", "💱", "💲", "⚕️", "♻️", "⚜️", "🔱", "📛", "🔰", "⭕", "✅", "☑️", "✔️", "❌", "❎", "➰", "➿", "〽️", "✳️", "✴️", "❇️", "©️", "®️", "™️", "#️⃣", "*️⃣", "0️⃣", "1️⃣", "2️⃣", "3️⃣", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣", "🔟", "🔠", "🔡", "🔢", "🔣", "🔤", "🅰️", "🆎", "🅱️", "🆑", "🆒", "🆓", "ℹ️", "🆔", "Ⓜ️", "🆕", "🆖", "🅾️", "🆗", "🅿️", "🆘", "🆙", "🆚", "🈁", "🈂️", "🈷️", "🈶", "🈯", "🉐", "🈹", "🈚", "🈲", "🉑", "🈸", "🈴", "🈳", "㊗️", "㊙️", "🈺", "🈵", "🔴", "🟠", "🟡", "🟢", "🔵", "🟣", "🟤", "⚫", "⚪", "🟥", "🟧", "🟨", "🟩", "🟦", "🟪", "🟫", "⬛", "⬜", "◼️", "◻️", "◾", "◽", "▪️", "▫️", "🔶", "🔷", "🔸", "🔹", "🔺", "🔻", "💠", "🔘", "🔳", "🔲"], flag: ["🏁", "🚩", "🎌", "🏴", "🏳️", "🏳️‍🌈", "🏳️‍⚧️", "🏴‍☠️", "🇦🇨", "🇦🇩", "🇦🇪", "🇦🇫", "🇦🇬", "🇦🇮", "🇦🇱", "🇦🇲", "🇦🇴", "🇦🇶", "🇦🇷", "🇦🇸", "🇦🇹", "🇦🇺", "🇦🇼", "🇦🇽", "🇦🇿", "🇧🇦", "🇧🇧", "🇧🇩", "🇧🇪", "🇧🇫", "🇧🇬", "🇧🇭", "🇧🇮", "🇧🇯", "🇧🇱", "🇧🇲", "🇧🇳", "🇧🇴", "🇧🇶", "🇧🇷", "🇧🇸", "🇧🇹", "🇧🇻", "🇧🇼", "🇧🇾", "🇧🇿", "🇨🇦", "🇨🇨", "🇨🇩", "🇨🇫", "🇨🇬", "🇨🇭", "🇨🇮", "🇨🇰", "🇨🇱", "🇨🇲", "🇨🇳", "🇨🇴", "🇨🇵", "🇨🇷", "🇨🇺", "🇨🇻", "🇨🇼", "🇨🇽", "🇨🇾", "🇨🇿", "🇩🇪", "🇩🇬", "🇩🇯", "🇩🇰", "🇩🇲", "🇩🇴", "🇩🇿", "🇪🇦", "🇪🇨", "🇪🇪", "🇪🇬", "🇪🇭", "🇪🇷", "🇪🇸", "🇪🇹", "🇪🇺", "🇫🇮", "🇫🇯", "🇫🇰", "🇫🇲", "🇫🇴", "🇫🇷", "🇬🇦", "🇬🇧", "🇬🇩", "🇬🇪", "🇬🇫", "🇬🇬", "🇬🇭", "🇬🇮", "🇬🇱", "🇬🇲", "🇬🇳", "🇬🇵", "🇬🇶", "🇬🇷", "🇬🇸", "🇬🇹", "🇬🇺", "🇬🇼", "🇬🇾", "🇭🇰", "🇭🇲", "🇭🇳", "🇭🇷", "🇭🇹", "🇭🇺", "🇮🇨", "🇮🇩", "🇮🇪", "🇮🇱", "🇮🇲", "🇮🇳", "🇮🇴", "🇮🇶", "🇮🇷", "🇮🇸", "🇮🇹", "🇯🇪", "🇯🇲", "🇯🇴", "🇯🇵", "🇰🇪", "🇰🇬", "🇰🇭", "🇰🇮", "🇰🇲", "🇰🇳", "🇰🇵", "🇰🇷", "🇰🇼", "🇰🇾", "🇰🇿", "🇱🇦", "🇱🇧", "🇱🇨", "🇱🇮", "🇱🇰", "🇱🇷", "🇱🇸", "🇱🇹", "🇱🇺", "🇱🇻", "🇱🇾", "🇲🇦", "🇲🇨", "🇲🇩", "🇲🇪", "🇲🇫", "🇲🇬", "🇲🇭", "🇲🇰", "🇲🇱", "🇲🇲", "🇲🇳", "🇲🇴", "🇲🇵", "🇲🇶", "🇲🇷", "🇲🇸", "🇲🇹", "🇲🇺", "🇲🇻", "🇲🇼", "🇲🇽", "🇲🇾", "🇲🇿", "🇳🇦", "🇳🇨", "🇳🇪", "🇳🇫", "🇳🇬", "🇳🇮", "🇳🇱", "🇳🇴", "🇳🇵", "🇳🇷", "🇳🇺", "🇳🇿", "🇴🇲", "🇵🇦", "🇵🇪", "🇵🇫", "🇵🇬", "🇵🇭", "🇵🇰", "🇵🇱", "🇵🇲", "🇵🇳", "🇵🇷", "🇵🇸", "🇵🇹", "🇵🇼", "🇵🇾", "🇶🇦", "🇷🇪", "🇷🇴", "🇷🇸", "🇷🇺", "🇷🇼", "🇸🇦", "🇸🇧", "🇸🇨", "🇸🇩", "🇸🇪", "🇸🇬", "🇸🇭", "🇸🇮", "🇸🇯", "🇸🇰", "🇸🇱", "🇸🇲", "🇸🇳", "🇸🇴", "🇸🇷", "🇸🇸", "🇸🇹", "🇸🇻", "🇸🇽", "🇸🇾", "🇸🇿", "🇹🇦", "🇹🇨", "🇹🇩", "🇹🇫", "🇹🇬", "🇹🇭", "🇹🇯", "🇹🇰", "🇹🇱", "🇹🇲", "🇹🇳", "🇹🇴", "🇹🇷", "🇹🇹", "🇹🇻", "🇹🇼", "🇹🇿", "🇺🇦", "🇺🇬", "🇺🇲", "🇺🇳", "🇺🇸", "🇺🇾", "🇺🇿", "🇻🇦", "🇻🇨", "🇻🇪", "🇻🇬", "🇻🇮", "🇻🇳", "🇻🇺", "🇼🇫", "🇼🇸", "🇽🇰", "🇾🇪", "🇾🇹", "🇿🇦", "🇿🇲", "🇿🇼"] };
var rr = { informational: [100, 101, 102, 103], success: [200, 201, 202, 203, 204, 205, 206, 207, 208, 226], redirection: [300, 301, 302, 303, 304, 305, 306, 307, 308], clientError: [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451], serverError: [500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511] };
var Hr = { emoji: er2, http_status_code: rr };
var tr = Hr;
var ar = [{ alpha2: "AD", alpha3: "AND", numeric: "020" }, { alpha2: "AE", alpha3: "ARE", numeric: "784" }, { alpha2: "AF", alpha3: "AFG", numeric: "004" }, { alpha2: "AG", alpha3: "ATG", numeric: "028" }, { alpha2: "AI", alpha3: "AIA", numeric: "660" }, { alpha2: "AL", alpha3: "ALB", numeric: "008" }, { alpha2: "AM", alpha3: "ARM", numeric: "051" }, { alpha2: "AO", alpha3: "AGO", numeric: "024" }, { alpha2: "AQ", alpha3: "ATA", numeric: "010" }, { alpha2: "AR", alpha3: "ARG", numeric: "032" }, { alpha2: "AS", alpha3: "ASM", numeric: "016" }, { alpha2: "AT", alpha3: "AUT", numeric: "040" }, { alpha2: "AU", alpha3: "AUS", numeric: "036" }, { alpha2: "AW", alpha3: "ABW", numeric: "533" }, { alpha2: "AX", alpha3: "ALA", numeric: "248" }, { alpha2: "AZ", alpha3: "AZE", numeric: "031" }, { alpha2: "BA", alpha3: "BIH", numeric: "070" }, { alpha2: "BB", alpha3: "BRB", numeric: "052" }, { alpha2: "BD", alpha3: "BGD", numeric: "050" }, { alpha2: "BE", alpha3: "BEL", numeric: "056" }, { alpha2: "BF", alpha3: "BFA", numeric: "854" }, { alpha2: "BG", alpha3: "BGR", numeric: "100" }, { alpha2: "BH", alpha3: "BHR", numeric: "048" }, { alpha2: "BI", alpha3: "BDI", numeric: "108" }, { alpha2: "BJ", alpha3: "BEN", numeric: "204" }, { alpha2: "BL", alpha3: "BLM", numeric: "652" }, { alpha2: "BM", alpha3: "BMU", numeric: "060" }, { alpha2: "BN", alpha3: "BRN", numeric: "096" }, { alpha2: "BO", alpha3: "BOL", numeric: "068" }, { alpha2: "BQ", alpha3: "BES", numeric: "535" }, { alpha2: "BR", alpha3: "BRA", numeric: "076" }, { alpha2: "BS", alpha3: "BHS", numeric: "044" }, { alpha2: "BT", alpha3: "BTN", numeric: "064" }, { alpha2: "BV", alpha3: "BVT", numeric: "074" }, { alpha2: "BW", alpha3: "BWA", numeric: "072" }, { alpha2: "BY", alpha3: "BLR", numeric: "112" }, { alpha2: "BZ", alpha3: "BLZ", numeric: "084" }, { alpha2: "CA", alpha3: "CAN", numeric: "124" }, { alpha2: "CC", alpha3: "CCK", numeric: "166" }, { alpha2: "CD", alpha3: "COD", numeric: "180" }, { alpha2: "CF", alpha3: "CAF", numeric: "140" }, { alpha2: "CG", alpha3: "COG", numeric: "178" }, { alpha2: "CH", alpha3: "CHE", numeric: "756" }, { alpha2: "CI", alpha3: "CIV", numeric: "384" }, { alpha2: "CK", alpha3: "COK", numeric: "184" }, { alpha2: "CL", alpha3: "CHL", numeric: "152" }, { alpha2: "CM", alpha3: "CMR", numeric: "120" }, { alpha2: "CN", alpha3: "CHN", numeric: "156" }, { alpha2: "CO", alpha3: "COL", numeric: "170" }, { alpha2: "CR", alpha3: "CRI", numeric: "188" }, { alpha2: "CU", alpha3: "CUB", numeric: "192" }, { alpha2: "CV", alpha3: "CPV", numeric: "132" }, { alpha2: "CW", alpha3: "CUW", numeric: "531" }, { alpha2: "CX", alpha3: "CXR", numeric: "162" }, { alpha2: "CY", alpha3: "CYP", numeric: "196" }, { alpha2: "CZ", alpha3: "CZE", numeric: "203" }, { alpha2: "DE", alpha3: "DEU", numeric: "276" }, { alpha2: "DJ", alpha3: "DJI", numeric: "262" }, { alpha2: "DK", alpha3: "DNK", numeric: "208" }, { alpha2: "DM", alpha3: "DMA", numeric: "212" }, { alpha2: "DO", alpha3: "DOM", numeric: "214" }, { alpha2: "DZ", alpha3: "DZA", numeric: "012" }, { alpha2: "EC", alpha3: "ECU", numeric: "218" }, { alpha2: "EE", alpha3: "EST", numeric: "233" }, { alpha2: "EG", alpha3: "EGY", numeric: "818" }, { alpha2: "EH", alpha3: "ESH", numeric: "732" }, { alpha2: "ER", alpha3: "ERI", numeric: "232" }, { alpha2: "ES", alpha3: "ESP", numeric: "724" }, { alpha2: "ET", alpha3: "ETH", numeric: "231" }, { alpha2: "FI", alpha3: "FIN", numeric: "246" }, { alpha2: "FJ", alpha3: "FJI", numeric: "242" }, { alpha2: "FK", alpha3: "FLK", numeric: "238" }, { alpha2: "FM", alpha3: "FSM", numeric: "583" }, { alpha2: "FO", alpha3: "FRO", numeric: "234" }, { alpha2: "FR", alpha3: "FRA", numeric: "250" }, { alpha2: "GA", alpha3: "GAB", numeric: "266" }, { alpha2: "GB", alpha3: "GBR", numeric: "826" }, { alpha2: "GD", alpha3: "GRD", numeric: "308" }, { alpha2: "GE", alpha3: "GEO", numeric: "268" }, { alpha2: "GF", alpha3: "GUF", numeric: "254" }, { alpha2: "GG", alpha3: "GGY", numeric: "831" }, { alpha2: "GH", alpha3: "GHA", numeric: "288" }, { alpha2: "GI", alpha3: "GIB", numeric: "292" }, { alpha2: "GL", alpha3: "GRL", numeric: "304" }, { alpha2: "GM", alpha3: "GMB", numeric: "270" }, { alpha2: "GN", alpha3: "GIN", numeric: "324" }, { alpha2: "GP", alpha3: "GLP", numeric: "312" }, { alpha2: "GQ", alpha3: "GNQ", numeric: "226" }, { alpha2: "GR", alpha3: "GRC", numeric: "300" }, { alpha2: "GS", alpha3: "SGS", numeric: "239" }, { alpha2: "GT", alpha3: "GTM", numeric: "320" }, { alpha2: "GU", alpha3: "GUM", numeric: "316" }, { alpha2: "GW", alpha3: "GNB", numeric: "624" }, { alpha2: "GY", alpha3: "GUY", numeric: "328" }, { alpha2: "HK", alpha3: "HKG", numeric: "344" }, { alpha2: "HM", alpha3: "HMD", numeric: "334" }, { alpha2: "HN", alpha3: "HND", numeric: "340" }, { alpha2: "HR", alpha3: "HRV", numeric: "191" }, { alpha2: "HT", alpha3: "HTI", numeric: "332" }, { alpha2: "HU", alpha3: "HUN", numeric: "348" }, { alpha2: "ID", alpha3: "IDN", numeric: "360" }, { alpha2: "IE", alpha3: "IRL", numeric: "372" }, { alpha2: "IL", alpha3: "ISR", numeric: "376" }, { alpha2: "IM", alpha3: "IMN", numeric: "833" }, { alpha2: "IN", alpha3: "IND", numeric: "356" }, { alpha2: "IO", alpha3: "IOT", numeric: "086" }, { alpha2: "IQ", alpha3: "IRQ", numeric: "368" }, { alpha2: "IR", alpha3: "IRN", numeric: "364" }, { alpha2: "IS", alpha3: "ISL", numeric: "352" }, { alpha2: "IT", alpha3: "ITA", numeric: "380" }, { alpha2: "JE", alpha3: "JEY", numeric: "832" }, { alpha2: "JM", alpha3: "JAM", numeric: "388" }, { alpha2: "JO", alpha3: "JOR", numeric: "400" }, { alpha2: "JP", alpha3: "JPN", numeric: "392" }, { alpha2: "KE", alpha3: "KEN", numeric: "404" }, { alpha2: "KG", alpha3: "KGZ", numeric: "417" }, { alpha2: "KH", alpha3: "KHM", numeric: "116" }, { alpha2: "KI", alpha3: "KIR", numeric: "296" }, { alpha2: "KM", alpha3: "COM", numeric: "174" }, { alpha2: "KN", alpha3: "KNA", numeric: "659" }, { alpha2: "KP", alpha3: "PRK", numeric: "408" }, { alpha2: "KR", alpha3: "KOR", numeric: "410" }, { alpha2: "KW", alpha3: "KWT", numeric: "414" }, { alpha2: "KY", alpha3: "CYM", numeric: "136" }, { alpha2: "KZ", alpha3: "KAZ", numeric: "398" }, { alpha2: "LA", alpha3: "LAO", numeric: "418" }, { alpha2: "LB", alpha3: "LBN", numeric: "422" }, { alpha2: "LC", alpha3: "LCA", numeric: "662" }, { alpha2: "LI", alpha3: "LIE", numeric: "438" }, { alpha2: "LK", alpha3: "LKA", numeric: "144" }, { alpha2: "LR", alpha3: "LBR", numeric: "430" }, { alpha2: "LS", alpha3: "LSO", numeric: "426" }, { alpha2: "LT", alpha3: "LTU", numeric: "440" }, { alpha2: "LU", alpha3: "LUX", numeric: "442" }, { alpha2: "LV", alpha3: "LVA", numeric: "428" }, { alpha2: "LY", alpha3: "LBY", numeric: "434" }, { alpha2: "MA", alpha3: "MAR", numeric: "504" }, { alpha2: "MC", alpha3: "MCO", numeric: "492" }, { alpha2: "MD", alpha3: "MDA", numeric: "498" }, { alpha2: "ME", alpha3: "MNE", numeric: "499" }, { alpha2: "MF", alpha3: "MAF", numeric: "663" }, { alpha2: "MG", alpha3: "MDG", numeric: "450" }, { alpha2: "MH", alpha3: "MHL", numeric: "584" }, { alpha2: "MK", alpha3: "MKD", numeric: "807" }, { alpha2: "ML", alpha3: "MLI", numeric: "466" }, { alpha2: "MM", alpha3: "MMR", numeric: "104" }, { alpha2: "MN", alpha3: "MNG", numeric: "496" }, { alpha2: "MO", alpha3: "MAC", numeric: "446" }, { alpha2: "MP", alpha3: "MNP", numeric: "580" }, { alpha2: "MQ", alpha3: "MTQ", numeric: "474" }, { alpha2: "MR", alpha3: "MRT", numeric: "478" }, { alpha2: "MS", alpha3: "MSR", numeric: "500" }, { alpha2: "MT", alpha3: "MLT", numeric: "470" }, { alpha2: "MU", alpha3: "MUS", numeric: "480" }, { alpha2: "MV", alpha3: "MDV", numeric: "462" }, { alpha2: "MW", alpha3: "MWI", numeric: "454" }, { alpha2: "MX", alpha3: "MEX", numeric: "484" }, { alpha2: "MY", alpha3: "MYS", numeric: "458" }, { alpha2: "MZ", alpha3: "MOZ", numeric: "508" }, { alpha2: "NA", alpha3: "NAM", numeric: "516" }, { alpha2: "NC", alpha3: "NCL", numeric: "540" }, { alpha2: "NE", alpha3: "NER", numeric: "562" }, { alpha2: "NF", alpha3: "NFK", numeric: "574" }, { alpha2: "NG", alpha3: "NGA", numeric: "566" }, { alpha2: "NI", alpha3: "NIC", numeric: "558" }, { alpha2: "NL", alpha3: "NLD", numeric: "528" }, { alpha2: "NO", alpha3: "NOR", numeric: "578" }, { alpha2: "NP", alpha3: "NPL", numeric: "524" }, { alpha2: "NR", alpha3: "NRU", numeric: "520" }, { alpha2: "NU", alpha3: "NIU", numeric: "570" }, { alpha2: "NZ", alpha3: "NZL", numeric: "554" }, { alpha2: "OM", alpha3: "OMN", numeric: "512" }, { alpha2: "PA", alpha3: "PAN", numeric: "591" }, { alpha2: "PE", alpha3: "PER", numeric: "604" }, { alpha2: "PF", alpha3: "PYF", numeric: "258" }, { alpha2: "PG", alpha3: "PNG", numeric: "598" }, { alpha2: "PH", alpha3: "PHL", numeric: "608" }, { alpha2: "PK", alpha3: "PAK", numeric: "586" }, { alpha2: "PL", alpha3: "POL", numeric: "616" }, { alpha2: "PM", alpha3: "SPM", numeric: "666" }, { alpha2: "PN", alpha3: "PCN", numeric: "612" }, { alpha2: "PR", alpha3: "PRI", numeric: "630" }, { alpha2: "PS", alpha3: "PSE", numeric: "275" }, { alpha2: "PT", alpha3: "PRT", numeric: "620" }, { alpha2: "PW", alpha3: "PLW", numeric: "585" }, { alpha2: "PY", alpha3: "PRY", numeric: "600" }, { alpha2: "QA", alpha3: "QAT", numeric: "634" }, { alpha2: "RE", alpha3: "REU", numeric: "638" }, { alpha2: "RO", alpha3: "ROU", numeric: "642" }, { alpha2: "RS", alpha3: "SRB", numeric: "688" }, { alpha2: "RU", alpha3: "RUS", numeric: "643" }, { alpha2: "RW", alpha3: "RWA", numeric: "646" }, { alpha2: "SA", alpha3: "SAU", numeric: "682" }, { alpha2: "SB", alpha3: "SLB", numeric: "090" }, { alpha2: "SC", alpha3: "SYC", numeric: "690" }, { alpha2: "SD", alpha3: "SDN", numeric: "729" }, { alpha2: "SE", alpha3: "SWE", numeric: "752" }, { alpha2: "SG", alpha3: "SGP", numeric: "702" }, { alpha2: "SH", alpha3: "SHN", numeric: "654" }, { alpha2: "SI", alpha3: "SVN", numeric: "705" }, { alpha2: "SJ", alpha3: "SJM", numeric: "744" }, { alpha2: "SK", alpha3: "SVK", numeric: "703" }, { alpha2: "SL", alpha3: "SLE", numeric: "694" }, { alpha2: "SM", alpha3: "SMR", numeric: "674" }, { alpha2: "SN", alpha3: "SEN", numeric: "686" }, { alpha2: "SO", alpha3: "SOM", numeric: "706" }, { alpha2: "SR", alpha3: "SUR", numeric: "740" }, { alpha2: "SS", alpha3: "SSD", numeric: "728" }, { alpha2: "ST", alpha3: "STP", numeric: "678" }, { alpha2: "SV", alpha3: "SLV", numeric: "222" }, { alpha2: "SX", alpha3: "SXM", numeric: "534" }, { alpha2: "SY", alpha3: "SYR", numeric: "760" }, { alpha2: "SZ", alpha3: "SWZ", numeric: "748" }, { alpha2: "TC", alpha3: "TCA", numeric: "796" }, { alpha2: "TD", alpha3: "TCD", numeric: "148" }, { alpha2: "TF", alpha3: "ATF", numeric: "260" }, { alpha2: "TG", alpha3: "TGO", numeric: "768" }, { alpha2: "TH", alpha3: "THA", numeric: "764" }, { alpha2: "TJ", alpha3: "TJK", numeric: "762" }, { alpha2: "TK", alpha3: "TKL", numeric: "772" }, { alpha2: "TL", alpha3: "TLS", numeric: "626" }, { alpha2: "TM", alpha3: "TKM", numeric: "795" }, { alpha2: "TN", alpha3: "TUN", numeric: "788" }, { alpha2: "TO", alpha3: "TON", numeric: "776" }, { alpha2: "TR", alpha3: "TUR", numeric: "792" }, { alpha2: "TT", alpha3: "TTO", numeric: "780" }, { alpha2: "TV", alpha3: "TUV", numeric: "798" }, { alpha2: "TW", alpha3: "TWN", numeric: "158" }, { alpha2: "TZ", alpha3: "TZA", numeric: "834" }, { alpha2: "UA", alpha3: "UKR", numeric: "804" }, { alpha2: "UG", alpha3: "UGA", numeric: "800" }, { alpha2: "UM", alpha3: "UMI", numeric: "581" }, { alpha2: "US", alpha3: "USA", numeric: "840" }, { alpha2: "UY", alpha3: "URY", numeric: "858" }, { alpha2: "UZ", alpha3: "UZB", numeric: "860" }, { alpha2: "VA", alpha3: "VAT", numeric: "336" }, { alpha2: "VC", alpha3: "VCT", numeric: "670" }, { alpha2: "VE", alpha3: "VEN", numeric: "862" }, { alpha2: "VG", alpha3: "VGB", numeric: "092" }, { alpha2: "VI", alpha3: "VIR", numeric: "850" }, { alpha2: "VN", alpha3: "VNM", numeric: "704" }, { alpha2: "VU", alpha3: "VUT", numeric: "548" }, { alpha2: "WF", alpha3: "WLF", numeric: "876" }, { alpha2: "WS", alpha3: "WSM", numeric: "882" }, { alpha2: "YE", alpha3: "YEM", numeric: "887" }, { alpha2: "YT", alpha3: "MYT", numeric: "175" }, { alpha2: "ZA", alpha3: "ZAF", numeric: "710" }, { alpha2: "ZM", alpha3: "ZMB", numeric: "894" }, { alpha2: "ZW", alpha3: "ZWE", numeric: "716" }];
var nr = ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", "Africa/Algiers", "Africa/Asmara", "Africa/Bamako", "Africa/Bangui", "Africa/Banjul", "Africa/Bissau", "Africa/Blantyre", "Africa/Brazzaville", "Africa/Bujumbura", "Africa/Cairo", "Africa/Casablanca", "Africa/Ceuta", "Africa/Conakry", "Africa/Dakar", "Africa/Dar_es_Salaam", "Africa/Djibouti", "Africa/Douala", "Africa/El_Aaiun", "Africa/Freetown", "Africa/Gaborone", "Africa/Harare", "Africa/Johannesburg", "Africa/Juba", "Africa/Kampala", "Africa/Khartoum", "Africa/Kigali", "Africa/Kinshasa", "Africa/Lagos", "Africa/Libreville", "Africa/Lome", "Africa/Luanda", "Africa/Lubumbashi", "Africa/Lusaka", "Africa/Malabo", "Africa/Maputo", "Africa/Maseru", "Africa/Mbabane", "Africa/Mogadishu", "Africa/Monrovia", "Africa/Nairobi", "Africa/Ndjamena", "Africa/Niamey", "Africa/Nouakchott", "Africa/Ouagadougou", "Africa/Porto-Novo", "Africa/Sao_Tome", "Africa/Tripoli", "Africa/Tunis", "Africa/Windhoek", "America/Adak", "America/Anchorage", "America/Anguilla", "America/Antigua", "America/Araguaina", "America/Argentina/Buenos_Aires", "America/Argentina/Catamarca", "America/Argentina/Cordoba", "America/Argentina/Jujuy", "America/Argentina/La_Rioja", "America/Argentina/Mendoza", "America/Argentina/Rio_Gallegos", "America/Argentina/Salta", "America/Argentina/San_Juan", "America/Argentina/San_Luis", "America/Argentina/Tucuman", "America/Argentina/Ushuaia", "America/Aruba", "America/Asuncion", "America/Atikokan", "America/Bahia", "America/Bahia_Banderas", "America/Barbados", "America/Belem", "America/Belize", "America/Blanc-Sablon", "America/Boa_Vista", "America/Bogota", "America/Boise", "America/Cambridge_Bay", "America/Campo_Grande", "America/Cancun", "America/Caracas", "America/Cayenne", "America/Cayman", "America/Chicago", "America/Chihuahua", "America/Costa_Rica", "America/Creston", "America/Cuiaba", "America/Curacao", "America/Danmarkshavn", "America/Dawson", "America/Dawson_Creek", "America/Denver", "America/Detroit", "America/Dominica", "America/Edmonton", "America/Eirunepe", "America/El_Salvador", "America/Fort_Nelson", "America/Fortaleza", "America/Glace_Bay", "America/Goose_Bay", "America/Grand_Turk", "America/Grenada", "America/Guadeloupe", "America/Guatemala", "America/Guayaquil", "America/Guyana", "America/Halifax", "America/Havana", "America/Hermosillo", "America/Indiana/Indianapolis", "America/Indiana/Knox", "America/Indiana/Marengo", "America/Indiana/Petersburg", "America/Indiana/Tell_City", "America/Indiana/Vevay", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Inuvik", "America/Iqaluit", "America/Jamaica", "America/Juneau", "America/Kentucky/Louisville", "America/Kentucky/Monticello", "America/Kralendijk", "America/La_Paz", "America/Lima", "America/Los_Angeles", "America/Lower_Princes", "America/Maceio", "America/Managua", "America/Manaus", "America/Marigot", "America/Martinique", "America/Matamoros", "America/Mazatlan", "America/Menominee", "America/Merida", "America/Metlakatla", "America/Mexico_City", "America/Miquelon", "America/Moncton", "America/Monterrey", "America/Montevideo", "America/Montserrat", "America/Nassau", "America/New_York", "America/Nome", "America/Noronha", "America/North_Dakota/Beulah", "America/North_Dakota/Center", "America/North_Dakota/New_Salem", "America/Nuuk", "America/Ojinaga", "America/Panama", "America/Paramaribo", "America/Phoenix", "America/Port-au-Prince", "America/Port_of_Spain", "America/Porto_Velho", "America/Puerto_Rico", "America/Punta_Arenas", "America/Rankin_Inlet", "America/Recife", "America/Regina", "America/Resolute", "America/Rio_Branco", "America/Santarem", "America/Santiago", "America/Santo_Domingo", "America/Sao_Paulo", "America/Scoresbysund", "America/Sitka", "America/St_Barthelemy", "America/St_Johns", "America/St_Kitts", "America/St_Lucia", "America/St_Thomas", "America/St_Vincent", "America/Swift_Current", "America/Tegucigalpa", "America/Thule", "America/Tijuana", "America/Toronto", "America/Tortola", "America/Vancouver", "America/Whitehorse", "America/Winnipeg", "America/Yakutat", "America/Yellowknife", "Antarctica/Casey", "Antarctica/Davis", "Antarctica/DumontDUrville", "Antarctica/Macquarie", "Antarctica/Mawson", "Antarctica/McMurdo", "Antarctica/Palmer", "Antarctica/Rothera", "Antarctica/Syowa", "Antarctica/Troll", "Antarctica/Vostok", "Arctic/Longyearbyen", "Asia/Aden", "Asia/Almaty", "Asia/Amman", "Asia/Anadyr", "Asia/Aqtau", "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Atyrau", "Asia/Baghdad", "Asia/Bahrain", "Asia/Baku", "Asia/Bangkok", "Asia/Barnaul", "Asia/Beirut", "Asia/Bishkek", "Asia/Brunei", "Asia/Chita", "Asia/Choibalsan", "Asia/Colombo", "Asia/Damascus", "Asia/Dhaka", "Asia/Dili", "Asia/Dubai", "Asia/Dushanbe", "Asia/Famagusta", "Asia/Gaza", "Asia/Hebron", "Asia/Ho_Chi_Minh", "Asia/Hong_Kong", "Asia/Hovd", "Asia/Irkutsk", "Asia/Jakarta", "Asia/Jayapura", "Asia/Jerusalem", "Asia/Kabul", "Asia/Kamchatka", "Asia/Karachi", "Asia/Kathmandu", "Asia/Khandyga", "Asia/Kolkata", "Asia/Krasnoyarsk", "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Kuwait", "Asia/Macau", "Asia/Magadan", "Asia/Makassar", "Asia/Manila", "Asia/Muscat", "Asia/Nicosia", "Asia/Novokuznetsk", "Asia/Novosibirsk", "Asia/Omsk", "Asia/Oral", "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Pyongyang", "Asia/Qatar", "Asia/Qostanay", "Asia/Qyzylorda", "Asia/Riyadh", "Asia/Sakhalin", "Asia/Samarkand", "Asia/Seoul", "Asia/Shanghai", "Asia/Singapore", "Asia/Srednekolymsk", "Asia/Taipei", "Asia/Tashkent", "Asia/Tbilisi", "Asia/Tehran", "Asia/Thimphu", "Asia/Tokyo", "Asia/Tomsk", "Asia/Ulaanbaatar", "Asia/Urumqi", "Asia/Ust-Nera", "Asia/Vientiane", "Asia/Vladivostok", "Asia/Yakutsk", "Asia/Yangon", "Asia/Yekaterinburg", "Asia/Yerevan", "Atlantic/Azores", "Atlantic/Bermuda", "Atlantic/Canary", "Atlantic/Cape_Verde", "Atlantic/Faroe", "Atlantic/Madeira", "Atlantic/Reykjavik", "Atlantic/South_Georgia", "Atlantic/St_Helena", "Atlantic/Stanley", "Australia/Adelaide", "Australia/Brisbane", "Australia/Broken_Hill", "Australia/Darwin", "Australia/Eucla", "Australia/Hobart", "Australia/Lindeman", "Australia/Lord_Howe", "Australia/Melbourne", "Australia/Perth", "Australia/Sydney", "Europe/Amsterdam", "Europe/Andorra", "Europe/Astrakhan", "Europe/Athens", "Europe/Belgrade", "Europe/Berlin", "Europe/Bratislava", "Europe/Brussels", "Europe/Bucharest", "Europe/Budapest", "Europe/Busingen", "Europe/Chisinau", "Europe/Copenhagen", "Europe/Dublin", "Europe/Gibraltar", "Europe/Guernsey", "Europe/Helsinki", "Europe/Isle_of_Man", "Europe/Istanbul", "Europe/Jersey", "Europe/Kaliningrad", "Europe/Kirov", "Europe/Kyiv", "Europe/Lisbon", "Europe/Ljubljana", "Europe/London", "Europe/Luxembourg", "Europe/Madrid", "Europe/Malta", "Europe/Mariehamn", "Europe/Minsk", "Europe/Monaco", "Europe/Moscow", "Europe/Oslo", "Europe/Paris", "Europe/Podgorica", "Europe/Prague", "Europe/Riga", "Europe/Rome", "Europe/Samara", "Europe/San_Marino", "Europe/Sarajevo", "Europe/Saratov", "Europe/Simferopol", "Europe/Skopje", "Europe/Sofia", "Europe/Stockholm", "Europe/Tallinn", "Europe/Tirane", "Europe/Ulyanovsk", "Europe/Vaduz", "Europe/Vatican", "Europe/Vienna", "Europe/Vilnius", "Europe/Volgograd", "Europe/Warsaw", "Europe/Zagreb", "Europe/Zurich", "Indian/Antananarivo", "Indian/Chagos", "Indian/Christmas", "Indian/Cocos", "Indian/Comoro", "Indian/Kerguelen", "Indian/Mahe", "Indian/Maldives", "Indian/Mauritius", "Indian/Mayotte", "Indian/Reunion", "Pacific/Apia", "Pacific/Auckland", "Pacific/Bougainville", "Pacific/Chatham", "Pacific/Chuuk", "Pacific/Easter", "Pacific/Efate", "Pacific/Fakaofo", "Pacific/Fiji", "Pacific/Funafuti", "Pacific/Galapagos", "Pacific/Gambier", "Pacific/Guadalcanal", "Pacific/Guam", "Pacific/Honolulu", "Pacific/Kanton", "Pacific/Kiritimati", "Pacific/Kosrae", "Pacific/Kwajalein", "Pacific/Majuro", "Pacific/Marquesas", "Pacific/Midway", "Pacific/Nauru", "Pacific/Niue", "Pacific/Norfolk", "Pacific/Noumea", "Pacific/Pago_Pago", "Pacific/Palau", "Pacific/Pitcairn", "Pacific/Pohnpei", "Pacific/Port_Moresby", "Pacific/Rarotonga", "Pacific/Saipan", "Pacific/Tahiti", "Pacific/Tarawa", "Pacific/Tongatapu", "Pacific/Wake", "Pacific/Wallis"];
var Wr = { country_code: ar, time_zone: nr };
var ir = Wr;
var Yr = { title: "Base", code: "base" };
var sr = Yr;
var or = ["/Applications", "/bin", "/boot", "/boot/defaults", "/dev", "/etc", "/etc/defaults", "/etc/mail", "/etc/namedb", "/etc/periodic", "/etc/ppp", "/home", "/home/user", "/home/user/dir", "/lib", "/Library", "/lost+found", "/media", "/mnt", "/net", "/Network", "/opt", "/opt/bin", "/opt/include", "/opt/lib", "/opt/sbin", "/opt/share", "/private", "/private/tmp", "/private/var", "/proc", "/rescue", "/root", "/sbin", "/selinux", "/srv", "/sys", "/System", "/tmp", "/Users", "/usr", "/usr/X11R6", "/usr/bin", "/usr/include", "/usr/lib", "/usr/libdata", "/usr/libexec", "/usr/local/bin", "/usr/local/src", "/usr/obj", "/usr/ports", "/usr/sbin", "/usr/share", "/usr/src", "/var", "/var/log", "/var/mail", "/var/spool", "/var/tmp", "/var/yp"];
var cr = { "application/epub+zip": { extensions: ["epub"] }, "application/gzip": { extensions: ["gz"] }, "application/java-archive": { extensions: ["jar", "war", "ear"] }, "application/json": { extensions: ["json", "map"] }, "application/ld+json": { extensions: ["jsonld"] }, "application/msword": { extensions: ["doc", "dot"] }, "application/octet-stream": { extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"] }, "application/ogg": { extensions: ["ogx"] }, "application/pdf": { extensions: ["pdf"] }, "application/rtf": { extensions: ["rtf"] }, "application/vnd.amazon.ebook": { extensions: ["azw"] }, "application/vnd.apple.installer+xml": { extensions: ["mpkg"] }, "application/vnd.mozilla.xul+xml": { extensions: ["xul"] }, "application/vnd.ms-excel": { extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"] }, "application/vnd.ms-fontobject": { extensions: ["eot"] }, "application/vnd.ms-powerpoint": { extensions: ["ppt", "pps", "pot"] }, "application/vnd.oasis.opendocument.presentation": { extensions: ["odp"] }, "application/vnd.oasis.opendocument.spreadsheet": { extensions: ["ods"] }, "application/vnd.oasis.opendocument.text": { extensions: ["odt"] }, "application/vnd.openxmlformats-officedocument.presentationml.presentation": { extensions: ["pptx"] }, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": { extensions: ["xlsx"] }, "application/vnd.openxmlformats-officedocument.wordprocessingml.document": { extensions: ["docx"] }, "application/vnd.rar": { extensions: ["rar"] }, "application/vnd.visio": { extensions: ["vsd", "vst", "vss", "vsw"] }, "application/x-7z-compressed": { extensions: ["7z"] }, "application/x-abiword": { extensions: ["abw"] }, "application/x-bzip": { extensions: ["bz"] }, "application/x-bzip2": { extensions: ["bz2", "boz"] }, "application/x-csh": { extensions: ["csh"] }, "application/x-freearc": { extensions: ["arc"] }, "application/x-httpd-php": { extensions: ["php"] }, "application/x-sh": { extensions: ["sh"] }, "application/x-tar": { extensions: ["tar"] }, "application/xhtml+xml": { extensions: ["xhtml", "xht"] }, "application/xml": { extensions: ["xml", "xsl", "xsd", "rng"] }, "application/zip": { extensions: ["zip"] }, "audio/3gpp": { extensions: ["3gpp"] }, "audio/3gpp2": { extensions: ["3g2"] }, "audio/aac": { extensions: ["aac"] }, "audio/midi": { extensions: ["mid", "midi", "kar", "rmi"] }, "audio/mpeg": { extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"] }, "audio/ogg": { extensions: ["oga", "ogg", "spx", "opus"] }, "audio/opus": { extensions: ["opus"] }, "audio/wav": { extensions: ["wav"] }, "audio/webm": { extensions: ["weba"] }, "font/otf": { extensions: ["otf"] }, "font/ttf": { extensions: ["ttf"] }, "font/woff": { extensions: ["woff"] }, "font/woff2": { extensions: ["woff2"] }, "image/avif": { extensions: ["avif"] }, "image/bmp": { extensions: ["bmp"] }, "image/gif": { extensions: ["gif"] }, "image/jpeg": { extensions: ["jpeg", "jpg", "jpe"] }, "image/png": { extensions: ["png"] }, "image/svg+xml": { extensions: ["svg", "svgz"] }, "image/tiff": { extensions: ["tif", "tiff"] }, "image/vnd.microsoft.icon": { extensions: ["ico"] }, "image/webp": { extensions: ["webp"] }, "text/calendar": { extensions: ["ics", "ifb"] }, "text/css": { extensions: ["css"] }, "text/csv": { extensions: ["csv"] }, "text/html": { extensions: ["html", "htm", "shtml"] }, "text/javascript": { extensions: ["js", "mjs"] }, "text/plain": { extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"] }, "video/3gpp": { extensions: ["3gp", "3gpp"] }, "video/3gpp2": { extensions: ["3g2"] }, "video/mp2t": { extensions: ["ts"] }, "video/mp4": { extensions: ["mp4", "mp4v", "mpg4"] }, "video/mpeg": { extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"] }, "video/ogg": { extensions: ["ogv"] }, "video/webm": { extensions: ["webm"] }, "video/x-msvideo": { extensions: ["avi"] } };
var Zr = { directoryPaths: or, mimeTypes: cr };
var lr = Zr;
var Jr = { color: We2, database: Xe2, hacker: Qe2, internet: tr, location: ir, metadata: sr, system: lr };
var Mi = Jr;

// node_modules/@faker-js/faker/dist/esm/chunk-DC4EFTFP.mjs
var r2 = ["검은색", "금색", "난초색", "노란색", "라임색", "마젠타", "민트색", "분홍색", "빨간색", "상아색", "연보라색", "연어색", "옥색", "올리브", "은색", "자두색", "자주색", "적갈색", "주황색", "청록색", "초록색", "푸른색", "하늘색", "하얀색", "회색"];
var H3 = { human: r2 };
var i3 = H3;
var m3 = ["{{company.prefix}} {{person.first_name}}", "{{person.first_name}} {{company.suffix}}"];
var f3 = ["주식회사", "한국"];
var n2 = ["연구소", "게임즈", "그룹", "전자", "물산", "코리아", "공사", "증권", "은행", "중공업"];
var J3 = { name_pattern: m3, prefix: f3, suffix: n2 };
var p2 = J3;
var a2 = { wide: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], abbr: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"] };
var l2 = { wide: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"], abbr: ["일", "월", "화", "수", "목", "금", "토"] };
var O3 = { month: a2, weekday: l2 };
var d2 = O3;
var u3 = ["co.kr", "com", "biz", "info", "ne.kr", "net", "or.kr", "org"];
var s2 = ["gmail.com", "yahoo.co.kr", "hanmail.net", "naver.com"];
var Q3 = { domain_suffix: u3, free_email: s2 };
var x2 = Q3;
var c2 = ["강릉", "양양", "인제", "광주", "구리", "부천", "밀양", "통영", "창원", "거창", "고성", "양산", "김천", "구미", "영주", "광산", "남", "북", "고창", "군산", "남원", "동작", "마포", "송파", "용산", "부평", "강화", "수성", "수원", "속초", "전주", "목포", "분당", "안양", "시흥"];
var y2 = ["{{location.city_name}}{{location.city_suffix}}"];
var _3 = ["구", "시", "군"];
var D3 = ["###-###", "#####"];
var b3 = ["아파트 ###동", "###호"];
var k2 = ["강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울", "울산", "인천", "전남", "전북", "제주", "충남", "충북", "세종"];
var h2 = ["강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울", "울산", "인천", "전남", "전북", "제주", "충남", "충북", "세종"];
var w2 = ["상계", "화곡", "신정", "목", "잠실", "면목", "주안", "중", "정왕", "구로", "신월", "연산", "창", "만수", "중계", "검단", "상도", "방배", "장유", "상", "광명", "신길", "행신", "대명", "동탄", "판교", "연무"];
var g2 = ["{{location.street_name}}{{location.street_suffix}}"];
var L2 = ["읍", "면", "동"];
var R3 = { city_name: c2, city_pattern: y2, city_suffix: _3, postcode: D3, secondary_address: b3, state: k2, state_abbr: h2, street_name: w2, street_pattern: g2, street_suffix: L2 };
var P3 = R3;
var v3 = ["국가는", "법률이", "정하는", "바에", "의하여", "재외국민을", "보호할", "의무를", "진다.", "모든", "국민은", "신체의", "자유를", "가진다.", "전통문화의", "계승·발전과", "민족문화의", "창달에", "노력하여야", "한다.", "통신·방송의", "시설기준과", "신문의", "기능을", "보장하기", "위하여", "필요한", "사항은", "법률로", "정한다.", "헌법에", "체결·공포된", "조약과", "일반적으로", "승인된", "국제법규는", "국내법과", "같은", "효력을", "다만,", "현행범인인", "경우와", "장기", "3년", "이상의", "형에", "해당하는", "죄를", "범하고", "도피", "또는", "증거인멸의", "염려가", "있을", "때에는", "사후에", "영장을", "청구할", "수", "있다.", "저작자·발명가·과학기술자와", "예술가의", "권리는", "법률로써", "보호한다.", "형사피고인은", "유죄의", "판결이", "확정될", "때까지는", "무죄로", "추정된다.", "행위시의", "법률에", "범죄를", "구성하지", "아니하는", "행위로", "소추되지", "아니하며,", "동일한", "범죄에", "대하여", "거듭", "처벌받지", "아니한다.", "평생교육을", "진흥하여야", "사생활의", "비밀과", "침해받지", "의무교육은", "무상으로", "모성의", "보호를"];
var S2 = { words: v3 };
var C3 = S2;
var T2 = { title: "Korean", code: "ko", language: "ko", endonym: "한국어", dir: "ltr", script: "Kore" };
var N3 = T2;
var B3 = ["서연", "민서", "서현", "지우", "서윤", "지민", "수빈", "하은", "예은", "윤서", "민준", "지후", "지훈", "준서", "현우", "예준", "건우", "현준", "민재", "우진", "은주", "서준", "도윤", "시우", "주원", "하준", "지호", "준우", "도현", "선우", "서진", "연우", "유준", "정우", "승우", "승현", "시윤", "준혁", "은우", "지환", "승민", "유찬", "윤우", "민성", "준영", "시후", "진우", "지원", "수현", "재윤", "시현", "동현", "수호", "태윤", "민규", "재원", "한결", "민우", "재민", "은찬", "윤호", "시원", "이준", "민찬", "지안", "시온", "성민", "준호", "승준", "성현", "이안", "현서", "재현", "하율", "지한", "우빈", "태민", "지성", "예성", "민호", "태현", "지율", "민혁", "서우", "성준", "은호", "규민", "정민", "윤성", "윤재", "하람", "하진", "민석", "준수", "은성", "태양", "예찬", "준희", "도훈", "하민", "준성", "지완", "현수", "승원", "강민", "정현", "우주", "태준", "승호", "주호", "성빈", "주안", "도영", "우현", "민수", "건희", "주환", "하랑", "다온", "정훈", "원준", "시율", "시훈", "지오", "민기", "현민", "시완", "경민", "서율", "현성", "승윤", "주영", "동하", "태훈", "민건", "도율", "동건", "재훈", "태영", "호준", "승빈", "가온", "재준", "시환", "세현", "태경", "이현", "도원", "도경", "정후", "현진", "재영", "정원", "서후", "현승", "찬영", "라온", "영준", "상현", "범준", "온유", "승훈", "성윤", "재하", "로운", "주혁", "찬우", "이든", "연준", "하윤", "우성", "동윤", "성훈", "승재", "찬희", "지혁", "건호", "세준", "동욱", "태율", "수민", "태호", "유건", "승찬", "도하", "윤찬", "단우", "태우", "현호", "윤후", "현빈", "시안", "재우", "준석", "지운", "주현", "형준", "연호", "효준", "재혁", "성우", "규빈", "주완", "주한", "동우", "하늘", "수혁", "재희", "시헌", "상윤", "우찬", "유빈", "진호", "유현", "석현", "우영", "준형", "도연", "유진", "서원", "지용", "용준", "규현", "준후", "동준", "은율", "도준", "호진", "강현", "태인", "진혁", "상우", "우준", "은준", "승후", "시호", "지웅", "승환", "은혁", "동훈", "유민", "하온", "성원", "도진", "승주", "영민", "대현", "종현", "세훈", "도겸", "서호", "현석", "신우", "재호", "준현", "원우", "강우", "승유", "상민", "태환", "은수", "선호", "준원", "민결", "정빈", "태오", "동혁", "영우", "아인", "유안", "동규", "진서", "태성", "유성", "혜성", "요한", "성진", "여준", "윤건", "인우", "태건", "주형", "우혁", "희찬", "한율", "하성", "준범", "찬민", "정호", "윤수", "민제", "성호", "인성", "건후", "경준", "희준", "상준", "승혁", "재이", "태원", "준민", "재율", "민승", "태웅", "채민", "한울", "승헌", "재성", "시준", "진영", "환희", "선율", "세윤", "호연", "승기", "세진", "성재", "태하", "주성", "호영", "가람", "다원", "찬율", "현규", "규원", "이한", "연후", "현욱", "준하", "시영", "희성", "정윤", "진욱", "지윤", "창민", "지온", "지섭", "해준", "정환", "건율", "은재", "찬혁", "동연", "유하", "노아", "성찬", "세민", "서빈", "우석", "영훈", "도형", "준기", "윤준", "지석", "로이", "인호", "은후", "명준", "상훈", "기현", "재형", "아준", "해성", "민후", "진성", "주하", "시언", "시형", "상원", "태연", "도건", "재인", "준휘", "동민", "한준", "기범", "다니", "주헌", "재용", "수환", "태규", "선재", "영재", "영진", "주찬", "지수", "동호", "우재", "승범", "동원", "한별", "건영", "승연", "도헌", "한솔", "유담", "예건", "은결", "민율", "민욱", "지헌", "석준", "준모", "현재", "이수", "리안", "재범", "재환", "찬유", "호윤", "해솔", "태희", "건하", "상혁", "성욱", "영찬", "동환", "진원", "하빈", "준환", "재욱", "경훈", "준상", "서하", "연수", "하루", "예담", "수찬", "강준", "도균", "태이", "형우", "승규", "재빈", "종혁", "도운", "근우", "찬호", "윤혁", "유신", "리우", "범수", "동주", "혁준", "찬빈", "한빈", "태빈", "창현", "성주", "지현", "이찬", "유승", "은규", "연재", "희재", "태완", "수영", "병준", "동휘", "세영", "태욱", "의준", "관우", "성환", "재연", "재경", "민영", "윤석", "대한", "선준", "지유", "지욱", "은석", "성연", "경빈", "정욱", "한서", "보겸", "인준", "윤제", "도빈", "준용", "규진", "희원", "주언", "다율", "성하", "영광", "현중", "종윤", "형진", "채훈", "정혁", "태형", "준오", "진수", "승진", "유겸", "찬서", "종민", "영빈", "의찬", "승하", "종우", "유환", "희수", "호성", "태헌", "채우", "재헌", "원재", "석민", "경원", "승리", "강희", "상욱", "민형", "용현", "범진", "민섭", "준이", "서안", "명진", "예훈", "시혁", "상진", "영현", "원석", "승수", "우민", "현태", "도담", "정연", "이삭", "형주", "미르", "대윤", "로하", "정인", "용우", "유호", "태균", "건민", "요셉", "기훈", "영웅", "지홍", "종원", "선후", "동후", "태겸", "종훈", "유한", "제민", "준표", "원빈", "보성", "인서", "동희", "의진", "준규", "리한", "재후", "혜준", "경호", "진현", "현도", "찬솔", "호현", "다현", "동균", "원호", "재웅", "세인", "하겸", "제이", "민겸", "진석", "승욱", "동근", "다훈", "형민", "동영", "대호", "기윤", "지승", "슬우", "해찬", "대영", "강윤", "서한", "동진", "진후", "정진", "윤상", "영서", "민균", "재승", "정준", "세찬", "규태", "민국", "우림", "경환", "우솔", "의현", "대성", "도엽", "근호", "효재", "다민", "효민", "민철", "예승", "준엽", "어진", "승언", "하원", "두현", "지형", "성율", "채운", "진형", "대원", "정수", "시하", "도은", "용진", "주빈", "제현", "태진", "범서", "건형", "해인", "로건", "민교", "혁진", "수인", "슬찬", "영호", "하엘", "정운", "경현", "세환", "태산", "아론", "선민", "준섭", "태후", "은유", "기찬", "승엽", "선규", "다빈", "태주", "기태", "채환", "제윤", "승완", "무진", "정재", "수안", "진규", "시유", "용재", "현웅", "기준", "윤오", "우리", "태은", "수한", "석훈", "석원", "로빈", "다엘", "세원", "채윤", "원진", "태혁", "재아", "규연", "한빛", "필립", "성혁", "재완", "제하", "선빈", "세빈", "윤기", "이레", "인혁", "주훈", "광현", "도혁", "재진", "보민", "진하", "동빈", "병찬", "효성", "성규", "채준", "승효", "시진", "승한", "시운", "원영", "리호", "강빈", "강호", "성운", "유석", "채호", "다겸", "종호", "채원", "이도", "범석", "현종", "성수", "도언", "민하", "석진", "건욱", "상연", "건휘", "한성", "효원", "믿음", "도우", "규호", "선웅", "태유", "강산", "도환", "선유", "형석", "정헌", "현기", "용민", "태수", "하담", "무성", "희승", "리온", "서훈", "용훈", "대훈", "루이", "이환", "동화", "경태", "이담", "강인", "유근", "영후", "찬휘", "래원", "채현", "무빈", "민근", "희우", "하음", "민상", "윤민", "현찬", "경록", "찬웅", "지상", "상호", "서찬", "루다", "하영", "찬형", "효찬", "희윤", "영인", "규성", "예현", "정한", "현율", "지효", "상빈", "채완", "사무", "경찬", "솔민", "서형", "태서", "동율", "재홍", "은기", "승운", "은총", "윤환", "주용", "서환", "용찬", "진환", "세연", "누리", "진율", "원희", "기원", "인후", "태강", "준식", "민권", "세호", "병현", "재서", "윤빈", "인수", "호빈", "세종", "신후", "효빈", "서인", "대연", "우형", "마루", "태용", "주윤", "수완", "보현", "경모", "희건", "영주", "장우", "석우", "강유", "영석", "정안", "동해", "동찬", "휘성", "규범", "영환", "호재", "상헌", "병훈", "현오", "동은", "용하", "광민", "인규", "명재", "인찬", "세웅", "진모", "도한", "성은", "도완", "중현", "대경", "리오", "대환", "해민", "민솔", "민구", "이솔", "윤겸", "다윤", "채율", "인하", "동완", "경수", "수오", "찬욱", "태온", "태운", "리환", "승건", "재석", "재유", "해온", "호민", "용빈", "태한", "연성", "도후", "기주", "다인", "서혁", "예강", "홍준", "지찬", "대희", "강훈", "이건", "현후", "장현", "레오", "호찬", "이서", "주연", "진유", "해원", "동헌", "시찬", "성후", "종하", "근영", "제원", "세혁", "예한", "태랑", "이루", "준명", "무경", "시연", "진웅", "찬규", "은상", "성모", "현동", "원혁", "용호", "동엽", "상후", "규환", "대건", "루하", "재겸", "건웅", "지빈", "해윤", "하운", "호원", "현제", "석빈", "제우", "휘준", "기환", "규담", "경진", "치우", "민환", "세헌", "제훈", "장원", "해담", "서온", "현식", "휘찬", "예환", "동재", "창우", "준아", "해진", "준한", "재휘", "이헌", "준재", "기민", "영욱", "진오", "로한", "윤형", "상율", "강후", "석주", "세율", "하승", "하울", "명훈", "한겸", "창희", "태림", "찬이", "세온", "지범", "성범", "서완", "원찬", "정찬", "민식", "동인", "범규", "영수", "준경", "민용", "유노", "원규", "규하", "창준", "하임", "현섭", "민범", "민종", "도휘", "강율", "현모", "리후", "우경", "규영", "상엽", "은택", "송현", "윤하", "승제", "가을", "다운", "형찬", "혁주", "종찬", "훈민", "윤태", "석영", "윤규", "승휘", "도유", "재찬", "형빈", "찬준", "석호", "우람", "요엘", "태범", "무겸", "희상", "준빈", "은빈", "기성", "다솔", "사랑", "준연", "진명", "세하", "다윗", "형욱", "용주", "종빈", "호수", "윤섭", "진용", "재익", "창빈", "소율", "수원", "지태", "해율", "동운", "재운", "강혁", "권우", "기영", "리원", "창훈", "선욱", "민중", "세한", "재한", "종욱", "윤승", "동한", "성용", "은섭", "라윤", "승희", "종인", "수하", "화랑", "하언", "승표", "소망", "준열", "태휘", "하경", "승용", "유섭", "민강", "래현", "한음", "라현", "한영", "수겸", "석환", "동률", "형규", "예율", "이언", "윤슬", "병우", "연석", "우겸", "수형", "준선", "규찬", "일우", "제영", "제희", "승율", "민주", "태정", "병민", "진헌", "다한", "라엘", "남규", "윤진", "태리", "재상", "정완", "찬수", "진솔", "수연", "운찬", "호경", "주은", "건률", "경윤", "지명", "성제", "로아", "예안", "은오", "준홍", "권율", "지산", "태석", "효승", "병윤", "연서", "유원", "가빈", "보검", "이산", "준승", "건아", "건이", "민진", "용성", "예온", "유상", "범찬", "병호", "명현", "남우", "문성", "동권", "주승", "규혁", "승오", "효석", "병주", "호승", "백호", "유태", "남준", "주엽", "상범", "강찬", "승모", "대겸", "유수", "지언", "원율", "태언", "성균", "승균", "라율", "희민", "예람", "한주", "한선", "무현", "수윤", "정규", "시욱", "찬진", "태섭", "의성", "민현", "승철", "희율", "현택", "유완", "보석", "태승", "별하", "영운", "종환", "이룸", "태근", "지담", "은겸", "찬현", "현채", "해든", "보승", "정율", "찬열", "경률", "찬주", "문수", "은서", "아성", "한민", "현겸", "성일", "신혁", "종연", "바다", "동언", "로윤", "종범", "석찬", "무영", "호석", "루빈", "다호", "아민", "재오", "병욱", "기웅", "하균", "호건", "한희", "형서", "경우", "신유", "은률", "석희", "민유", "에녹", "수범", "유주", "진표", "우승", "보경", "산하", "승태", "담우", "우연", "경서", "주율", "태일", "재은", "수성", "하현", "성헌", "아진", "동수", "현근", "건혁", "준일", "리현", "명규", "아람", "효진", "준태", "한승", "수훈", "채성", "상운", "성태", "부건", "찬용", "하림", "순우", "제준", "병헌", "찬후", "민창", "우정", "명호", "경욱", "이겸", "예하", "이재", "윤도", "현구", "신율", "다올", "루한", "영하", "민관", "정효", "규헌", "나율", "연욱", "기백", "준협", "동유", "형원", "은솔", "수용", "리건", "윤철", "여름", "기호", "상은", "라원", "용수", "철민", "휘서", "재건", "주명", "영원", "모건", "우섭", "성한", "도민", "민오", "근형", "정주", "주열", "태린", "종석", "시열", "예겸", "재정", "윤영", "래오", "채빈", "우인", "지인", "해강", "윤식", "서언", "보근", "준화", "도일", "용희", "건오", "채혁", "희제", "교빈", "부겸", "태관", "명우", "세운", "희태", "시한", "창윤", "희서", "진한", "규한", "대규", "진홍", "기연", "윤결", "윤범", "우제", "율찬", "승화", "병규", "용석", "예호", "정범", "하선", "관호", "명성", "장호", "도아", "기문", "노엘", "태권", "찬슬", "명환", "성엽", "승일", "영윤", "장훈", "창호", "루안", "호림", "준헌", "세중", "문규", "정석", "재선", "건준", "찬윤", "서휘", "주민", "두영", "힘찬", "연승", "정하", "대웅", "효근", "오현", "정희", "용원", "세형", "희철", "한이", "원기", "윤솔", "연오", "종수", "종서", "푸름", "시오", "정모", "동국", "수홍", "유재", "종헌", "승택", "장혁", "다준", "한규", "준겸", "태곤", "동기", "선오", "승안", "영록", "예서", "영제", "선진", "용환", "래온", "성철", "단율", "리암", "현일", "연제", "성근", "혜찬", "병진", "진섭", "남현", "재권", "경석", "정엽", "희범", "수아", "라준", "신욱", "서헌", "윤구", "승열", "해랑", "주석", "명근", "재엽", "원형", "명찬", "명수", "기율", "테오", "유온", "담현", "나단", "준구", "도희", "재강", "하린", "순호", "노을", "우용", "성웅", "찬하", "수헌", "원태", "범주", "종은", "건일", "희도", "예일", "근후", "준의", "명민", "제연", "소명", "은표", "준교", "정웅", "호정", "동관", "우담", "진희", "부경", "이원", "설민", "한진", "가율", "영도", "경재", "현명", "시경", "태선", "치원", "은제", "도규", "용욱", "무준", "현희", "동석", "담율", "정무", "은교", "해승", "소울", "영기", "유비", "현솔", "기우", "원민", "상언", "기쁨", "휘영", "환준", "재효", "다성", "주오", "병건", "예권", "은환", "서로", "남훈", "인환", "상규", "본준", "찬양", "도근", "도욱", "율호", "제호", "두원", "재언", "재명", "범희", "주온", "서범", "석윤", "세범", "우철", "효건", "재근", "백현", "기혁", "혜민", "익현", "덕현", "치훈", "태홍", "현철", "예섭", "선균", "아윤", "은민", "진훈", "철우", "정근", "무건", "영건", "재열", "인석", "홍석", "용화", "현범", "강한", "신영", "채범", "희망", "오성", "명석", "창욱", "영채", "치현", "윤종", "재중", "상희", "대은", "승겸", "연찬", "충현", "현균", "혁민", "승영", "이랑", "예닮", "기량", "광호", "효인", "제아", "인영", "효섭", "경도", "학준", "찬성", "송민", "서유", "원후", "예원", "혁찬", "지음", "민웅", "문기", "규형", "제율", "관영", "인태", "윤채", "상수", "동명", "윤택", "이엘", "영규", "정명", "효우", "기정", "평안", "채헌", "강은", "이완", "정태", "제혁", "종건", "중원", "수종", "한수", "원서", "에이", "정서", "동아", "의겸", "설우", "현담", "서웅", "윤한", "시아", "서영", "종후", "제성", "선혁", "승권", "홍민", "윤현", "연진", "요섭", "세용", "병철", "서겸", "희주", "명원", "성문", "창환", "정섭", "동성", "솔찬", "제형", "유솔", "치호", "선제", "찬홍", "기석", "종진", "다울", "시웅", "승채", "기용", "윤모", "재림", "시은", "태화", "태식", "아율", "강욱", "인재", "재균", "용범", "성휘", "경한", "제후", "바울", "한비", "재백", "가원", "승조", "성록", "주노", "창수", "로원", "하륜", "성완", "산희", "지강", "치윤", "예범", "범기", "율빈", "루오", "종운", "지황", "본우", "상유", "강모", "우열", "예중", "평강", "주상", "영균", "정흠", "석규", "대혁", "규동", "은철", "홍기", "호세", "진구", "성열", "효상", "원일", "여민", "선용", "상명", "상효", "지영", "도협", "용운", "상협", "형근", "현교", "형호", "용규", "이강", "광희", "나엘", "가현", "한슬", "근혁", "병수", "경완", "영범", "택연", "준언", "지건", "우원", "희섭", "유강", "승은", "두연", "반석", "모세", "기완", "경주", "윤권", "리완", "은중", "은산", "규완", "준택", "기욱", "강연", "유범", "호근", "준학", "종화", "율하", "건도", "창혁", "규상", "영성", "용휘", "권희", "요환", "다함", "승학", "무결", "인철", "경인", "부성", "동경", "교현", "새벽", "영태", "루아", "규준", "호율", "용후", "건태", "호용", "성언", "다빛", "백준", "성희", "주경", "관희", "종휘", "은강", "이람", "찬일", "한유", "율희", "찬의", "동섭", "기헌", "휘승", "예후", "호균", "선홍", "지훤", "동일", "현용", "종성", "소원", "유로", "상영", "로현", "윤원", "창진", "이룬", "현상", "교준", "구현", "승구", "문경", "제인", "상화", "윤중", "준효", "준건", "바론", "오윤", "경섭", "무열", "화평", "우창", "나루", "남호", "경율", "산들", "제욱", "예근", "우태", "에릭", "율민", "진휘", "이정", "정음", "준익", "운호", "범근", "중호", "민엽", "효제", "예헌", "강휘", "그루", "승록", "준율", "우신", "현덕", "호인", "건용", "건주", "두호", "택현", "태상", "하주", "규석", "우상", "강건", "천우", "성국", "한얼", "지서", "인욱", "우종", "이선", "현유", "형섭", "상휘", "성오", "도호", "하리", "명서", "도권", "준완", "진운", "현조", "훈석", "명균", "차민", "성식", "찬석", "여찬", "찬울", "종한", "세욱", "환이", "정균", "진민", "앤드", "성인", "은휼", "강원", "현세", "호겸", "은식", "경탁", "해수", "의재", "병관", "하연", "예석", "유인", "효담", "리윤", "병권", "권호", "규선", "동형", "한률", "의연", "재규", "은효", "현탁", "서경", "루민", "휘원", "민태", "건모", "태안", "영일", "현영", "다혁", "성영", "서균", "진건", "율원", "정용", "혁수", "보윤", "환호", "휘윤", "인범", "남윤", "원섭", "대용", "찬승", "효범", "성택", "서담", "호형", "산호", "호선", "의석", "라운", "규인", "형식", "창연", "명섭", "국현", "채진", "예빈", "유철", "준철", "이로", "가민", "호태", "창범", "은범", "호중", "서주", "대헌", "윤근", "인겸", "홍재", "성효", "홍찬", "이진", "솔빈", "건유", "창규", "하솔", "석범", "서욱", "보규", "아현", "승지", "무혁", "동오", "승온", "다건", "진기", "원종", "원겸", "성무", "채하", "희권", "다움", "산이", "혁빈", "환서", "희담", "도열", "광훈", "우수", "지백", "현이", "단유", "휘수", "성유", "라호", "교진", "마음", "나우", "영한", "해일", "민한", "상하", "훈희", "한경", "호범", "용기", "대진", "의담", "예랑", "유영", "명철", "휘재", "찬식", "선엽", "서용", "효신", "혁재", "민세", "해리", "재광", "지솔", "휘건", "의빈", "영헌", "대우", "채영", "한중", "진태", "이연", "두진", "건빈", "제환", "정기", "대휘", "남혁", "경규", "재학", "희온", "성화", "제헌", "영권", "휘상", "래윤", "익준", "성률", "라임", "조이", "기하", "원경", "성권", "규식", "유혁", "태풍", "해건", "주우", "규람", "우린", "재온", "예종", "민선", "유천", "의선", "현무", "유림", "하건", "부민", "다을", "루카", "초원", "재문", "문찬", "대율", "태종", "효중", "용태", "세완", "현선", "태광", "상록", "윤담", "연웅", "도성", "선중", "상인", "한샘", "상재", "경헌", "카이", "상일", "찬오", "성안", "현주", "원식", "의영", "영조", "재화", "광수", "주선", "시엘", "원상", "해밀", "규림", "종율", "차윤", "재관", "관후", "철현", "조슈", "유지", "기담", "의민", "현건", "현창", "로준", "문혁", "교민", "인섭", "규안", "푸른", "대운", "중혁", "동범", "승협", "드림", "류하", "나로", "동효", "무찬", "시울", "동겸", "여훈", "규서", "원중", "여울", "두환", "서홍", "금성", "용건", "경일", "휘민", "리하", "헌재", "상철", "희창", "웅찬", "승관", "의정", "운성", "건규", "용대", "자윤", "지구", "희락", "온율", "상경", "원욱", "경근", "솔우", "휘연", "병재", "찬원", "순혁", "한길", "담희", "예윤", "강석", "철호", "창성", "강률", "문석", "우택", "홍주", "유일", "호산", "명관", "리준", "호열", "동열", "종선", "인기", "치영", "보람", "오름", "찬범", "보담", "순범", "세움", "성광", "서희", "영철", "완희", "성결", "태령", "유엘", "호담", "케빈", "경운", "경택", "호은", "은종", "비오", "성관", "형윤", "한석", "로희", "명건", "승아", "해빈", "영근", "유권", "희강", "은태", "규보", "강이", "형선", "기동", "원용", "나라", "창하", "세주", "이음", "해람", "아빈", "찬기", "제용", "기은", "진교", "류현", "세강", "의윤", "권민", "희웅", "성겸", "형기", "차율", "광재", "광진", "하라", "택민", "대준", "승교", "대욱", "조영", "경덕", "성경", "호철", "희진", "윤동", "견우", "화준", "재안", "대수", "의서", "은현", "세건", "의환", "이우", "근태", "경후", "용선", "경식", "민택", "희영", "정식", "건무", "홍빈", "동협", "순찬", "승보", "제승", "해환", "희석", "라이", "진겸", "민조", "알렉", "두준", "해영", "수진", "라울", "나현", "승인", "태검", "평화", "규언", "창영", "혜강", "휘경", "하유", "대승", "루호", "인선", "벤자", "우식", "상기", "종명", "성보", "창용", "루현", "조은", "성건", "용제", "수웅", "채욱", "조한", "영선", "보건", "은별", "회준", "채웅", "범호", "남기", "수언", "무율", "라일", "준회", "진효", "재국", "근원", "경하", "남경", "진온", "규승", "자운", "진완", "정의", "준안", "제경", "종희", "호제", "원택", "슬옹", "희중", "진선", "건훈", "영승", "헌우", "건효", "정언", "재동", "민훈", "수열", "레이", "우건", "규도", "여원", "규남", "효서", "병서", "로율", "브라", "인율", "대균", "혁규", "남율", "승렬", "유우", "율건", "성배", "윤교", "효영", "민홍", "규은", "대근", "준근", "병국", "영탁", "예완", "수근", "창인", "루리", "이율", "종규", "희훈", "종완", "상건", "현보", "선윤", "대찬", "정택", "휘겸", "관용", "하서", "재일", "자민", "소민", "창석", "윤창", "경무", "조엘", "상오", "희겸", "순민", "이훈", "루원", "준유", "찬종", "대형", "휘진", "기빈", "기수", "경은", "선주", "권준", "승배", "현결", "인교", "채건", "영식", "윤표", "시민", "석재", "효겸", "단후", "동익", "경목", "연태", "나무", "영상", "명기", "정오", "채오", "경오", "이래", "태찬", "예인", "희현", "강운", "주진", "성중", "용은", "바름", "상용", "선하", "선명", "희동", "규온", "유정", "병희", "유창", "택준", "선일", "라함", "다헌", "한호", "진재", "윤학", "영택", "재령", "해우", "재황", "동선", "대엽", "영휘", "찬엽", "레온", "태기", "서강", "찬별", "라훈", "태효", "준세", "나준", "이호", "지광", "설호", "성필", "승필", "은조", "다일", "강일", "근석", "서오", "주엘", "하이", "두희", "우선", "보빈", "창주", "진리", "우중", "성지", "하다", "필준", "훈서", "유래", "라익", "경필", "정제", "권영", "기승", "영대", "나혁", "준보", "원하", "학현", "아서", "장희", "여명", "재신", "래호", "욱진", "경범", "철희", "강진", "유마", "다우", "정휘", "필규", "구윤", "용연", "하을", "치후", "민률", "대인", "운혁", "홍규", "진엽", "병선", "해서", "재덕", "명주", "유은", "선휘", "아랑", "경표", "겨울", "희운", "학윤", "백찬", "병율", "신호", "영완", "유훈", "현윤", "보배", "유종", "용인", "슬기", "찬경", "자현", "중훈", "세담", "경철", "중기", "신원", "근휘", "기명", "성표", "채형", "조셉", "해주", "록희", "찬중", "형록", "수창", "제웅", "미루", "나훈", "건수", "병석", "승종", "천희", "혜승", "리율", "헌준", "종엽", "승비", "범식", "석형", "도흔", "승섭", "명제", "치민", "본율", "정협", "철웅", "예솔", "찬결", "강재", "도안", "남주", "조운", "기륜", "근희", "하일", "현묵", "철환", "준웅", "관형", "현표", "린우", "벼리", "은탁", "영신", "창근", "재담", "저스", "자훈", "진철", "태의", "규희", "기택", "광명", "병후", "선교", "주왕", "초인", "로훈", "진범", "경남", "원정", "준솔", "규섭", "효종", "루희", "노율", "규열", "홍현", "정철", "승석", "민산", "온우", "유택", "아원", "정록", "서백", "택윤", "중민", "근하", "근찬", "용한", "준찬", "성룡", "강륜", "나겸", "라언", "서정", "한웅", "지만", "성온", "두산", "윤강", "성구", "중한", "세창", "늘찬", "문영", "철수", "예우", "경배", "리훈", "성목", "대민", "래인", "태평", "웅빈", "헨리", "이윤", "보준", "로은", "민경", "순율", "현학", "성도", "승룡", "서린", "경대", "형철", "배성", "그린", "영화", "권률", "축복", "단희", "근수", "빛찬", "용혁", "병하", "충민", "소담", "광휘", "진협", "종준", "성익", "인한", "강온", "재의", "유록", "제완", "호서", "환성", "가헌", "재모", "혜율", "의건", "영오", "선기", "휘담", "대유", "충만", "지노", "성렬", "형택", "운서", "장환", "준행", "기선", "성래", "영섭", "대일", "주아", "승익", "송주", "보영", "선형", "기서", "채정", "기남", "홍진", "은엽", "시명", "규정", "원균", "성묵", "보원", "이섭", "현송", "신형", "종오", "순후", "담호", "윤홍", "근민", "태익", "한검", "신웅", "종문", "희용", "태구", "이석", "창휘", "장민", "보권", "유선", "은광", "휼", "희람", "겸희", "의주", "성아", "보명", "회윤", "중우", "래이", "후성", "경연", "부현", "상권", "한열", "희호", "남건", "문호", "인오", "순형", "동렬", "상태", "재필", "광원", "경동", "평온", "신현", "다하", "나온", "성학", "다진", "건화", "시몬", "승곤", "창헌", "형태", "두형", "단하", "창엽", "이룩", "홍윤", "성흠", "아담", "태신", "재륜", "원근", "이빈", "순규", "광준", "세휘", "루니", "하록", "이영", "민설", "새힘", "태중", "세일", "세광", "율기", "정목", "용헌", "이혁", "웅재", "차빈", "오율", "천호", "혜원", "광일", "종태", "영은", "대선", "하석", "송윤", "현률", "은진", "정일", "은한", "승래", "경돈", "윤산", "승서", "연택", "경래", "두경", "효윤", "수일", "민표", "우엽", "지흠", "선모", "우근", "효주", "용근", "정건", "인택", "도명", "회성", "치헌", "광영", "세희", "본혁", "민휘", "에반", "겨운", "구준", "이경", "승명", "보율", "원범", "로휘", "신재", "지휼", "재철", "유단", "한세", "강수", "형훈", "정유", "명선", "하론", "용균", "찬익", "도결", "승형", "아섬", "효식", "인용", "나윤", "진식", "범우", "민곤", "건엽", "경묵", "정겸", "라빈", "승률", "세명", "희종", "리언", "준제", "하훈", "송우", "경선", "세정", "정은", "예주", "우서", "현배", "세은", "송준", "성조", "리찬", "일환", "상목", "율우", "은원", "크리", "완우", "영율", "규화", "차현", "민희", "승회", "유리", "유휘", "이주", "보선", "범모", "겸재", "소중", "욱현", "데이", "찬훈", "주담", "아일", "찬재", "선구", "관율", "근서", "래훈", "학민", "강헌", "대홍", "호동", "관유", "예운", "기열", "보결", "회찬", "성동", "창재", "현목", "정래", "으뜸", "성덕", "래건", "신희", "한들", "중건", "창대", "호령", "상환", "창건", "보훈", "무근", "범성", "창은", "종국", "형건", "경륜", "민광", "슬희"];
var I2 = ["김", "이", "박", "최", "정", "강", "조", "윤", "장", "임", "오", "한", "신", "서", "권", "황", "안", "송", "류", "홍", "유", "전", "양", "고", "문", "손", "배", "백", "허", "노", "심", "하", "주", "구", "곽", "성", "차", "우", "진", "민", "나", "지", "엄", "변", "채", "원", "방", "천", "공", "현", "함", "여", "염", "석", "추", "도", "소", "설", "선", "마", "길", "연", "위", "표", "명", "기", "반", "라", "왕", "금", "옥", "육", "인", "맹", "제", "모", "남", "탁", "국", "어", "경", "은", "편", "용", "예", "봉", "사", "부", "가", "복", "태", "목", "형", "피", "두", "감", "호", "음", "빈", "동", "온", "시", "범", "좌", "팽", "승", "간", "상", "갈", "단", "견", "당"];
var K3 = [{ value: "{{person.last_name}}", weight: 1 }];
var M2 = [{ value: "{{person.lastName}} {{person.firstName}}", weight: 1 }];
var U3 = { first_name: B3, last_name: I2, last_name_pattern: K3, name: M2 };
var W3 = U3;
var j3 = ["0#-#####-####", "0##-###-####", "0##-####-####"];
var V3 = { formats: j3 };
var z3 = V3;
var F3 = ["감정적인", "같은", "거대한", "거창한", "건조한", "겁 없는", "격렬한", "결정적인", "경솔한", "경험한", "고귀한", "고급의", "고대의", "공정한", "관심 있는", "굉장한", "교양 있는", "교육받은", "교활한", "구부러진", "굴곡진", "굵은", "권위 있는", "귀여운", "극적인", "금발의", "기민한", "기분 좋은", "기쁜", "기초적인", "깊은", "깨끗한", "깨진", "끊임없는", "끔찍한", "나쁜", "날씬한", "냉담한", "넓은 마음을 가진", "놀라운", "눈부신", "눈이 먼", "늙은", "능숙한", "다른", "단조로운", "단호한", "닫힌", "당황스러운", "대담한", "대량", "더러운", "동굴 같은", "두려운", "뛰어난", "마른", "막대한", "맛있는", "매력적인", "매혹적인", "먹을 수 있는", "먼", "멍든", "메마른", "명확한", "모범적인", "무더운", "무서운", "무심한", "미친", "밀집한", "밝은", "방어", "방음", "버려진", "별개의", "복잡한", "부끄러운", "부담스러운", "부드러운", "부러워하는", "부정한", "부족한", "분명한", "분주한", "불결한", "불룩한", "불안한", "불충실한", "붐비는", "비뚤어진", "비싼", "비어 있는", "비참한", "빠른", "사랑스러운", "사랑하는", "사려 깊은", "사악한", "살아 있는", "상세한", "상쾌한", "생기 있는", "생분해성", "성실한", "세련된", "소름 끼치는", "솔직한", "순수한", "쉬운", "습한", "시원한", "신나는", "신뢰할 수 있는", "싼", "아름다운", "알고 있는", "약간의", "어느", "어두운", "어려운", "어리석은", "어색한", "어설픈", "어지러운", "억센", "엄청난", "역겨운", "열심히", "영리한", "예술적인", "예의 바른", "온화한", "완벽한", "외향적인", "용감한", "용기 있는", "우아한", "원통형", "위독한", "윙윙", "유리한", "유명한", "유익한", "유치한", "윤리적", "음침한", "의기 양양한", "의식하는", "이국적인", "이타적인", "인기 많은", "인정 많은", "일찍", "자신 있는", "잔혹한", "저명한", "저주받은", "적극적인", "적절한", "전통적인", "젊은", "정교한", "정통한", "정확한", "조잡한", "존경하는", "주의 깊은", "죽은", "즐거운", "지루한", "진지한", "짧은", "차가운", "창의적인", "철저한", "추운", "충실한", "치명적인", "친숙한", "친절한", "침착한", "쾌활한", "큰", "타원형의", "탄력 있는", "탈진한", "탐욕스러운", "통통한", "편안한", "품위 있는", "풍부한", "필수적인", "행복한", "향긋한", "혼란스러운", "화난", "화려한", "환상적", "활동적인", "활발한", "훌륭한", "흔한", "흥분한", "희미한"];
var q3 = ["간단히", "거꾸로", "거만하게", "거의", "고요히", "고의로", "극진히", "깊이", "나중에", "노하여", "다소", "다채롭게", "대담하게", "대체로", "도전적으로", "똑똑하게", "마구", "맹목적으로", "면밀히", "명랑하게", "몹시", "바르게", "바쁘게", "밝게", "분명히", "비정상적으로", "빠르게", "심하게", "아름답게", "어색하게", "언제나", "열심히", "용감하게", "우연히", "유감스럽게", "의심스럽게", "자랑스럽게", "잔인하게", "즐겁게", "지속적으로", "천하게", "쿨하게", "행복하게", "흥미롭게", "희미하게"];
var A2 = ["가입", "경보", "고뇌", "고도", "고문", "골목", "공군", "공기", "공적", "공항", "관리", "관리자", "광고", "구급차", "구실", "나이", "내세", "놀람", "농업", "달력", "대사", "대수학", "대안", "대행사", "도토리", "동맹", "동작", "무정부주의자", "반침", "배당", "배우", "변경", "별명", "보적", "보좌관", "부사", "분석", "분석자", "분위기", "불쌍한", "비행기", "비행사", "비행선", "비행장", "성인", "성취", "성취자", "쇠붙이", "술", "승인", "아드레날린", "아마존", "아몬드", "악어", "안건", "알파벳", "알파카", "애프터셰이브", "앨범", "양", "양자", "어댑터", "에어백", "에이전트", "에일", "여배우", "여진", "여파", "연산", "예의", "오후", "옹호", "외계인", "용돈", "유연", "유추", "음향학", "응집", "이점", "일", "적응", "전능자", "전진", "제단", "조언", "조정", "주소", "즐거움", "지원", "진보", "진술", "진술서", "출현", "침략", "탄약", "탐닉", "특사", "합금", "합의", "항공기", "항공료", "항공편", "해석학", "행동", "형용사", "호박색", "활동", "활동가", "활성화"];
var X3 = { adjective: F3, adverb: q3, noun: A2 };
var E3 = X3;
var Y3 = { color: i3, company: p2, date: d2, internet: x2, location: P3, lorem: C3, metadata: N3, person: W3, phone_number: z3, word: E3 };
var G3 = Y3;
var Lt = new Ve2({ locale: [G3, ul, Mi] });
export {
  Lt as faker
};
//# sourceMappingURL=@faker-js_faker_locale_ko.js.map
